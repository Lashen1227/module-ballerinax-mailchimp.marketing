{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Mailchimp Marketing API",
    "contact" : {
      "name" : "Mailchimp API Support",
      "email" : "apihelp@mailchimp.com"
    },
    "version" : "3.0.85",
    "x-permalink" : "https://github.com/mailchimp/mailchimp-client-lib-codegen/blob/main/spec/marketing.json"
  },
  "externalDocs" : {
    "description" : "Learn more with the full Mailchimp API documentation.",
    "url" : "https://mailchimp.com/developer/marketing/"
  },
  "servers" : [ {
    "url" : "https://server.api.mailchimp.com/3.0"
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "root" ],
        "summary" : "List api root resources",
        "description" : "Get links to all other resources available in the API.",
        "operationId" : "getRoot",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIRoot"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIRoot"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_root",
          "methodNameCamel" : "getRoot"
        }
      }
    },
    "/activity-feed/chimp-chatter" : {
      "get" : {
        "tags" : [ "activityFeed" ],
        "summary" : "Get latest chimp chatter",
        "description" : "Return the Chimp Chatter for this account ordered by most recent.",
        "operationId" : "getActivityFeedChimpChatter",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "ChimpChatter Collection",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse200"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse200"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_chimp_chatter",
          "methodNameCamel" : "getChimpChatter"
        }
      }
    },
    "/account-exports" : {
      "get" : {
        "tags" : [ "accountExports" ],
        "summary" : "List account exports",
        "description" : "Get a list of account exports for a given account.",
        "operationId" : "getAccountExports",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2001"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2001"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_account_exports",
          "methodNameCamel" : "listAccountExports"
        }
      },
      "post" : {
        "tags" : [ "accountExports" ],
        "summary" : "Add export",
        "description" : "Create a new account export in your Mailchimp account.",
        "operationId" : "postAccountExport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAnAccountExport"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2002"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2002"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_account_export",
          "methodNameCamel" : "createAccountExport"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/account-exports/{exportId}" : {
      "get" : {
        "tags" : [ "accountExport" ],
        "summary" : "Get account export info",
        "description" : "Get information about a specific account export.",
        "operationId" : "getAccountExportId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "exportId",
          "in" : "path",
          "description" : "The unique id for the account export",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Export ID"
          },
          "x-title" : "Export ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2002"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2002"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_account_exports",
          "methodNameCamel" : "getAccountExports"
        }
      }
    },
    "/authorized-apps" : {
      "get" : {
        "tags" : [ "authorizedApps" ],
        "summary" : "List authorized apps",
        "description" : "Get a list of an account's registered, connected applications.",
        "operationId" : "getAuthorizedApps",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2003"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2003"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      }
    },
    "/authorized-apps/{appId}" : {
      "get" : {
        "tags" : [ "authorizedApps" ],
        "summary" : "Get authorized app info",
        "description" : "Get information about a specific authorized application.",
        "operationId" : "getAuthorizedAppsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "appId",
          "in" : "path",
          "description" : "The unique id for the connected authorized application",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "App ID"
          },
          "x-title" : "App ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2004"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2004"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      }
    },
    "/automations" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "List automations",
        "description" : "Get a summary of an account's classic automations.",
        "operationId" : "getAutomations",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "before_create_time",
          "in" : "query",
          "description" : "Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Create Time"
          },
          "x-title" : "Before Create Time",
          "x-ballerina-name" : "beforeCreateTime"
        }, {
          "name" : "since_create_time",
          "in" : "query",
          "description" : "Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Create Time"
          },
          "x-title" : "Since Create Time",
          "x-ballerina-name" : "sinceCreateTime"
        }, {
          "name" : "before_start_time",
          "in" : "query",
          "description" : "Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Start Time"
          },
          "x-title" : "Before Start Time",
          "x-ballerina-name" : "beforeStartTime"
        }, {
          "name" : "since_start_time",
          "in" : "query",
          "description" : "Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Start Time"
          },
          "x-title" : "Since Start Time",
          "x-ballerina-name" : "sinceStartTime"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Restrict the results to automations with the specified status",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "save", "paused", "sending" ],
            "x-title" : "Status"
          },
          "x-title" : "Status"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2005"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2005"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Add automation",
        "description" : "Create a new classic automation in your Mailchimp account.",
        "operationId" : "postAutomations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AutomationWorkflow"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflow1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflow1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/automations/{workflowId}" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "Get automation info",
        "description" : "Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.",
        "operationId" : "getAutomationsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflow1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflow1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      }
    },
    "/automations/{workflowId}/actions/pause-all-emails" : {
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Pause automation emails",
        "description" : "Pause all emails in a specific classic automation workflow.",
        "operationId" : "postAutomationsIdActionsPauseAllEmails",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "pause_all_emails",
          "methodNameCamel" : "pauseAllEmails"
        }
      }
    },
    "/automations/{workflowId}/actions/start-all-emails" : {
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Start automation emails",
        "description" : "Start all emails in a classic automation workflow.",
        "operationId" : "postAutomationsIdActionsStartAllEmails",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "start_all_emails",
          "methodNameCamel" : "startAllEmails"
        }
      }
    },
    "/automations/{workflowId}/actions/archive" : {
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Archive automation",
        "description" : "Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.",
        "operationId" : "archiveAutomations",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "archive",
          "methodNameCamel" : "archive"
        }
      }
    },
    "/automations/{workflowId}/emails" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "List automated emails",
        "description" : "Get a summary of the emails in a classic automation workflow.",
        "operationId" : "getAutomationsIdEmails",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationEmails"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationEmails"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_all_workflow_emails",
          "methodNameCamel" : "listAllWorkflowEmails"
        }
      }
    },
    "/automations/{workflowId}/emails/{workflowEmailId}" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "Get workflow email info",
        "description" : "Get information about an individual classic automation workflow email.",
        "operationId" : "getAutomationsIdEmailsId",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflowEmail"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflowEmail"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_workflow_email",
          "methodNameCamel" : "getWorkflowEmail"
        }
      },
      "delete" : {
        "tags" : [ "automations" ],
        "summary" : "Delete workflow email",
        "description" : "Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.",
        "operationId" : "deleteAutomationsIdEmailsId",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_workflow_email",
          "methodNameCamel" : "deleteWorkflowEmail"
        }
      },
      "patch" : {
        "tags" : [ "automations" ],
        "summary" : "Update workflow email",
        "description" : "Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.",
        "operationId" : "patchAutomationEmailWorkflowId",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateInformationAboutASpecificWorkflowEmail"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflowEmail"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AutomationWorkflowEmail"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "update_workflow_email",
          "methodNameCamel" : "updateWorkflowEmail"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/automations/{workflowId}/emails/{workflowEmailId}/queue" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "List automated email subscribers",
        "description" : "Get information about a classic automation email queue.",
        "operationId" : "getAutomationsIdEmailsIdQueue",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2006"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2006"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_workflow_email_subscriber_queue",
          "methodNameCamel" : "getWorkflowEmailSubscriberQueue"
        }
      },
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Add subscriber to workflow email",
        "description" : "Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.",
        "operationId" : "postAutomationsIdEmailsIdQueue",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberInAutomationQueue"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberInAutomationQueue1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberInAutomationQueue1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_workflow_email_subscriber",
          "methodNameCamel" : "addWorkflowEmailSubscriber"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/automations/{workflowId}/emails/{workflowEmailId}/queue/{subscriberHash}" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "Get automated email subscriber",
        "description" : "Get information about a specific subscriber in a classic automation email queue.",
        "operationId" : "getAutomationsIdEmailsIdQueueId",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberInAutomationQueue1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberInAutomationQueue1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_workflow_email_subscriber",
          "methodNameCamel" : "getWorkflowEmailSubscriber"
        }
      }
    },
    "/automations/{workflowId}/emails/{workflowEmailId}/actions/pause" : {
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Pause automated email",
        "description" : "Pause an automated email.",
        "operationId" : "postAutomationsIdEmailsIdActionsPause",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "pause_workflow_email",
          "methodNameCamel" : "pauseWorkflowEmail"
        }
      }
    },
    "/automations/{workflowId}/emails/{workflowEmailId}/actions/start" : {
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Start automated email",
        "description" : "Start an automated email.",
        "operationId" : "postAutomationsIdEmailsIdActionsStart",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "workflowEmailId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow email",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "start_workflow_email",
          "methodNameCamel" : "startWorkflowEmail"
        }
      }
    },
    "/automations/{workflowId}/removed-subscribers" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "List subscribers removed from workflow",
        "description" : "Get information about subscribers who were removed from a classic automation workflow.",
        "operationId" : "getAutomationsIdRemovedSubscribers",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemovedSubscribers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemovedSubscribers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_workflow_email_subscribers_removed",
          "methodNameCamel" : "listWorkflowEmailSubscribersRemoved"
        }
      },
      "post" : {
        "tags" : [ "automations" ],
        "summary" : "Remove subscriber from workflow",
        "description" : "Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.",
        "operationId" : "postAutomationsIdRemovedSubscribers",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberInAutomationQueue"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberRemovedFromAutomationWorkflow"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberRemovedFromAutomationWorkflow"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove_workflow_email_subscriber",
          "methodNameCamel" : "removeWorkflowEmailSubscriber"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/automations/{workflowId}/removed-subscribers/{subscriberHash}" : {
      "get" : {
        "tags" : [ "automations" ],
        "summary" : "Get subscriber removed from workflow",
        "description" : "Get information about a specific subscriber who was removed from a classic automation workflow.",
        "operationId" : "getAutomationsIdRemovedSubscribersId",
        "parameters" : [ {
          "name" : "workflowId",
          "in" : "path",
          "description" : "The unique id for the Automation workflow",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberRemovedFromAutomationWorkflow"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberRemovedFromAutomationWorkflow"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_removed_workflow_email_subscriber",
          "methodNameCamel" : "getRemovedWorkflowEmailSubscriber"
        }
      }
    },
    "/batches" : {
      "get" : {
        "tags" : [ "batches" ],
        "summary" : "List batch requests",
        "description" : "Get a summary of batch requests that have been made.",
        "operationId" : "getBatches",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchOperations"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchOperations"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "batches" ],
        "summary" : "Start batch operation",
        "description" : "Begin processing a batch operations request.",
        "operationId" : "postBatches",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchesBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "start",
          "methodNameCamel" : "start"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/batches/{batchId}" : {
      "get" : {
        "tags" : [ "batches" ],
        "summary" : "Get batch operation status",
        "description" : "Get the status of a batch request.",
        "operationId" : "getBatchesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "batchId",
          "in" : "path",
          "description" : "The unique id for the batch operation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Batch"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "status",
          "methodNameCamel" : "status"
        }
      },
      "delete" : {
        "tags" : [ "batches" ],
        "summary" : "Delete batch request",
        "description" : "Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.",
        "operationId" : "deleteBatchesId",
        "parameters" : [ {
          "name" : "batchId",
          "in" : "path",
          "description" : "The unique id for the batch operation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_request",
          "methodNameCamel" : "deleteRequest"
        }
      }
    },
    "/batch-webhooks" : {
      "get" : {
        "tags" : [ "batchWebhooks" ],
        "summary" : "List batch webhooks",
        "description" : "Get all webhooks that have been configured for batches.",
        "operationId" : "getBatchWebhooks",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhooks"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhooks"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "batchWebhooks" ],
        "summary" : "Add batch webhook",
        "description" : "Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.",
        "operationId" : "postBatchWebhooks",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/batch-webhooks/{batchWebhookId}" : {
      "get" : {
        "tags" : [ "batchWebhooks" ],
        "summary" : "Get batch webhook info",
        "description" : "Get information about a specific batch webhook.",
        "operationId" : "getBatchWebhook",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "batchWebhookId",
          "in" : "path",
          "description" : "The unique id for the batch webhook",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      },
      "delete" : {
        "tags" : [ "batchWebhooks" ],
        "summary" : "Delete batch webhook",
        "description" : "Remove a batch webhook. Webhooks will no longer be sent to the given URL.",
        "operationId" : "deleteBatchWebhookId",
        "parameters" : [ {
          "name" : "batchWebhookId",
          "in" : "path",
          "description" : "The unique id for the batch webhook",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove",
          "methodNameCamel" : "remove"
        }
      },
      "patch" : {
        "tags" : [ "batchWebhooks" ],
        "summary" : "Update batch webhook",
        "description" : "Update a webhook that will fire whenever any batch request completes processing.",
        "operationId" : "patchBatchWebhooks",
        "parameters" : [ {
          "name" : "batchWebhookId",
          "in" : "path",
          "description" : "The unique id for the batch webhook",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchWebhook2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchWebhook1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update",
          "methodNameCamel" : "update"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/template-folders" : {
      "get" : {
        "tags" : [ "templateFolders" ],
        "summary" : "List template folders",
        "description" : "Get all folders used to organize templates.",
        "operationId" : "getTemplateFolders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolders"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolders"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "templateFolders" ],
        "summary" : "Add template folder",
        "description" : "Create a new template folder.",
        "operationId" : "postTemplateFolders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/template-folders/{folderId}" : {
      "get" : {
        "tags" : [ "templateFolders" ],
        "summary" : "Get template folder",
        "description" : "Get information about a specific folder used to organize templates.",
        "operationId" : "getTemplateFoldersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the template folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      },
      "delete" : {
        "tags" : [ "templateFolders" ],
        "summary" : "Delete template folder",
        "description" : "Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.",
        "operationId" : "deleteTemplateFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the template folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove",
          "methodNameCamel" : "remove"
        }
      },
      "patch" : {
        "tags" : [ "templateFolders" ],
        "summary" : "Update template folder",
        "description" : "Update a specific folder used to organize templates.",
        "operationId" : "patchTemplateFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the template folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update",
          "methodNameCamel" : "update"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaign-folders" : {
      "get" : {
        "tags" : [ "campaignFolders" ],
        "summary" : "List campaign folders",
        "description" : "Get all folders used to organize campaigns.",
        "operationId" : "getCampaignFolders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolders"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolders"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "campaignFolders" ],
        "summary" : "Add campaign folder",
        "description" : "Create a new campaign folder.",
        "operationId" : "postCampaignFolders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CampaignFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaign-folders/{folderId}" : {
      "get" : {
        "tags" : [ "campaignFolders" ],
        "summary" : "Get campaign folder",
        "description" : "Get information about a specific folder used to organize campaigns.",
        "operationId" : "getCampaignFoldersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the campaign folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      },
      "delete" : {
        "tags" : [ "campaignFolders" ],
        "summary" : "Delete campaign folder",
        "description" : "Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.",
        "operationId" : "deleteCampaignFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the campaign folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove",
          "methodNameCamel" : "remove"
        }
      },
      "patch" : {
        "tags" : [ "campaignFolders" ],
        "summary" : "Update campaign folder",
        "description" : "Update a specific folder used to organize campaigns.",
        "operationId" : "patchCampaignFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the campaign folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CampaignFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update",
          "methodNameCamel" : "update"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "List campaigns",
        "description" : "Get all campaigns in an account.",
        "operationId" : "getCampaigns",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The campaign type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ],
            "x-title" : "Campaign Type"
          },
          "x-title" : "Campaign Type"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the campaign",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "save", "paused", "schedule", "sending", "sent" ],
            "x-title" : "Status"
          },
          "x-title" : "Status"
        }, {
          "name" : "before_send_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Send Time"
          },
          "x-title" : "Before Send Time",
          "x-ballerina-name" : "beforeSendTime"
        }, {
          "name" : "since_send_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Send Time"
          },
          "x-title" : "Since Send Time",
          "x-ballerina-name" : "sinceSendTime"
        }, {
          "name" : "before_create_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Create Time"
          },
          "x-title" : "Before Create Time",
          "x-ballerina-name" : "beforeCreateTime"
        }, {
          "name" : "since_create_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Create Time"
          },
          "x-title" : "Since Create Time",
          "x-ballerina-name" : "sinceCreateTime"
        }, {
          "name" : "list_id",
          "in" : "query",
          "description" : "The unique id for the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID",
          "x-ballerina-name" : "listId"
        }, {
          "name" : "folder_id",
          "in" : "query",
          "description" : "The unique folder id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID",
          "x-ballerina-name" : "folderId"
        }, {
          "name" : "member_id",
          "in" : "query",
          "description" : "Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Member ID"
          },
          "x-title" : "Member ID",
          "x-ballerina-name" : "memberId"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "create_time", "send_time" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        }, {
          "name" : "include_resend_shortcut_eligibility",
          "in" : "query",
          "description" : "Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Resend Shortcut Eligibility"
          },
          "x-title" : "Include Resend Shortcut Eligibility",
          "x-ballerina-name" : "includeResendShortcutEligibility"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2007"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2007"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Add campaign",
        "description" : "Create a new Mailchimp campaign.",
        "operationId" : "postCampaigns",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Campaign"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get campaign info",
        "description" : "Get information about a specific campaign.",
        "operationId" : "getCampaignsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "include_resend_shortcut_eligibility",
          "in" : "query",
          "description" : "Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Resend Shortcut Eligibility"
          },
          "x-title" : "Include Resend Shortcut Eligibility",
          "x-ballerina-name" : "includeResendShortcutEligibility"
        }, {
          "name" : "include_resend_shortcut_usage",
          "in" : "query",
          "description" : "Return the `resend_shortcut_usage` field in the response.  This includes information about campaigns related by a shortcut",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Resend Shortcut Usage"
          },
          "x-title" : "Include Resend Shortcut Usage",
          "x-ballerina-name" : "includeResendShortcutUsage"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      },
      "delete" : {
        "tags" : [ "campaigns" ],
        "summary" : "Delete campaign",
        "description" : "Remove a campaign from your Mailchimp account.",
        "operationId" : "deleteCampaignsId",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove",
          "methodNameCamel" : "remove"
        }
      },
      "patch" : {
        "tags" : [ "campaigns" ],
        "summary" : "Update campaign settings",
        "description" : "Update some or all of the settings for a specific campaign.",
        "operationId" : "patchCampaignsId",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Campaign2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "update",
          "methodNameCamel" : "update"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/actions/cancel-send" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Cancel campaign",
        "description" : "Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.",
        "operationId" : "postCampaignsIdActionsCancelSend",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-pro-required" : true,
        "x-custom-config" : {
          "methodNameSnake" : "cancel_send",
          "methodNameCamel" : "cancelSend"
        }
      }
    },
    "/campaigns/{campaignId}/actions/replicate" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Replicate campaign",
        "description" : "Replicate a campaign in saved or send status.",
        "operationId" : "postCampaignsIdActionsReplicate",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "replicate",
          "methodNameCamel" : "replicate"
        }
      }
    },
    "/campaigns/{campaignId}/actions/send" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Send campaign",
        "description" : "Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.",
        "operationId" : "postCampaignsIdActionsSend",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "send",
          "methodNameCamel" : "send"
        }
      }
    },
    "/campaigns/{campaignId}/actions/schedule" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Schedule campaign",
        "description" : "Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.",
        "operationId" : "postCampaignsIdActionsSchedule",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActionsScheduleBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "schedule",
          "methodNameCamel" : "schedule"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/actions/unschedule" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Unschedule campaign",
        "description" : "Unschedule a scheduled campaign that hasn't started sending.",
        "operationId" : "postCampaignsIdActionsUnschedule",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "unschedule",
          "methodNameCamel" : "unschedule"
        }
      }
    },
    "/campaigns/{campaignId}/actions/test" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Send test email",
        "description" : "Send a test email.",
        "operationId" : "postCampaignsIdActionsTest",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActionsTestBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "send_test_email",
          "methodNameCamel" : "sendTestEmail"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/actions/pause" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Pause rss campaign",
        "description" : "Pause an RSS-Driven campaign.",
        "operationId" : "postCampaignsIdActionsPause",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "pause",
          "methodNameCamel" : "pause"
        }
      }
    },
    "/campaigns/{campaignId}/actions/resume" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Resume rss campaign",
        "description" : "Resume an RSS-Driven campaign.",
        "operationId" : "postCampaignsIdActionsResume",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "resume",
          "methodNameCamel" : "resume"
        }
      }
    },
    "/campaigns/{campaignId}/actions/create-resend" : {
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Resend campaign",
        "description" : "Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn't open the campaign, or any new subscribers since it was sent.",
        "operationId" : "postCampaignsIdActionsCreateResend",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ActionsCreateResendBody"
              }
            }
          },
          "required" : false
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-pro-required" : true,
        "x-custom-config" : {
          "methodNameSnake" : "create_resend",
          "methodNameCamel" : "createResend"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/content" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get campaign content",
        "description" : "Get the the HTML and plain-text content for a campaign.",
        "operationId" : "getCampaignsIdContent",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignContent"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignContent"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_content",
          "methodNameCamel" : "getContent"
        }
      },
      "put" : {
        "tags" : [ "campaigns" ],
        "summary" : "Set campaign content",
        "description" : "Set the content for a campaign.",
        "operationId" : "putCampaignsIdContent",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CampaignContent1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignContent"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignContent"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "set_content",
          "methodNameCamel" : "setContent"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/feedback" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "List campaign feedback",
        "description" : "Get team feedback while you're working together on a Mailchimp campaign.",
        "operationId" : "getCampaignsIdFeedback",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReports"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReports"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_feedback",
          "methodNameCamel" : "getFeedback"
        }
      },
      "post" : {
        "tags" : [ "campaigns" ],
        "summary" : "Add campaign feedback",
        "description" : "Add feedback on a specific campaign.",
        "operationId" : "postCampaignsIdFeedback",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CampaignFeedback"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_feedback",
          "methodNameCamel" : "addFeedback"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/feedback/{feedbackId}" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get campaign feedback message",
        "description" : "Get a specific feedback message from a campaign.",
        "operationId" : "getCampaignsIdFeedbackId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "feedbackId",
          "in" : "path",
          "description" : "The unique id for the feedback message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Feedback ID"
          },
          "x-title" : "Feedback ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_feedback_message",
          "methodNameCamel" : "getFeedbackMessage"
        }
      },
      "delete" : {
        "tags" : [ "campaigns" ],
        "summary" : "Delete campaign feedback message",
        "description" : "Remove a specific feedback message for a campaign.",
        "operationId" : "deleteCampaignsIdFeedbackId",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "feedbackId",
          "in" : "path",
          "description" : "The unique id for the feedback message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Feedback ID"
          },
          "x-title" : "Feedback ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_feedback_message",
          "methodNameCamel" : "deleteFeedbackMessage"
        }
      },
      "patch" : {
        "tags" : [ "campaigns" ],
        "summary" : "Update campaign feedback message",
        "description" : "Update a specific feedback message for a campaign.",
        "operationId" : "patchCampaignsIdFeedbackId",
        "parameters" : [ {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "feedbackId",
          "in" : "path",
          "description" : "The unique id for the feedback message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Feedback ID"
          },
          "x-title" : "Feedback ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CampaignFeedback2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignFeedback1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_feedback_message",
          "methodNameCamel" : "updateFeedbackMessage"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/campaigns/{campaignId}/send-checklist" : {
      "get" : {
        "tags" : [ "campaigns" ],
        "summary" : "Get campaign send checklist",
        "description" : "Review the send checklist for a campaign, and resolve any issues before sending.",
        "operationId" : "getCampaignsIdSendChecklist",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendChecklist"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SendChecklist"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_send_checklist",
          "methodNameCamel" : "getSendChecklist"
        }
      }
    },
    "/connected-sites" : {
      "get" : {
        "tags" : [ "connectedSites" ],
        "summary" : "List connected sites",
        "description" : "Get all connected sites in an account.",
        "operationId" : "getConnectedSites",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSites"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSites"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "connectedSites" ],
        "summary" : "Add connected site",
        "description" : "Create a new Mailchimp connected site.",
        "operationId" : "postConnectedSites",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConnectedSite"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSite1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSite1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/connected-sites/{connectedSiteId}" : {
      "get" : {
        "tags" : [ "connectedSites" ],
        "summary" : "Get connected site",
        "description" : "Get information about a specific connected site.",
        "operationId" : "getConnectedSitesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "connectedSiteId",
          "in" : "path",
          "description" : "The unique identifier for the site",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Connected Site Foreign ID"
          },
          "x-title" : "Connected Site Foreign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSite1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectedSite1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      },
      "delete" : {
        "tags" : [ "connectedSites" ],
        "summary" : "Delete connected site",
        "description" : "Remove a connected site from your Mailchimp account.",
        "operationId" : "deleteConnectedSitesId",
        "parameters" : [ {
          "name" : "connectedSiteId",
          "in" : "path",
          "description" : "The unique identifier for the site",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Connected Site Foreign ID"
          },
          "x-title" : "Connected Site Foreign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove",
          "methodNameCamel" : "remove"
        }
      }
    },
    "/connected-sites/{connectedSiteId}/actions/verify-script-installation" : {
      "post" : {
        "tags" : [ "connectedSites" ],
        "summary" : "Verify connected site script",
        "description" : "Verify that the connected sites script has been installed, either via the script URL or fragment.",
        "operationId" : "postConnectedSitesIdActionsVerifyScriptInstallation",
        "parameters" : [ {
          "name" : "connectedSiteId",
          "in" : "path",
          "description" : "The unique identifier for the site",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Connected Site Foreign ID"
          },
          "x-title" : "Connected Site Foreign ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-pro-required" : true,
        "x-custom-config" : {
          "methodNameSnake" : "verify_script_installation",
          "methodNameCamel" : "verifyScriptInstallation"
        }
      }
    },
    "/conversations" : {
      "get" : {
        "tags" : [ "conversations" ],
        "summary" : "List conversations",
        "description" : "Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.",
        "operationId" : "getConversations",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "has_unread_messages",
          "in" : "query",
          "description" : "Whether the conversation has any unread messages",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "true", "false" ],
            "x-title" : "Has Unread Messages"
          },
          "x-title" : "Has Unread Messages",
          "x-ballerina-name" : "hasUnreadMessages"
        }, {
          "name" : "list_id",
          "in" : "query",
          "description" : "The unique id for the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID",
          "x-ballerina-name" : "listId"
        }, {
          "name" : "campaign_id",
          "in" : "query",
          "description" : "The unique id for the campaign",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID",
          "x-ballerina-name" : "campaignId"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TrackedConversations"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TrackedConversations"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      }
    },
    "/conversations/{conversationId}" : {
      "get" : {
        "tags" : [ "conversations" ],
        "summary" : "Get conversation",
        "description" : "Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.",
        "operationId" : "getConversationsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "conversationId",
          "in" : "path",
          "description" : "The unique id for the conversation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Conversation ID"
          },
          "x-title" : "Conversation ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Conversation"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Conversation"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      }
    },
    "/conversations/{conversationId}/messages" : {
      "get" : {
        "tags" : [ "conversations" ],
        "summary" : "List messages",
        "description" : "Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.",
        "operationId" : "getConversationsIdMessages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "conversationId",
          "in" : "path",
          "description" : "The unique id for the conversation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Conversation ID"
          },
          "x-title" : "Conversation ID"
        }, {
          "name" : "is_read",
          "in" : "query",
          "description" : "Whether a conversation message has been marked as read",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "true", "false" ],
            "x-title" : "Is Read"
          },
          "x-title" : "Is Read",
          "x-ballerina-name" : "isRead"
        }, {
          "name" : "before_timestamp",
          "in" : "query",
          "description" : "Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Timestamp"
          },
          "x-title" : "Before Timestamp",
          "x-ballerina-name" : "beforeTimestamp"
        }, {
          "name" : "since_timestamp",
          "in" : "query",
          "description" : "Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Timestamp"
          },
          "x-title" : "Since Timestamp",
          "x-ballerina-name" : "sinceTimestamp"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfConversationMessages"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfConversationMessages"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "x-custom-config" : {
          "methodNameSnake" : "get_conversation_messages",
          "methodNameCamel" : "getConversationMessages"
        }
      }
    },
    "/conversations/{conversationId}/messages/{messageId}" : {
      "get" : {
        "tags" : [ "conversations" ],
        "summary" : "Get message",
        "description" : "Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.",
        "operationId" : "getConversationsIdMessagesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "conversationId",
          "in" : "path",
          "description" : "The unique id for the conversation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Conversation ID"
          },
          "x-title" : "Conversation ID"
        }, {
          "name" : "messageId",
          "in" : "path",
          "description" : "The unique id for the conversation message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Message ID"
          },
          "x-title" : "Message ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationMessage"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationMessage"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : true,
        "x-custom-config" : {
          "methodNameSnake" : "get_conversation_message",
          "methodNameCamel" : "getConversationMessage"
        }
      }
    },
    "/customer-journeys/journeys/{journeyId}/steps/{stepId}/actions/trigger" : {
      "post" : {
        "tags" : [ "customerJourneys" ],
        "summary" : "Customer Journeys API trigger for a contact",
        "description" : "A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.",
        "operationId" : "postCustomerJourneysJourneysIdStepsIdActionsTrigger",
        "parameters" : [ {
          "name" : "journeyId",
          "in" : "path",
          "description" : "The id for the Journey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "x-title" : "Journey ID"
          },
          "x-title" : "Journey ID"
        }, {
          "name" : "stepId",
          "in" : "path",
          "description" : "The id for the Step",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "x-title" : "Step ID"
          },
          "x-title" : "Step ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberInCustomerJourneysAudience"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "An empty response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Empty Response"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Empty Response"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "trigger",
          "methodNameCamel" : "trigger"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/file-manager/files" : {
      "get" : {
        "tags" : [ "fileManager" ],
        "summary" : "List stored files",
        "description" : "Get a list of available images and files stored in the File Manager for the account.",
        "operationId" : "getFileManagerFiles",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The file type for the File Manager file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "File Type"
          },
          "x-title" : "File Type"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "The Mailchimp account user who created the File Manager file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Created By"
          },
          "x-title" : "Created By",
          "x-ballerina-name" : "createdBy"
        }, {
          "name" : "before_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Created At"
          },
          "x-title" : "Before Created At",
          "x-ballerina-name" : "beforeCreatedAt"
        }, {
          "name" : "since_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Created At"
          },
          "x-title" : "Since Created At",
          "x-ballerina-name" : "sinceCreatedAt"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "added_date", "name", "size" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManager"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManager"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "files",
          "methodNameCamel" : "files"
        }
      },
      "post" : {
        "tags" : [ "fileManager" ],
        "summary" : "Add file",
        "description" : "Upload a new image or file to the File Manager.",
        "operationId" : "postFileManagerFiles",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GalleryFile"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "upload",
          "methodNameCamel" : "upload"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/file-manager/files/{fileId}" : {
      "get" : {
        "tags" : [ "fileManager" ],
        "summary" : "Get file",
        "description" : "Get information about a specific file in the File Manager.",
        "operationId" : "getFileManagerFilesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "fileId",
          "in" : "path",
          "description" : "The unique id for the File Manager file",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "File ID"
          },
          "x-title" : "File ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_file",
          "methodNameCamel" : "getFile"
        }
      },
      "delete" : {
        "tags" : [ "fileManager" ],
        "summary" : "Delete file",
        "description" : "Remove a specific file from the File Manager.",
        "operationId" : "deleteFileManagerFilesId",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "The unique id for the File Manager file",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "File ID"
          },
          "x-title" : "File ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_file",
          "methodNameCamel" : "deleteFile"
        }
      },
      "patch" : {
        "tags" : [ "fileManager" ],
        "summary" : "Update file",
        "description" : "Update a file in the File Manager.",
        "operationId" : "patchFileManagerFilesId",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "The unique id for the File Manager file",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "File ID"
          },
          "x-title" : "File ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GalleryFile2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFile1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_file",
          "methodNameCamel" : "updateFile"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/file-manager/folders" : {
      "get" : {
        "tags" : [ "fileManager" ],
        "summary" : "List folders",
        "description" : "Get a list of all folders in the File Manager.",
        "operationId" : "getFileManagerFolders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "The Mailchimp account user who created the File Manager file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Created By"
          },
          "x-title" : "Created By",
          "x-ballerina-name" : "createdBy"
        }, {
          "name" : "before_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Created At"
          },
          "x-title" : "Before Created At",
          "x-ballerina-name" : "beforeCreatedAt"
        }, {
          "name" : "since_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Created At"
          },
          "x-title" : "Since Created At",
          "x-ballerina-name" : "sinceCreatedAt"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManagerFolders"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManagerFolders"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_folders",
          "methodNameCamel" : "listFolders"
        }
      },
      "post" : {
        "tags" : [ "fileManager" ],
        "summary" : "Add folder",
        "description" : "Create a new folder in the File Manager.",
        "operationId" : "postFileManagerFolders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GalleryFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_folder",
          "methodNameCamel" : "createFolder"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/file-manager/folders/{folderId}" : {
      "get" : {
        "tags" : [ "fileManager" ],
        "summary" : "Get folder",
        "description" : "Get information about a specific folder in the File Manager.",
        "operationId" : "getFileManagerFoldersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the File Manager folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_folder",
          "methodNameCamel" : "getFolder"
        }
      },
      "delete" : {
        "tags" : [ "fileManager" ],
        "summary" : "Delete folder",
        "description" : "Delete a specific folder in the File Manager.",
        "operationId" : "deleteFileManagerFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the File Manager folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_folder",
          "methodNameCamel" : "deleteFolder"
        }
      },
      "patch" : {
        "tags" : [ "fileManager" ],
        "summary" : "Update folder",
        "description" : "Update a specific File Manager folder.",
        "operationId" : "patchFileManagerFoldersId",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the File Manager folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GalleryFolder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GalleryFolder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_folder",
          "methodNameCamel" : "updateFolder"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/file-manager/folders/{folderId}/files" : {
      "get" : {
        "tags" : [ "fileManager" ],
        "summary" : "List stored files",
        "description" : "Get a list of available images and files stored in this folder.",
        "operationId" : "getFileManagerFoldersFiles",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "The unique id for the File Manager folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The file type for the File Manager file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "File Type"
          },
          "x-title" : "File Type"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "The Mailchimp account user who created the File Manager file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Created By"
          },
          "x-title" : "Created By",
          "x-ballerina-name" : "createdBy"
        }, {
          "name" : "before_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Created At"
          },
          "x-title" : "Before Created At",
          "x-ballerina-name" : "beforeCreatedAt"
        }, {
          "name" : "since_created_at",
          "in" : "query",
          "description" : "Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Created At"
          },
          "x-title" : "Since Created At",
          "x-ballerina-name" : "sinceCreatedAt"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "added_date", "name", "size" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManager"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileManager"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "folders_files",
          "methodNameCamel" : "foldersFiles"
        }
      }
    },
    "/lists" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get lists info",
        "description" : "Get information about all lists in the account.",
        "operationId" : "getLists",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "before_date_created",
          "in" : "query",
          "description" : "Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Date Created"
          },
          "x-title" : "Before Date Created",
          "x-ballerina-name" : "beforeDateCreated"
        }, {
          "name" : "since_date_created",
          "in" : "query",
          "description" : "Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Date Created"
          },
          "x-title" : "Since Date Created",
          "x-ballerina-name" : "sinceDateCreated"
        }, {
          "name" : "before_campaign_last_sent",
          "in" : "query",
          "description" : "Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Campaign Last Sent"
          },
          "x-title" : "Before Campaign Last Sent",
          "x-ballerina-name" : "beforeCampaignLastSent"
        }, {
          "name" : "since_campaign_last_sent",
          "in" : "query",
          "description" : "Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Campaign Last Sent"
          },
          "x-title" : "Since Campaign Last Sent",
          "x-ballerina-name" : "sinceCampaignLastSent"
        }, {
          "name" : "email",
          "in" : "query",
          "description" : "Restrict results to lists that include a specific subscriber's email address",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Email"
          },
          "x-title" : "Subscriber Email"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "date_created" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        }, {
          "name" : "has_ecommerce_store",
          "in" : "query",
          "description" : "Restrict results to lists that contain an active, connected, undeleted ecommerce store",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Has Ecommerce Store"
          },
          "x-title" : "Has Ecommerce Store",
          "x-ballerina-name" : "hasEcommerceStore"
        }, {
          "name" : "include_total_contacts",
          "in" : "query",
          "description" : "Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Total Contacts"
          },
          "x-title" : "Include Total Contacts",
          "x-ballerina-name" : "includeTotalContacts"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberLists"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberLists"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_lists",
          "methodNameCamel" : "getAllLists"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add list",
        "description" : "Create a new list in your Mailchimp account.",
        "operationId" : "postLists",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberList"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_list",
          "methodNameCamel" : "createList"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get list info",
        "description" : "Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.",
        "operationId" : "getListsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "include_total_contacts",
          "in" : "query",
          "description" : "Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Total Contacts"
          },
          "x-title" : "Include Total Contacts",
          "x-ballerina-name" : "includeTotalContacts"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list",
          "methodNameCamel" : "getList"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Batch subscribe or unsubscribe",
        "description" : "Batch subscribe or unsubscribe list members.",
        "operationId" : "postListsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "skip_merge_validation",
          "in" : "query",
          "description" : "If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Skip Merge Validation"
          },
          "x-title" : "Skip Merge Validation",
          "x-ballerina-name" : "skipMergeValidation"
        }, {
          "name" : "skip_duplicate_check",
          "in" : "query",
          "description" : "If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Skip Duplicate Check"
          },
          "x-title" : "Skip Duplicate Check",
          "x-ballerina-name" : "skipDuplicateCheck"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MembersToSubscribeUnsubscribeTofromAListInBatch"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchUpdateListMembers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchUpdateListMembers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "batch_list_members",
          "methodNameCamel" : "batchListMembers"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete list",
        "description" : "Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.",
        "operationId" : "deleteListsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list",
          "methodNameCamel" : "deleteList"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update lists",
        "description" : "Update the settings for a specific list.",
        "operationId" : "patchListsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubscriberList2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubscriberList1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list",
          "methodNameCamel" : "updateList"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/abuse-reports" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List abuse reports",
        "description" : "Get all abuse reports for a specific list.",
        "operationId" : "getListsIdAbuseReports",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaints"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaints"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_abuse_reports",
          "methodNameCamel" : "getListAbuseReports"
        }
      }
    },
    "/lists/{listId}/abuse-reports/{reportId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get abuse report",
        "description" : "Get details about a specific abuse report.",
        "operationId" : "getListsIdAbuseReportsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "reportId",
          "in" : "path",
          "description" : "The id for the abuse report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaint"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaint"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_abuse_report_details",
          "methodNameCamel" : "getListAbuseReportDetails"
        }
      }
    },
    "/lists/{listId}/activity" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List recent activity",
        "description" : "Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.",
        "operationId" : "getListsIdActivity",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListActivity"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListActivity"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_recent_activity",
          "methodNameCamel" : "getListRecentActivity"
        }
      }
    },
    "/lists/{listId}/clients" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List top email clients",
        "description" : "Get a list of the top email clients based on user-agent strings.",
        "operationId" : "getListsIdClients",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClients"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClients"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_clients",
          "methodNameCamel" : "getListClients"
        }
      }
    },
    "/lists/{listId}/growth-history" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List growth history data",
        "description" : "Get a month-by-month summary of a specific list's growth activity.",
        "operationId" : "getListsIdGrowthHistory",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "month" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrowthHistory"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrowthHistory"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_growth_history",
          "methodNameCamel" : "getListGrowthHistory"
        }
      }
    },
    "/lists/{listId}/growth-history/{month}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get growth history by month",
        "description" : "Get a summary of a specific list's growth activity for a specific month and year.",
        "operationId" : "getListsIdGrowthHistoryId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "month",
          "in" : "path",
          "description" : "A specific month of list growth history",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrowthHistory1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrowthHistory1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_growth_history_by_month",
          "methodNameCamel" : "getListGrowthHistoryByMonth"
        }
      }
    },
    "/lists/{listId}/interest-categories" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List interest categories",
        "description" : "Get information about a list's interest categories.",
        "operationId" : "getListsIdInterestCategories",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Restrict results a type of interest group",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Group Type"
          },
          "x-title" : "Interest Group Type"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestGroupings"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestGroupings"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_interest_categories",
          "methodNameCamel" : "getListInterestCategories"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add interest category",
        "description" : "Create a new interest category.",
        "operationId" : "postListsIdInterestCategories",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InterestCategory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_list_interest_category",
          "methodNameCamel" : "createListInterestCategory"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/interest-categories/{interestCategoryId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get interest category info",
        "description" : "Get information about a specific interest category.",
        "operationId" : "getListsIdInterestCategoriesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_interest_category",
          "methodNameCamel" : "getInterestCategory"
        }
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete interest category",
        "description" : "Delete a specific interest category.",
        "operationId" : "deleteListsIdInterestCategoriesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_interest_category",
          "methodNameCamel" : "deleteInterestCategory"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update interest category",
        "description" : "Update a specific interest category.",
        "operationId" : "patchListsIdInterestCategoriesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InterestCategory"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InterestCategory1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_interest_category",
          "methodNameCamel" : "updateInterestCategory"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/interest-categories/{interestCategoryId}/interests" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List interests in category",
        "description" : "Get a list of this category's interests.",
        "operationId" : "getListsIdInterestCategoriesIdInterests",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interests"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interests"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_interest_category_interests",
          "methodNameCamel" : "listInterestCategoryInterests"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add interest in category",
        "description" : "Create a new interest or 'group name' for a specific category.",
        "operationId" : "postListsIdInterestCategoriesIdInterests",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Interest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_interest_category_interest",
          "methodNameCamel" : "createInterestCategoryInterest"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/interest-categories/{interestCategoryId}/interests/{interestId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get interest in category",
        "description" : "Get interests or 'group names' for a specific category.",
        "operationId" : "getListsIdInterestCategoriesIdInterestsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        }, {
          "name" : "interestId",
          "in" : "path",
          "description" : "The specific interest or 'group name'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest ID"
          },
          "x-title" : "Interest ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_interest_category_interest",
          "methodNameCamel" : "getInterestCategoryInterest"
        }
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete interest in category",
        "description" : "Delete interests or group names in a specific category.",
        "operationId" : "deleteListsIdInterestCategoriesIdInterestsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        }, {
          "name" : "interestId",
          "in" : "path",
          "description" : "The specific interest or 'group name'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest ID"
          },
          "x-title" : "Interest ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_interest_category_interest",
          "methodNameCamel" : "deleteInterestCategoryInterest"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update interest in category",
        "description" : "Update interests or 'group names' for a specific category.",
        "operationId" : "patchListsIdInterestCategoriesIdInterestsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "interestCategoryId",
          "in" : "path",
          "description" : "The unique ID for the interest category",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID"
        }, {
          "name" : "interestId",
          "in" : "path",
          "description" : "The specific interest or 'group name'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest ID"
          },
          "x-title" : "Interest ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Interest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Interest1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_interest_category_interest",
          "methodNameCamel" : "updateInterestCategoryInterest"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/segments" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List segments",
        "description" : "Get information about all available segments for a specific list.",
        "operationId" : "previewASegment",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Limit results based on segment type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment Type"
          },
          "x-title" : "Segment Type"
        }, {
          "name" : "since_created_at",
          "in" : "query",
          "description" : "Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Created At"
          },
          "x-title" : "Since Created At",
          "x-ballerina-name" : "sinceCreatedAt"
        }, {
          "name" : "before_created_at",
          "in" : "query",
          "description" : "Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Created At"
          },
          "x-title" : "Before Created At",
          "x-ballerina-name" : "beforeCreatedAt"
        }, {
          "name" : "include_cleaned",
          "in" : "query",
          "description" : "Include cleaned members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Cleaned"
          },
          "example" : false,
          "x-title" : "Include Cleaned",
          "x-ballerina-name" : "includeCleaned"
        }, {
          "name" : "include_transactional",
          "in" : "query",
          "description" : "Include transactional members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Transactional"
          },
          "example" : false,
          "x-title" : "Include Transactional",
          "x-ballerina-name" : "includeTransactional"
        }, {
          "name" : "include_unsubscribed",
          "in" : "query",
          "description" : "Include unsubscribed members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Unsubscribed"
          },
          "example" : false,
          "x-title" : "Include Unsubscribed",
          "x-ballerina-name" : "includeUnsubscribed"
        }, {
          "name" : "since_updated_at",
          "in" : "query",
          "description" : "Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Updated At"
          },
          "x-title" : "Since Updated At",
          "x-ballerina-name" : "sinceUpdatedAt"
        }, {
          "name" : "before_updated_at",
          "in" : "query",
          "description" : "Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Updated At"
          },
          "x-title" : "Before Updated At",
          "x-ballerina-name" : "beforeUpdatedAt"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfSegments"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfSegments"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_segments",
          "methodNameCamel" : "listSegments"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add segment",
        "description" : "Create a new segment in a specific list.",
        "operationId" : "postListsIdSegments",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/List3"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_segment",
          "methodNameCamel" : "createSegment"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/segments/{segmentId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get segment info",
        "description" : "Get information about a specific segment.",
        "operationId" : "getListsIdSegmentsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        }, {
          "name" : "include_cleaned",
          "in" : "query",
          "description" : "Include cleaned members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Cleaned"
          },
          "example" : false,
          "x-title" : "Include Cleaned",
          "x-ballerina-name" : "includeCleaned"
        }, {
          "name" : "include_transactional",
          "in" : "query",
          "description" : "Include transactional members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Transactional"
          },
          "example" : false,
          "x-title" : "Include Transactional",
          "x-ballerina-name" : "includeTransactional"
        }, {
          "name" : "include_unsubscribed",
          "in" : "query",
          "description" : "Include unsubscribed members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Unsubscribed"
          },
          "example" : false,
          "x-title" : "Include Unsubscribed",
          "x-ballerina-name" : "includeUnsubscribed"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_segment",
          "methodNameCamel" : "getSegment"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Batch add or remove members",
        "description" : "Batch add/remove list members to static segment",
        "operationId" : "postListsIdSegmentsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MembersToAddremoveTofromAStaticSegment"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchAddremoveListMembersTofromStaticSegment"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchAddremoveListMembersTofromStaticSegment"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "batch_segment_members",
          "methodNameCamel" : "batchSegmentMembers"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete segment",
        "description" : "Delete a specific segment in a list.",
        "operationId" : "deleteListsIdSegmentsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_segment",
          "methodNameCamel" : "deleteSegment"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update segment",
        "description" : "Update a specific segment in a list.",
        "operationId" : "patchListsIdSegmentsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/List5"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/List4"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_segment",
          "methodNameCamel" : "updateSegment"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/segments/{segmentId}/members" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List members in segment",
        "description" : "Get information about members in a saved segment.",
        "operationId" : "getListsIdSegmentsIdMembers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        }, {
          "name" : "include_cleaned",
          "in" : "query",
          "description" : "Include cleaned members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Cleaned"
          },
          "example" : false,
          "x-title" : "Include Cleaned",
          "x-ballerina-name" : "includeCleaned"
        }, {
          "name" : "include_transactional",
          "in" : "query",
          "description" : "Include transactional members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Transactional"
          },
          "example" : false,
          "x-title" : "Include Transactional",
          "x-ballerina-name" : "includeTransactional"
        }, {
          "name" : "include_unsubscribed",
          "in" : "query",
          "description" : "Include unsubscribed members in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Include Unsubscribed"
          },
          "example" : false,
          "x-title" : "Include Unsubscribed",
          "x-ballerina-name" : "includeUnsubscribed"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SegmentMembers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SegmentMembers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_segment_members_list",
          "methodNameCamel" : "getSegmentMembersList"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add member to segment",
        "description" : "Add a member to a static segment.",
        "operationId" : "postListsIdSegmentsIdMembers",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SegmentIdMembersBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_segment_member",
          "methodNameCamel" : "createSegmentMember"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/segments/{segmentId}/members/{subscriberHash}" : {
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Remove list member from segment",
        "description" : "Remove a member from the specified static segment.",
        "operationId" : "deleteListsIdSegmentsIdMembersId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "segmentId",
          "in" : "path",
          "description" : "The unique id for the segment",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Segment ID"
          },
          "x-title" : "Segment ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "remove_segment_member",
          "methodNameCamel" : "removeSegmentMember"
        }
      }
    },
    "/lists/{listId}/tag-search" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Search for tags on a list by name.",
        "description" : "Search for tags on a list by name. If no name is provided, will return all tags on the list.",
        "operationId" : "searchTagsByName",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Name"
          },
          "x-title" : "Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagSearchResults"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagSearchResults"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "tag_search",
          "methodNameCamel" : "tagSearch"
        }
      }
    },
    "/lists/{listId}/members" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List members info",
        "description" : "Get information about members in a specific Mailchimp list.",
        "operationId" : "getListsIdMembers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "email_type",
          "in" : "query",
          "description" : "The email type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Email Type"
          },
          "x-title" : "Email Type",
          "x-ballerina-name" : "emailType"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The subscriber's status",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional", "archived" ],
            "x-title" : "Subscriber Status"
          },
          "x-title" : "Subscriber Status"
        }, {
          "name" : "since_timestamp_opt",
          "in" : "query",
          "description" : "Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Timestamp Opt"
          },
          "x-title" : "Since Timestamp Opt",
          "x-ballerina-name" : "sinceTimestampOpt"
        }, {
          "name" : "before_timestamp_opt",
          "in" : "query",
          "description" : "Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Timestamp Opt"
          },
          "x-title" : "Before Timestamp Opt",
          "x-ballerina-name" : "beforeTimestampOpt"
        }, {
          "name" : "since_last_changed",
          "in" : "query",
          "description" : "Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Last Changed"
          },
          "x-title" : "Since Last Changed",
          "x-ballerina-name" : "sinceLastChanged"
        }, {
          "name" : "before_last_changed",
          "in" : "query",
          "description" : "Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Last Changed"
          },
          "x-title" : "Before Last Changed",
          "x-ballerina-name" : "beforeLastChanged"
        }, {
          "name" : "unique_email_id",
          "in" : "query",
          "description" : "A unique identifier for the email address across all Mailchimp lists",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Unique Email ID"
          },
          "x-title" : "Unique Email ID",
          "x-ballerina-name" : "uniqueEmailId"
        }, {
          "name" : "vip_only",
          "in" : "query",
          "description" : "A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "VIP Only"
          },
          "x-title" : "VIP Only",
          "x-ballerina-name" : "vipOnly"
        }, {
          "name" : "interest_category_id",
          "in" : "query",
          "description" : "The unique id for the interest category",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Category ID"
          },
          "x-title" : "Interest Category ID",
          "x-ballerina-name" : "interestCategoryId"
        }, {
          "name" : "interest_ids",
          "in" : "query",
          "description" : "Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Interest Ids"
          },
          "x-title" : "Interest Ids",
          "x-ballerina-name" : "interestIds"
        }, {
          "name" : "interest_match",
          "in" : "query",
          "description" : "Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \"any\" will match a member with any of the interest supplied, \"all\" will only match members with every interest supplied, and \"none\" will match members without any of the interest supplied",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "any", "all", "none" ],
            "x-title" : "Interest Match"
          },
          "x-title" : "Interest Match",
          "x-ballerina-name" : "interestMatch"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "timestamp_opt", "timestamp_signup", "last_changed" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        }, {
          "name" : "since_last_campaign",
          "in" : "query",
          "description" : "Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Since Last Campaign"
          },
          "x-title" : "Since Last Campaign",
          "x-ballerina-name" : "sinceLastCampaign"
        }, {
          "name" : "unsubscribed_since",
          "in" : "query",
          "description" : "Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Unsubscribed Since"
          },
          "x-title" : "Unsubscribed Since",
          "x-ballerina-name" : "unsubscribedSince"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_members_info",
          "methodNameCamel" : "getListMembersInfo"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add member to list",
        "description" : "Add a new member to the list.",
        "operationId" : "postListsIdMembers",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "skip_merge_validation",
          "in" : "query",
          "description" : "If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Skip Merge Validation"
          },
          "x-title" : "Skip Merge Validation",
          "x-ballerina-name" : "skipMergeValidation"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddListMembers1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_list_member",
          "methodNameCamel" : "addListMember"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get member info",
        "description" : "Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.",
        "operationId" : "getListsIdMembersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member",
          "methodNameCamel" : "getListMember"
        }
      },
      "put" : {
        "tags" : [ "lists" ],
        "summary" : "Add or update list member",
        "description" : "Add or update a list member.",
        "operationId" : "putListsIdMembersId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "skip_merge_validation",
          "in" : "query",
          "description" : "If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Skip Merge Validation"
          },
          "x-title" : "Skip Merge Validation",
          "x-ballerina-name" : "skipMergeValidation"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddListMembers2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "set_list_member",
          "methodNameCamel" : "setListMember"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Archive list member",
        "description" : "Archive a list member. To permanently delete, use the delete-permanent action.",
        "operationId" : "deleteListsIdMembersId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list_member",
          "methodNameCamel" : "deleteListMember"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update list member",
        "description" : "Update information for a specific list member.",
        "operationId" : "patchListsIdMembersId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "skip_merge_validation",
          "in" : "query",
          "description" : "If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Skip Merge Validation"
          },
          "x-title" : "Skip Merge Validation",
          "x-ballerina-name" : "skipMergeValidation"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddListMembers3"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListMembers2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_member",
          "methodNameCamel" : "updateListMember"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}/activity" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "View recent activity 50",
        "description" : "Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.",
        "operationId" : "getListsIdMembersIdActivity",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "A comma seperated list of actions to return",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "abuse", "bounce", "click", "open", "sent", "unsub", "ecomm" ]
            },
            "x-title" : "Action"
          },
          "x-title" : "Action"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberActivityEvents"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberActivityEvents"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_activity",
          "methodNameCamel" : "getListMemberActivity"
        }
      }
    },
    "/lists/{listId}/members/{subscriberHash}/activity-feed" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "View recent activity",
        "description" : "Get a member's activity on a specific list, including opens, clicks, and unsubscribes.",
        "operationId" : "getListsIdMembersIdActivityFeed",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "activity_filters",
          "in" : "query",
          "description" : "A comma-separated list of activity filters that correspond to a set of activity types, e.g \"?activity_filters=open,bounce,click\"",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "bounce", "click", "conversation", "ecommerce_signup", "event", "web_engagement", "generic_signup", "landing_page_signup", "marketing_permission", "note", "open", "order", "postcard_sent", "sent", "signup", "squatter_signup", "unsub", "website_signup", "survey_response", "sms_bulk_sent", "inbox_thread", "qbo_payment_link", "video_call_transcripts" ]
            },
            "x-title" : "Activity Filters"
          },
          "x-title" : "Activity Filters",
          "x-ballerina-name" : "activityFilters"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberActivityEvents1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberActivityEvents1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_activity_feed",
          "methodNameCamel" : "getListMemberActivityFeed"
        }
      }
    },
    "/lists/{listId}/members/{subscriberHash}/tags" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List member tags",
        "description" : "Get the tags on a list member.",
        "operationId" : "getListMemberTags",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfTags"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfTags"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_tags",
          "methodNameCamel" : "getListMemberTags"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add or remove member tags",
        "description" : "Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.",
        "operationId" : "postListMemberTags",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberTags"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_member_tags",
          "methodNameCamel" : "updateListMemberTags"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}/events" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List member events",
        "description" : "Get events for a contact.",
        "operationId" : "getListsIdMembersIdEvents",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfEvents"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfEvents"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_events",
          "methodNameCamel" : "getListMemberEvents"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add event",
        "description" : "Add an event for a list member.",
        "operationId" : "postListMemberEvents",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Events"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_list_member_event",
          "methodNameCamel" : "createListMemberEvent"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}/goals" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List member goal events",
        "description" : "Get the last 50 Goal events for a member on a specific list.",
        "operationId" : "getListsIdMembersIdGoals",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfMemberActivityEvents"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfMemberActivityEvents"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "getListMemberGoals",
          "methodNameCamel" : "getListMemberGoals"
        }
      }
    },
    "/lists/{listId}/members/{subscriberHash}/notes" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List recent member notes",
        "description" : "Get recent notes for a specific list member.",
        "operationId" : "getListsIdMembersIdNotes",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns notes sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "created_at", "updated_at", "note_id" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfNotes"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfNotes"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_notes",
          "methodNameCamel" : "getListMemberNotes"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add member note",
        "description" : "Add a new note for a specific subscriber.",
        "operationId" : "postListsIdMembersIdNotes",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberNotes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_list_member_note",
          "methodNameCamel" : "createListMemberNote"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}/notes/{noteId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get member note",
        "description" : "Get a specific note for a specific list member.",
        "operationId" : "getListsIdMembersIdNotesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "noteId",
          "in" : "path",
          "description" : "The id for the note",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Note ID"
          },
          "x-title" : "Note ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_member_note",
          "methodNameCamel" : "getListMemberNote"
        }
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete note",
        "description" : "Delete a specific note for a specific list member.",
        "operationId" : "deleteListsIdMembersIdNotesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "noteId",
          "in" : "path",
          "description" : "The id for the note",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Note ID"
          },
          "x-title" : "Note ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list_member_note",
          "methodNameCamel" : "deleteListMemberNote"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update note",
        "description" : "Update a specific note for a specific list member.",
        "operationId" : "patchListsIdMembersIdNotesId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "noteId",
          "in" : "path",
          "description" : "The id for the note",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Note ID"
          },
          "x-title" : "Note ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberNotes"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberNotes1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_member_note",
          "methodNameCamel" : "updateListMemberNote"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/members/{subscriberHash}/actions/delete-permanent" : {
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Delete list member",
        "description" : "Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.",
        "operationId" : "postListsIdMembersHashActionsDeletePermanent",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list_member_permanent",
          "methodNameCamel" : "deleteListMemberPermanent"
        }
      }
    },
    "/lists/{listId}/merge-fields" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List merge fields",
        "description" : "Get a list of all merge fields for an audience.",
        "operationId" : "getListsIdMergeFields",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The merge field type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Merge Type"
          },
          "x-title" : "Merge Type"
        }, {
          "name" : "required",
          "in" : "query",
          "description" : "Whether it's a required merge field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Required"
          },
          "x-title" : "Required"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfMergeFields"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionOfMergeFields"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_merge_fields",
          "methodNameCamel" : "getListMergeFields"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add merge field",
        "description" : "Add a new merge field for a specific audience.",
        "operationId" : "postListsIdMergeFields",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeField"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_list_merge_field",
          "methodNameCamel" : "addListMergeField"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/merge-fields/{mergeId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get merge field",
        "description" : "Get information about a specific merge field.",
        "operationId" : "getListsIdMergeFieldsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "mergeId",
          "in" : "path",
          "description" : "The id for the merge field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Merge ID"
          },
          "x-title" : "Merge ID"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_merge_field",
          "methodNameCamel" : "getListMergeField"
        }
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete merge field",
        "description" : "Delete a specific merge field.",
        "operationId" : "deleteListsIdMergeFieldsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "mergeId",
          "in" : "path",
          "description" : "The id for the merge field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Merge ID"
          },
          "x-title" : "Merge ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list_merge_field",
          "methodNameCamel" : "deleteListMergeField"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update merge field",
        "description" : "Update a specific merge field.",
        "operationId" : "patchListsIdMergeFieldsId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "mergeId",
          "in" : "path",
          "description" : "The id for the merge field",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Merge ID"
          },
          "x-title" : "Merge ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeField2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeField1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_merge_field",
          "methodNameCamel" : "updateListMergeField"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/webhooks" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List webhooks",
        "description" : "Get information about all webhooks for a specific list.",
        "operationId" : "getListsIdWebhooks",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_webhooks",
          "methodNameCamel" : "getListWebhooks"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Add webhook",
        "description" : "Create a new webhook for a specific list.",
        "operationId" : "postListsIdWebhooks",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_list_webhook",
          "methodNameCamel" : "createListWebhook"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/webhooks/{webhookId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get webhook info",
        "description" : "Get information about a specific webhook.",
        "operationId" : "getListsIdWebhooksId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The webhook's id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_webhook",
          "methodNameCamel" : "getListWebhook"
        }
      },
      "delete" : {
        "tags" : [ "lists" ],
        "summary" : "Delete webhook",
        "description" : "Delete a specific webhook in a list.",
        "operationId" : "deleteListsIdWebhooksId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The webhook's id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_list_webhook",
          "methodNameCamel" : "deleteListWebhook"
        }
      },
      "patch" : {
        "tags" : [ "lists" ],
        "summary" : "Update webhook",
        "description" : "Update the settings for an existing webhook.",
        "operationId" : "patchListsIdWebhooksId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The webhook's id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddWebhook"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListWebhooks1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_webhook",
          "methodNameCamel" : "updateListWebhook"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/signup-forms" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List signup forms",
        "description" : "Get signup forms for a specific list.",
        "operationId" : "getListsIdSignupForms",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSignupForms"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSignupForms"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_signup_forms",
          "methodNameCamel" : "getListSignupForms"
        }
      },
      "post" : {
        "tags" : [ "lists" ],
        "summary" : "Customize signup form",
        "description" : "Customize a list's default signup form.",
        "operationId" : "postListsIdSignupForms",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignupForm"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignupForm1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignupForm1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_list_signup_form",
          "methodNameCamel" : "updateListSignupForm"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/lists/{listId}/locations" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "List locations",
        "description" : "Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.",
        "operationId" : "getListsIdLocations",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListLocations"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListLocations"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_list_locations",
          "methodNameCamel" : "getListLocations"
        }
      }
    },
    "/lists/{listId}/surveys" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get information about all surveys for a list",
        "description" : "Get information about all available surveys for a specific list.",
        "operationId" : "getListsIdSurveys",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_surveys_for_list",
          "methodNameCamel" : "getAllSurveysForList"
        }
      }
    },
    "/lists/{listId}/surveys/{surveyId}" : {
      "get" : {
        "tags" : [ "lists" ],
        "summary" : "Get survey",
        "description" : "Get details about a specific survey.",
        "operationId" : "getListsIdSurveysId",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_survey",
          "methodNameCamel" : "getSurvey"
        }
      }
    },
    "/lists/{listId}/surveys/{surveyId}/actions/publish" : {
      "post" : {
        "tags" : [ "Surveys" ],
        "summary" : "Publish a Survey",
        "description" : "Publish a survey that is in draft, unpublished, or has been previously published and edited.",
        "operationId" : "postListsIdSurveysIdActionsPublish",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Survey Published",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "publish_survey",
          "methodNameCamel" : "publishSurvey"
        }
      }
    },
    "/lists/{listId}/surveys/{surveyId}/actions/unpublish" : {
      "post" : {
        "tags" : [ "Surveys" ],
        "summary" : "Unpublish a Survey",
        "description" : "Unpublish a survey that has been published.",
        "operationId" : "postListsIdSurveysIdActionsUnpublish",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Survey Instance",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "unpublish_survey",
          "methodNameCamel" : "unpublishSurvey"
        }
      }
    },
    "/lists/{listId}/surveys/{surveyId}/actions/create-email" : {
      "post" : {
        "tags" : [ "Surveys" ],
        "summary" : "Create a Survey Campaign",
        "description" : "Utilize the List ID and Survey ID to generate a Campaign that links to your survey.",
        "operationId" : "postListsIdSurveysIdActionsCreateEmail",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The unique ID for the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Campaign Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaign3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_email",
          "methodNameCamel" : "createEmail"
        }
      }
    },
    "/landing-pages" : {
      "get" : {
        "tags" : [ "landingPages" ],
        "summary" : "List landing pages",
        "description" : "Get all landing pages.",
        "operationId" : "getAllLandingPages",
        "parameters" : [ {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "created_at", "updated_at" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        } ],
        "responses" : {
          "200" : {
            "description" : "Landing Pages Collection",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2008"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2008"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_all",
          "methodNameCamel" : "getAll"
        }
      },
      "post" : {
        "tags" : [ "landingPages" ],
        "summary" : "Add landing page",
        "description" : "Create an unpublished and contentless Mailchimp landing page.",
        "operationId" : "postAllLandingPages",
        "parameters" : [ {
          "name" : "use_default_list",
          "in" : "query",
          "description" : "Will create the Landing Page using the account's Default List instead of requiring a list_id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Use Default List"
          },
          "x-title" : "Use Default List",
          "x-ballerina-name" : "useDefaultList"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LandingPage"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/landing-pages/{pageId}" : {
      "get" : {
        "tags" : [ "landingPages" ],
        "summary" : "Get landing page info",
        "description" : "Get information about a specific page.",
        "operationId" : "getLandingPageId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Landing Pages Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_page",
          "methodNameCamel" : "getPage"
        }
      },
      "delete" : {
        "tags" : [ "landingPages" ],
        "summary" : "Delete landing page",
        "description" : "Delete a landing page.",
        "operationId" : "deleteLandingPageId",
        "parameters" : [ {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_page",
          "methodNameCamel" : "deletePage"
        }
      },
      "patch" : {
        "tags" : [ "landingPages" ],
        "summary" : "Update landing page",
        "description" : "Update a landing page.",
        "operationId" : "patchLandingPageId",
        "parameters" : [ {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LandingPage2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPage1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "update_page",
          "methodNameCamel" : "updatePage"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/landing-pages/{pageId}/actions/publish" : {
      "post" : {
        "tags" : [ "landingPages" ],
        "summary" : "Publish landing page",
        "description" : "Publish a landing page that is in draft, unpublished, or has been previously published and edited.",
        "operationId" : "postLandingPageIdActionsPublish",
        "parameters" : [ {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "publish_page",
          "methodNameCamel" : "publishPage"
        }
      }
    },
    "/landing-pages/{pageId}/actions/unpublish" : {
      "post" : {
        "tags" : [ "landingPages" ],
        "summary" : "Unpublish landing page",
        "description" : "Unpublish a landing page that is in draft or has been published.",
        "operationId" : "postLandingPageIdActionsUnpublish",
        "parameters" : [ {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "unpublish_page",
          "methodNameCamel" : "unpublishPage"
        }
      }
    },
    "/landing-pages/{pageId}/content" : {
      "get" : {
        "tags" : [ "landingPages" ],
        "summary" : "Get landing page content",
        "description" : "Get the the HTML for your landing page.",
        "operationId" : "getLandingPageIdContent",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "pageId",
          "in" : "path",
          "description" : "The unique id for the page",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Landing Page unique ID"
          },
          "x-title" : "Landing Page unique ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPageContent"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPageContent"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_page_content",
          "methodNameCamel" : "getPageContent"
        }
      }
    },
    "/reports" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign reports",
        "description" : "Get campaign reports.",
        "operationId" : "getReports",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The campaign type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ],
            "x-title" : "Campaign Type"
          },
          "x-title" : "Campaign Type"
        }, {
          "name" : "before_send_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Before Send Time"
          },
          "x-title" : "Before Send Time",
          "x-ballerina-name" : "beforeSendTime"
        }, {
          "name" : "since_send_time",
          "in" : "query",
          "description" : "Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "x-title" : "Since Send Time"
          },
          "x-title" : "Since Send Time",
          "x-ballerina-name" : "sinceSendTime"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReports1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReports1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_campaign_reports",
          "methodNameCamel" : "getAllCampaignReports"
        }
      }
    },
    "/reports/{campaignId}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get campaign report",
        "description" : "Get report details for a specific sent campaign.",
        "operationId" : "getReportsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_report",
          "methodNameCamel" : "getCampaignReport"
        }
      }
    },
    "/reports/{campaignId}/abuse-reports" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List abuse reports",
        "description" : "Get a list of abuse complaints for a specific campaign.",
        "operationId" : "getReportsIdAbuseReportsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaints1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaints1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_abuse_reports",
          "methodNameCamel" : "getCampaignAbuseReports"
        }
      }
    },
    "/reports/{campaignId}/abuse-reports/{reportId}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get abuse report",
        "description" : "Get information about a specific abuse report for a campaign.",
        "operationId" : "getReportsIdAbuseReportsIdId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "reportId",
          "in" : "path",
          "description" : "The id for the abuse report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaint1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AbuseComplaint1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_abuse_report",
          "methodNameCamel" : "getCampaignAbuseReport"
        }
      }
    },
    "/reports/{campaignId}/advice" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign feedback",
        "description" : "Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.",
        "operationId" : "getReportsIdAdvice",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignAdviceReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignAdviceReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_advice",
          "methodNameCamel" : "getCampaignAdvice"
        }
      }
    },
    "/reports/{campaignId}/click-details" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign details",
        "description" : "Get information about clicks on specific links in your Mailchimp campaigns.",
        "operationId" : "getReportsIdClickDetails",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns click reports sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "total_clicks", "unique_clicks" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_click_details",
          "methodNameCamel" : "getCampaignClickDetails"
        }
      }
    },
    "/reports/{campaignId}/click-details/{linkId}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get campaign link details",
        "description" : "Get click details for a specific link in a campaign.",
        "operationId" : "getReportsIdClickDetailsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "linkId",
          "in" : "path",
          "description" : "The id for the link",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Link ID"
          },
          "x-title" : "Link ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailReport1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailReport1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_click_details_for_link",
          "methodNameCamel" : "getCampaignClickDetailsForLink"
        }
      }
    },
    "/reports/{campaignId}/click-details/{linkId}/members" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List clicked link subscribers",
        "description" : "Get information about list members who clicked on a specific link in a campaign.",
        "operationId" : "getReportsIdClickDetailsIdMembers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "linkId",
          "in" : "path",
          "description" : "The id for the link",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Link ID"
          },
          "x-title" : "Link ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailMembers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailMembers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_subscribers_info",
          "methodNameCamel" : "getSubscribersInfo"
        }
      }
    },
    "/reports/{campaignId}/click-details/{linkId}/members/{subscriberHash}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get clicked link subscriber",
        "description" : "Get information about a specific subscriber who clicked a link in a specific campaign.",
        "operationId" : "getReportsIdClickDetailsIdMembersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "linkId",
          "in" : "path",
          "description" : "The id for the link",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Link ID"
          },
          "x-title" : "Link ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailMember"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClickDetailMember"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_subscriber_info",
          "methodNameCamel" : "getSubscriberInfo"
        }
      }
    },
    "/reports/{campaignId}/open-details" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign open details",
        "description" : "Get detailed information about any campaign emails that were opened by a list member.",
        "operationId" : "getReportsIdOpenDetails",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign opens since"
          },
          "example" : "2016-04-12 12:00:00",
          "x-title" : "Campaign opens since"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns open reports sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "opens_count" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenDetailReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenDetailReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_open_details",
          "methodNameCamel" : "getCampaignOpenDetails"
        }
      }
    },
    "/reports/{campaignId}/open-details/{subscriberHash}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get opened campaign subscriber",
        "description" : "Get information about a specific subscriber who opened a campaign.",
        "operationId" : "getReportsIdOpenDetailsIdMembersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenActivity"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenActivity"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_subscriber_info_for_opened_campaign",
          "methodNameCamel" : "getSubscriberInfoForOpenedCampaign"
        }
      }
    },
    "/reports/{campaignId}/domain-performance" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List domain performance stats",
        "description" : "Get statistics for the top-performing email domains in a campaign.",
        "operationId" : "getReportsIdDomainPerformance",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DomainPerformance"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DomainPerformance"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_domain_performance_for_campaign",
          "methodNameCamel" : "getDomainPerformanceForCampaign"
        }
      }
    },
    "/reports/{campaignId}/eepurl" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List EepURL activity",
        "description" : "Get a summary of social activity for the campaign, tracked by EepURL.",
        "operationId" : "getReportsIdEepurl",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EepurlActivity"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EepurlActivity"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_eepurl_activity_for_campaign",
          "methodNameCamel" : "getEepurlActivityForCampaign"
        }
      }
    },
    "/reports/{campaignId}/email-activity" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List email activity",
        "description" : "Get a list of member's subscriber activity in a specific campaign.",
        "operationId" : "getReportsIdEmailActivity",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Email Activity since"
          },
          "x-title" : "Email Activity since"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailActivity"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailActivity"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_email_activity_for_campaign",
          "methodNameCamel" : "getEmailActivityForCampaign"
        }
      }
    },
    "/reports/{campaignId}/email-activity/{subscriberHash}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get subscriber email activity",
        "description" : "Get a specific list member's activity in a campaign including opens, clicks, and bounces.",
        "operationId" : "getReportsIdEmailActivityId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        }, {
          "name" : "since",
          "in" : "query",
          "description" : "Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Email Activity since"
          },
          "x-title" : "Email Activity since"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailActivity1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailActivity1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_email_activity_for_subscriber",
          "methodNameCamel" : "getEmailActivityForSubscriber"
        }
      }
    },
    "/reports/{campaignId}/locations" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List top open activities",
        "description" : "Get top open locations for a specific campaign.",
        "operationId" : "getReportsIdLocations",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenLocations"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OpenLocations"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_locations_for_campaign",
          "methodNameCamel" : "getLocationsForCampaign"
        }
      }
    },
    "/reports/{campaignId}/sent-to" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign recipients",
        "description" : "Get information about campaign recipients.",
        "operationId" : "getReportsIdSentTo",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentTo"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentTo"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_recipients",
          "methodNameCamel" : "getCampaignRecipients"
        }
      }
    },
    "/reports/{campaignId}/sent-to/{subscriberHash}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get campaign recipient info",
        "description" : "Get information about a specific campaign recipient.",
        "operationId" : "getReportsIdSentToId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentTo1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentTo1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_campaign_recipient",
          "methodNameCamel" : "getCampaignRecipient"
        }
      }
    },
    "/reports/{campaignId}/sub-reports" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List child campaign reports",
        "description" : "Get a list of reports with child campaigns for a specific parent campaign.",
        "operationId" : "getReportsIdSubReportsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignSubReports"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CampaignSubReports"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_sub_reports_for_campaign",
          "methodNameCamel" : "getSubReportsForCampaign"
        }
      }
    },
    "/reports/{campaignId}/unsubscribed" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List unsubscribed members",
        "description" : "Get information about members who have unsubscribed from a specific campaign.",
        "operationId" : "getReportsIdUnsubscribed",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unsubscribes"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unsubscribes"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_unsubscribed_list_for_campaign",
          "methodNameCamel" : "getUnsubscribedListForCampaign"
        }
      }
    },
    "/reports/{campaignId}/unsubscribed/{subscriberHash}" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "Get unsubscribed member",
        "description" : "Get information about a specific list member who unsubscribed from a campaign.",
        "operationId" : "getReportsIdUnsubscribedId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "subscriberHash",
          "in" : "path",
          "description" : "The MD5 hash of the lowercase version of the list member's email address",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Subscriber Hash"
          },
          "x-title" : "Subscriber Hash"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unsubscribes1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unsubscribes1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_unsubscribed_list_member",
          "methodNameCamel" : "getUnsubscribedListMember"
        }
      }
    },
    "/reports/{campaignId}/ecommerce-product-activity" : {
      "get" : {
        "tags" : [ "reports" ],
        "summary" : "List campaign product activity",
        "description" : "Get breakdown of product activity for a campaign",
        "operationId" : "getReportsIdEcommerceProductActivity",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaignId",
          "in" : "path",
          "description" : "The unique id for the campaign",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "title", "total_revenue", "total_purchased" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ecommerce Product Activity Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2009"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2009"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_ecommerce_product_activity_for_campaign",
          "methodNameCamel" : "getEcommerceProductActivityForCampaign"
        }
      }
    },
    "/templates" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "List templates",
        "description" : "Get a list of an account's available templates.",
        "operationId" : "getTemplates",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "created_by",
          "in" : "query",
          "description" : "The Mailchimp account user who created the template",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Created By"
          },
          "x-title" : "Created By",
          "x-ballerina-name" : "createdBy"
        }, {
          "name" : "since_date_created",
          "in" : "query",
          "description" : "Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Since Date Created"
          },
          "x-title" : "Since Date Created",
          "x-ballerina-name" : "sinceDateCreated"
        }, {
          "name" : "before_date_created",
          "in" : "query",
          "description" : "Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Before Date Created"
          },
          "x-title" : "Before Date Created",
          "x-ballerina-name" : "beforeDateCreated"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Limit results based on template type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Template Type"
          },
          "x-title" : "Template Type"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Limit results based on category",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Category"
          },
          "x-title" : "Category"
        }, {
          "name" : "folder_id",
          "in" : "query",
          "description" : "The unique folder id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Folder ID"
          },
          "x-title" : "Folder ID",
          "x-ballerina-name" : "folderId"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns user templates sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "date_created", "date_edited", "name" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "content_type",
          "in" : "query",
          "description" : "Limit results based on how the template's content is put together. Only templates of type `user` can be filtered by `content_type`. If you want to retrieve saved templates created with the legacy email editor, then filter `content_type` to `template`. If you'd rather pull your saved templates for the new editor, filter to `multichannel`. For code your own templates, filter to `html`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "html", "template", "multichannel" ],
            "x-title" : "Content Type"
          },
          "x-title" : "Content Type",
          "x-ballerina-name" : "contentType"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Templates"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Templates"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      },
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Add template",
        "description" : "Create a new template for the account. Only Classic templates are supported.",
        "operationId" : "postTemplates",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateInstance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create",
          "methodNameCamel" : "create"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/templates/{templateId}" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Get template info",
        "description" : "Get information about a specific template.",
        "operationId" : "getTemplatesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "templateId",
          "in" : "path",
          "description" : "The unique id for the template",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Template ID"
          },
          "x-title" : "Template ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_template",
          "methodNameCamel" : "getTemplate"
        }
      },
      "delete" : {
        "tags" : [ "templates" ],
        "summary" : "Delete template",
        "description" : "Delete a specific template.",
        "operationId" : "deleteTemplatesId",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "path",
          "description" : "The unique id for the template",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Template ID"
          },
          "x-title" : "Template ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_template",
          "methodNameCamel" : "deleteTemplate"
        }
      },
      "patch" : {
        "tags" : [ "templates" ],
        "summary" : "Update template",
        "description" : "Update the name, HTML, or `folder_id` of an existing template.",
        "operationId" : "patchTemplatesId",
        "parameters" : [ {
          "name" : "templateId",
          "in" : "path",
          "description" : "The unique id for the template",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Template ID"
          },
          "x-title" : "Template ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemplateInstance"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateInstance1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_template",
          "methodNameCamel" : "updateTemplate"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/templates/{templateId}/default-content" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "View default content",
        "description" : "Get the sections that you can edit in a template, including each section's default content.",
        "operationId" : "getTemplatesIdDefaultContent",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "templateId",
          "in" : "path",
          "description" : "The unique id for the template",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Template ID"
          },
          "x-title" : "Template ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateDefaultContent"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TemplateDefaultContent"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_default_content_for_template",
          "methodNameCamel" : "getDefaultContentForTemplate"
        }
      }
    },
    "/ecommerce/orders" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List account orders",
        "description" : "Get information about an account's orders.",
        "operationId" : "getEcommerceOrders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "campaign_id",
          "in" : "query",
          "description" : "Restrict results to orders with a specific `campaign_id` value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID",
          "x-ballerina-name" : "campaignId"
        }, {
          "name" : "outreach_id",
          "in" : "query",
          "description" : "Restrict results to orders with a specific `outreach_id` value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID",
          "x-ballerina-name" : "outreachId"
        }, {
          "name" : "customer_id",
          "in" : "query",
          "description" : "Restrict results to orders made by a specific customer",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID",
          "x-ballerina-name" : "customerId"
        }, {
          "name" : "has_outreach",
          "in" : "query",
          "description" : "Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Has Outreach"
          },
          "x-title" : "Has Outreach",
          "x-ballerina-name" : "hasOutreach"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "orders",
          "methodNameCamel" : "orders"
        }
      }
    },
    "/ecommerce/stores" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List stores",
        "description" : "Get information about all stores in the account.",
        "operationId" : "getEcommerceStores",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStores"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStores"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "stores",
          "methodNameCamel" : "stores"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add store",
        "description" : "Add a new store to your Mailchimp account.",
        "operationId" : "postEcommerceStores",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceStore"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_store",
          "methodNameCamel" : "addStore"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get store info",
        "description" : "Get information about a specific store.",
        "operationId" : "getEcommerceStoresId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store",
          "methodNameCamel" : "getStore"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete store",
        "description" : "Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.",
        "operationId" : "deleteEcommerceStoresId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Empty Response"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "type" : "object",
                  "description" : "Empty Response"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_store",
          "methodNameCamel" : "deleteStore"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update store",
        "description" : "Update a store.",
        "operationId" : "patchEcommerceStoresId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceStore2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceStore1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_store",
          "methodNameCamel" : "updateStore"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/carts" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List carts",
        "description" : "Get information about a store's carts.",
        "operationId" : "getEcommerceStoresIdCarts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Carts"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Carts"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store_carts",
          "methodNameCamel" : "getStoreCarts"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add cart",
        "description" : "Add a new cart to a store.",
        "operationId" : "postEcommerceStoresIdCarts",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCart"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_store_cart",
          "methodNameCamel" : "addStoreCart"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/carts/{cartId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get cart info",
        "description" : "Get information about a specific cart.",
        "operationId" : "getEcommerceStoresIdCartsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store_cart",
          "methodNameCamel" : "getStoreCart"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete cart",
        "description" : "Delete a cart.",
        "operationId" : "deleteEcommerceStoresIdCartsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_store_cart",
          "methodNameCamel" : "deleteStoreCart"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update cart",
        "description" : "Update a specific cart.",
        "operationId" : "patchEcommerceStoresIdCartsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCart2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCart1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_store_cart",
          "methodNameCamel" : "updateStoreCart"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/carts/{cartId}/lines" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List cart line items",
        "description" : "Get information about a cart's line items.",
        "operationId" : "getEcommerceStoresIdCartsIdLines",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CartLines"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CartLines"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_cart_line_items",
          "methodNameCamel" : "getAllCartLineItems"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add cart line item",
        "description" : "Add a new line item to an existing cart.",
        "operationId" : "postEcommerceStoresIdCartsIdLines",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCartLineItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_cart_line_item",
          "methodNameCamel" : "addCartLineItem"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/carts/{cartId}/lines/{lineId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get cart line item",
        "description" : "Get information about a specific cart line item.",
        "operationId" : "getEcommerceStoresIdCartsIdLinesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of a cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart Line ID"
          },
          "x-title" : "Cart Line ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_cart_line_item",
          "methodNameCamel" : "getCartLineItem"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete cart line item",
        "description" : "Delete a specific cart line item.",
        "operationId" : "deleteEcommerceStoresIdCartsLinesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of a cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart Line ID"
          },
          "x-title" : "Cart Line ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_cart_line_item",
          "methodNameCamel" : "deleteCartLineItem"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update cart line item",
        "description" : "Update a specific cart line item.",
        "operationId" : "patchEcommerceStoresIdCartsIdLinesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "cartId",
          "in" : "path",
          "description" : "The id for the cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart ID"
          },
          "x-title" : "Cart ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of a cart",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Cart Line ID"
          },
          "x-title" : "Cart Line ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCartLineItem1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCartLineItem2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_cart_line_item",
          "methodNameCamel" : "updateCartLineItem"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/customers" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List customers",
        "description" : "Get information about a store's customers.",
        "operationId" : "getEcommerceStoresIdCustomers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "email_address",
          "in" : "query",
          "description" : "Restrict the response to customers with the email address",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer Email Address"
          },
          "x-title" : "Customer Email Address",
          "x-ballerina-name" : "emailAddress"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customers"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Customers"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_store_customers",
          "methodNameCamel" : "getAllStoreCustomers"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add customer",
        "description" : "Add a new customer to a store.",
        "operationId" : "postEcommerceStoresIdCustomers",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCustomer2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_store_customer",
          "methodNameCamel" : "addStoreCustomer"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/customers/{customerId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get customer info",
        "description" : "Get information about a specific customer.",
        "operationId" : "getEcommerceStoresIdCustomersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The id for the customer of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store_customer",
          "methodNameCamel" : "getStoreCustomer"
        }
      },
      "put" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add or update customer",
        "description" : "Add or update a customer.",
        "operationId" : "putEcommerceStoresIdCustomersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The id for the customer of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCustomer4"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "set_store_customer",
          "methodNameCamel" : "setStoreCustomer"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete customer",
        "description" : "Delete a customer from a store.",
        "operationId" : "deleteEcommerceStoresIdCustomersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The id for the customer of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_store_customer",
          "methodNameCamel" : "deleteStoreCustomer"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update customer",
        "description" : "Update a customer.",
        "operationId" : "patchEcommerceStoresIdCustomersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "customerId",
          "in" : "path",
          "description" : "The id for the customer of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceCustomer1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceCustomer3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_store_customer",
          "methodNameCamel" : "updateStoreCustomer"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/promo-rules" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List promo rules",
        "description" : "Get information about a store's promo rules.",
        "operationId" : "getEcommerceStoresIdPromorules",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PromoRules"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PromoRules"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "list_promo_rules",
          "methodNameCamel" : "listPromoRules"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add promo rule",
        "description" : "Add a new promo rule to a store.",
        "operationId" : "postEcommerceStoresIdPromorules",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommercePromoRule"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_promo_rules",
          "methodNameCamel" : "addPromoRules"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/promo-rules/{promoRuleId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get promo rule",
        "description" : "Get information about a specific promo rule.",
        "operationId" : "getEcommerceStoresIdPromorulesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_promo_rule",
          "methodNameCamel" : "getPromoRule"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete promo rule",
        "description" : "Delete a promo rule from a store.",
        "operationId" : "deleteEcommerceStoresIdPromorulesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_promo_rule",
          "methodNameCamel" : "deletePromoRule"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update promo rule",
        "description" : "Update a promo rule.",
        "operationId" : "patchEcommerceStoresIdPromorulesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommercePromoRule2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoRule1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_promo_rule",
          "methodNameCamel" : "updatePromoRule"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/promo-rules/{promoRuleId}/promo-codes" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List promo codes",
        "description" : "Get information about a store's promo codes.",
        "operationId" : "getEcommerceStoresIdPromocodes",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PromoCodes"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PromoCodes"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_promo_codes",
          "methodNameCamel" : "getPromoCodes"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add promo code",
        "description" : "Add a new promo code to a store.",
        "operationId" : "postEcommerceStoresIdPromocodes",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommercePromoCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_promo_code",
          "methodNameCamel" : "addPromoCode"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/promo-rules/{promoRuleId}/promo-codes/{promoCodeId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get promo code",
        "description" : "Get information about a specific promo code.",
        "operationId" : "getEcommerceStoresIdPromocodesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        }, {
          "name" : "promoCodeId",
          "in" : "path",
          "description" : "The id for the promo code of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Code ID"
          },
          "x-title" : "Promo Code ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_promo_code",
          "methodNameCamel" : "getPromoCode"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete promo code",
        "description" : "Delete a promo code from a store.",
        "operationId" : "deleteEcommerceStoresIdPromocodesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        }, {
          "name" : "promoCodeId",
          "in" : "path",
          "description" : "The id for the promo code of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Code ID"
          },
          "x-title" : "Promo Code ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_promo_code",
          "methodNameCamel" : "deletePromoCode"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update promo code",
        "description" : "Update a promo code.",
        "operationId" : "patchEcommerceStoresIdPromocodesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "promoRuleId",
          "in" : "path",
          "description" : "The id for the promo rule of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Rule ID"
          },
          "x-title" : "Promo Rule ID"
        }, {
          "name" : "promoCodeId",
          "in" : "path",
          "description" : "The id for the promo code of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Promo Code ID"
          },
          "x-title" : "Promo Code ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommercePromoCode2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommercePromoCode1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_promo_code",
          "methodNameCamel" : "updatePromoCode"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/orders" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List orders",
        "description" : "Get information about a store's orders.",
        "operationId" : "getEcommerceStoresIdOrders",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "customer_id",
          "in" : "query",
          "description" : "Restrict results to orders made by a specific customer",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Customer ID"
          },
          "x-title" : "Customer ID",
          "x-ballerina-name" : "customerId"
        }, {
          "name" : "has_outreach",
          "in" : "query",
          "description" : "Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "x-title" : "Has Outreach"
          },
          "x-title" : "Has Outreach",
          "x-ballerina-name" : "hasOutreach"
        }, {
          "name" : "campaign_id",
          "in" : "query",
          "description" : "Restrict results to orders with a specific `campaign_id` value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Campaign ID"
          },
          "x-title" : "Campaign ID",
          "x-ballerina-name" : "campaignId"
        }, {
          "name" : "outreach_id",
          "in" : "query",
          "description" : "Restrict results to orders with a specific `outreach_id` value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID",
          "x-ballerina-name" : "outreachId"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Orders1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store_orders",
          "methodNameCamel" : "getStoreOrders"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add order",
        "description" : "Add a new order to a store.",
        "operationId" : "postEcommerceStoresIdOrders",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceOrder"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_store_order",
          "methodNameCamel" : "addStoreOrder"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/orders/{orderId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get order info",
        "description" : "Get information about a specific order.",
        "operationId" : "getEcommerceStoresIdOrdersId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_order",
          "methodNameCamel" : "getOrder"
        }
      },
      "put" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add or update order",
        "description" : "Add or update an order.",
        "operationId" : "putEcommerceStoresIdOrdersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceOrder2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "set_order",
          "methodNameCamel" : "setOrder"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete order",
        "description" : "Delete an order.",
        "operationId" : "deleteEcommerceStoresIdOrdersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_order",
          "methodNameCamel" : "deleteOrder"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update order",
        "description" : "Update a specific order.",
        "operationId" : "patchEcommerceStoresIdOrdersId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceOrder3"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrder1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_order",
          "methodNameCamel" : "updateOrder"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/orders/{orderId}/lines" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List order line items",
        "description" : "Get information about an order's line items.",
        "operationId" : "getEcommerceStoresIdOrdersIdLines",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderLines"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderLines"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_order_line_items",
          "methodNameCamel" : "getAllOrderLineItems"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add order line item",
        "description" : "Add a new line item to an existing order.",
        "operationId" : "postEcommerceStoresIdOrdersIdLines",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceOrderLineItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_order_line_item",
          "methodNameCamel" : "addOrderLineItem"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/orders/{orderId}/lines/{lineId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get order line item",
        "description" : "Get information about a specific order line item.",
        "operationId" : "getEcommerceStoresIdOrdersIdLinesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of an order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order Line ID"
          },
          "x-title" : "Order Line ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_order_line_item",
          "methodNameCamel" : "getOrderLineItem"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete order line item",
        "description" : "Delete a specific order line item.",
        "operationId" : "deleteEcommerceStoresIdOrdersIdLinesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of an order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order Line ID"
          },
          "x-title" : "Order Line ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_order_line_item",
          "methodNameCamel" : "deleteOrderLineItem"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update order line item",
        "description" : "Update a specific order line item.",
        "operationId" : "patchEcommerceStoresIdOrdersIdLinesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "The id for the order in a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order ID"
          },
          "x-title" : "Order ID"
        }, {
          "name" : "lineId",
          "in" : "path",
          "description" : "The id for the line item of an order",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Order Line ID"
          },
          "x-title" : "Order Line ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceOrderLineItem2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceOrderLineItem3"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_order_line_item",
          "methodNameCamel" : "updateOrderLineItem"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List product",
        "description" : "Get information about a store's products.",
        "operationId" : "getEcommerceStoresIdProducts",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Products"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Products"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_all_store_products",
          "methodNameCamel" : "getAllStoreProducts"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add product",
        "description" : "Add a new product to a store.",
        "operationId" : "postEcommerceStoresIdProducts",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProduct"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_store_product",
          "methodNameCamel" : "addStoreProduct"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products/{productId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get product info",
        "description" : "Get information about a specific product.",
        "operationId" : "getEcommerceStoresIdProductsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_store_product",
          "methodNameCamel" : "getStoreProduct"
        }
      },
      "put" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Create or update product",
        "description" : "Update a specific product.",
        "operationId" : "putEcommerceStoresIdProductsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProduct1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_or_update_store_product",
          "methodNameCamel" : "createOrUpdateStoreProduct"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete product",
        "description" : "Delete a product.",
        "operationId" : "deleteEcommerceStoresIdProductsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_store_product",
          "methodNameCamel" : "deleteStoreProduct"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update product",
        "description" : "Update a specific product.",
        "operationId" : "patchEcommerceStoresIdProductsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProduct3"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProduct2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_store_product",
          "methodNameCamel" : "updateStoreProduct"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products/{productId}/variants" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List product variants",
        "description" : "Get information about a product's variants.",
        "operationId" : "getEcommerceStoresIdProductsIdVariants",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EcommerceProductVariants"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EcommerceProductVariants"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_product_variants",
          "methodNameCamel" : "getProductVariants"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add product variant",
        "description" : "Add a new variant to the product.",
        "operationId" : "postEcommerceStoresIdProductsIdVariants",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProductVariant"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_product_variants",
          "methodNameCamel" : "addProductVariants"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products/{productId}/variants/{variantId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get product variant info",
        "description" : "Get information about a specific product variant.",
        "operationId" : "getEcommerceStoresIdProductsIdVariantsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The id for the product variant",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Variant ID"
          },
          "x-title" : "Product Variant ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_product_variant",
          "methodNameCamel" : "getProductVariant"
        }
      },
      "put" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add or update product variant",
        "description" : "Add or update a product variant.",
        "operationId" : "putEcommerceStoresIdProductsIdVariantsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The id for the product variant",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Variant ID"
          },
          "x-title" : "Product Variant ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProductVariant"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_product_variant",
          "methodNameCamel" : "addProductVariant"
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete product variant",
        "description" : "Delete a product variant.",
        "operationId" : "deleteEcommerceStoresIdProductsIdVariantsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The id for the product variant",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Variant ID"
          },
          "x-title" : "Product Variant ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_product_variant",
          "methodNameCamel" : "deleteProductVariant"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update product variant",
        "description" : "Update a product variant.",
        "operationId" : "patchEcommerceStoresIdProductsIdVariantsId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The id for the product variant",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Variant ID"
          },
          "x-title" : "Product Variant ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProductVariant1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductVariant2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_product_variant",
          "methodNameCamel" : "updateProductVariant"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products/{productId}/images" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "List product images",
        "description" : "Get information about a product's images.",
        "operationId" : "getEcommerceStoresIdProductsIdImages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EcommerceProductImages"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EcommerceProductImages"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_product_images",
          "methodNameCamel" : "getProductImages"
        }
      },
      "post" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Add product image",
        "description" : "Add a new image to the product.",
        "operationId" : "postEcommerceStoresIdProductsIdImages",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProductImage"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "add_product_image",
          "methodNameCamel" : "addProductImage"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/ecommerce/stores/{storeId}/products/{productId}/images/{imageId}" : {
      "get" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Get product image info",
        "description" : "Get information about a specific product image.",
        "operationId" : "getEcommerceStoresIdProductsIdImagesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "The id for the product image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Image ID"
          },
          "x-title" : "Product Image ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_product_image",
          "methodNameCamel" : "getProductImage"
        }
      },
      "delete" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Delete product image",
        "description" : "Delete a product image.",
        "operationId" : "deleteEcommerceStoresIdProductsIdImagesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "The id for the product image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Image ID"
          },
          "x-title" : "Product Image ID"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_product_image",
          "methodNameCamel" : "deleteProductImage"
        }
      },
      "patch" : {
        "tags" : [ "ecommerce" ],
        "summary" : "Update product image",
        "description" : "Update a product image.",
        "operationId" : "patchEcommerceStoresIdProductsIdImagesId",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "The store id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Store ID"
          },
          "x-title" : "Store ID"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "The id for the product of a store",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product ID"
          },
          "x-title" : "Product ID"
        }, {
          "name" : "imageId",
          "in" : "path",
          "description" : "The id for the product image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Product Image ID"
          },
          "x-title" : "Product Image ID"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ECommerceProductImage1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ECommerceProductImage2"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "update_product_image",
          "methodNameCamel" : "updateProductImage"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/search-campaigns" : {
      "get" : {
        "tags" : [ "searchCampaigns" ],
        "summary" : "Search campaigns",
        "description" : "Search all campaigns for the specified query terms.",
        "operationId" : "getSearchCampaigns",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The search query used to filter results",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Query"
          },
          "x-title" : "Query"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaigns"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Campaigns"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "search",
          "methodNameCamel" : "search"
        }
      }
    },
    "/search-members" : {
      "get" : {
        "tags" : [ "searchMembers" ],
        "summary" : "Search members",
        "description" : "Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.",
        "operationId" : "getSearchMembers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Query"
          },
          "x-title" : "Query"
        }, {
          "name" : "list_id",
          "in" : "query",
          "description" : "The unique id for the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "List ID"
          },
          "x-title" : "List ID",
          "x-ballerina-name" : "listId"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Members"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Members"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "search",
          "methodNameCamel" : "search"
        }
      }
    },
    "/ping" : {
      "get" : {
        "tags" : [ "ping" ],
        "summary" : "Ping",
        "description" : "A health check for the API that won't return any account-specific information.",
        "operationId" : "getPing",
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIHealthStatus"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIHealthStatus"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get",
          "methodNameCamel" : "get"
        }
      }
    },
    "/facebook-ads" : {
      "get" : {
        "tags" : [ "facebookAds" ],
        "summary" : "List facebook ads",
        "description" : "Get list of Facebook ads.",
        "operationId" : "getAllFacebookAds",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "created_at", "updated_at", "end_time" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Facebook Ad Instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20010"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20010"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "list",
          "methodNameCamel" : "list"
        }
      }
    },
    "/facebook-ads/{outreachId}" : {
      "get" : {
        "tags" : [ "facebookAds" ],
        "summary" : "Get facebook ad info",
        "description" : "Get details of a Facebook ad.",
        "operationId" : "getFacebookAdsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "outreachId",
          "in" : "path",
          "description" : "The outreach id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facebook Ad Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20011"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20011"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_ad",
          "methodNameCamel" : "getAd"
        }
      }
    },
    "/reporting/facebook-ads" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List facebook ads reports",
        "description" : "Get reports of Facebook ads.",
        "operationId" : "getReportingFacebookAds",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "created_at", "updated_at", "end_time" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Determines the order direction for sorted results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ASC", "DESC" ],
            "x-title" : "Sort Direction"
          },
          "x-title" : "Sort Direction",
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Facebook Ad Report Instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20012"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20012"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_facebook_ads_report_all",
          "methodNameCamel" : "getFacebookAdsReportAll"
        }
      }
    },
    "/reporting/facebook-ads/{outreachId}" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "Get facebook ad report",
        "description" : "Get report of a Facebook ad.",
        "operationId" : "getReportingFacebookAdsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "outreachId",
          "in" : "path",
          "description" : "The outreach id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facebook Ad report Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20013"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20013"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_facebook_ad_report",
          "methodNameCamel" : "getFacebookAdReport"
        }
      }
    },
    "/reporting/facebook-ads/{outreachId}/ecommerce-product-activity" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List facebook ecommerce report",
        "description" : "Get breakdown of product activity for an outreach.",
        "operationId" : "getReportingFacebookAdsIdEcommerceProductActivity",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        }, {
          "name" : "outreachId",
          "in" : "path",
          "description" : "The outreach id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID"
        }, {
          "name" : "sort_field",
          "in" : "query",
          "description" : "Returns files sorted by the specified field",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "title", "total_revenue", "total_purchased" ],
            "x-title" : "Sort By Field"
          },
          "x-title" : "Sort By Field",
          "x-ballerina-name" : "sortField"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ecommerce Product Activity Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2009"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse2009"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_facebook_ad_product_activity_report",
          "methodNameCamel" : "getFacebookAdProductActivityReport"
        }
      }
    },
    "/reporting/landing-pages/{outreachId}" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "Get landing page report",
        "description" : "Get report of a landing page.",
        "operationId" : "getReportingLandingPagesId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "outreachId",
          "in" : "path",
          "description" : "The outreach id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Outreach ID"
          },
          "x-title" : "Outreach ID"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        } ],
        "responses" : {
          "200" : {
            "description" : "Landing Page Report Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPageReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LandingPageReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_landing_page_report",
          "methodNameCamel" : "getLandingPageReport"
        }
      }
    },
    "/reporting/landing-pages" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List landing pages reports",
        "description" : "Get reports of landing pages.",
        "operationId" : "getReportingLandingPages",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Landing Page Report Instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20014"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20014"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_landing_page_reports_all",
          "methodNameCamel" : "getLandingPageReportsAll"
        }
      }
    },
    "/reporting/surveys" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List survey reports",
        "description" : "Get reports for surveys.",
        "operationId" : "getReportingSurveys",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of records to return. Default value is 10. Maximum value is 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "default" : 10,
            "x-title" : "Count"
          },
          "x-title" : "Count"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "x-title" : "Offset"
          },
          "x-title" : "Offset"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Survey Report Instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20015"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20015"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_reports_all",
          "methodNameCamel" : "getSurveyReportsAll"
        }
      }
    },
    "/reporting/surveys/{surveyId}" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "Get survey report",
        "description" : "Get report for a survey.",
        "operationId" : "getReportingSurveysId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Survey Report Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_report",
          "methodNameCamel" : "getSurveyReport"
        }
      }
    },
    "/reporting/surveys/{surveyId}/questions" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List survey question reports",
        "description" : "Get reports for survey questions.",
        "operationId" : "getReportingSurveysIdQuestions",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Survey Question Report Instances",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20016"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20016"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_question_reports_all",
          "methodNameCamel" : "getSurveyQuestionReportsAll"
        }
      }
    },
    "/reporting/surveys/{surveyId}/questions/{questionId}" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "Get survey question report",
        "description" : "Get report for a survey question.",
        "operationId" : "getReportingSurveysIdQuestionsId",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        }, {
          "name" : "questionId",
          "in" : "path",
          "description" : "The ID of the survey question",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Question ID"
          },
          "x-title" : "Question ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Survey Question Report Instance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyQuestionReport"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyQuestionReport"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_question_report",
          "methodNameCamel" : "getSurveyQuestionReport"
        }
      }
    },
    "/reporting/surveys/{surveyId}/questions/{questionId}/answers" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List answers for question",
        "description" : "Get answers for a survey question.",
        "operationId" : "getReportingSurveysIdQuestionsIdAnswers",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        }, {
          "name" : "questionId",
          "in" : "path",
          "description" : "The ID of the survey question",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Question ID"
          },
          "x-title" : "Question ID"
        }, {
          "name" : "respondent_familiarity_is",
          "in" : "query",
          "description" : "Filter survey responses by familiarity of the respondents",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "new", "known", "unknown" ],
            "x-title" : "Respondent Familiarity Is"
          },
          "x-title" : "Respondent Familiarity Is",
          "x-ballerina-name" : "respondentFamiliarityIs"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Survey Question Answers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20017"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20017"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_question_answers",
          "methodNameCamel" : "getSurveyQuestionAnswers"
        }
      }
    },
    "/reporting/surveys/{surveyId}/responses" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "List survey responses",
        "description" : "Get responses to a survey.",
        "operationId" : "getReportingSurveysIdResponses",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Fields"
          },
          "x-title" : "Fields"
        }, {
          "name" : "exclude_fields",
          "in" : "query",
          "description" : "A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation",
          "required" : false,
          "style" : "form",
          "explode" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "x-title" : "Exclude Fields"
          },
          "x-title" : "Exclude Fields",
          "x-ballerina-name" : "excludeFields"
        }, {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        }, {
          "name" : "answered_question",
          "in" : "query",
          "description" : "The ID of the question that was answered",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "x-title" : "Answered Question"
          },
          "x-title" : "Answered Question",
          "x-ballerina-name" : "answeredQuestion"
        }, {
          "name" : "chose_answer",
          "in" : "query",
          "description" : "The ID of the option chosen to filter responses on",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "x-title" : "Chose Answer"
          },
          "x-title" : "Chose Answer",
          "x-ballerina-name" : "choseAnswer"
        }, {
          "name" : "respondent_familiarity_is",
          "in" : "query",
          "description" : "Filter survey responses by familiarity of the respondents",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "new", "known", "unknown" ],
            "x-title" : "Respondent Familiarity Is"
          },
          "x-title" : "Respondent Familiarity Is",
          "x-ballerina-name" : "respondentFamiliarityIs"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of survey responses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20018"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InlineResponse20018"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_responses_all",
          "methodNameCamel" : "getSurveyResponsesAll"
        }
      }
    },
    "/reporting/surveys/{surveyId}/responses/{responseId}" : {
      "get" : {
        "tags" : [ "reporting" ],
        "summary" : "Get survey response",
        "description" : "Get a single survey response.",
        "operationId" : "getReportingSurveysIdResponsesId",
        "parameters" : [ {
          "name" : "surveyId",
          "in" : "path",
          "description" : "The ID of the survey",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Survey ID"
          },
          "x-title" : "Survey ID"
        }, {
          "name" : "responseId",
          "in" : "path",
          "description" : "The ID of the survey response",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Response ID"
          },
          "x-title" : "Response ID"
        } ],
        "responses" : {
          "200" : {
            "description" : "Get a single survey response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyResponse"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SurveyResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "x-custom-config" : {
          "methodNameSnake" : "get_survey_response",
          "methodNameCamel" : "getSurveyResponse"
        }
      }
    },
    "/verified-domains/{domainName}" : {
      "get" : {
        "tags" : [ "verifiedDomains" ],
        "summary" : "Get domain info",
        "description" : "Get the details for a single domain on the account.",
        "operationId" : "getVerifiedDomain",
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "The domain name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Domain Name"
          },
          "x-title" : "Domain Name"
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_domain",
          "methodNameCamel" : "getDomain"
        }
      },
      "delete" : {
        "tags" : [ "verifiedDomains" ],
        "summary" : "Delete domain",
        "description" : "Delete a verified domain from the account.",
        "operationId" : "deleteVerifiedDomain",
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "The domain name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Domain Name"
          },
          "x-title" : "Domain Name"
        } ],
        "responses" : {
          "204" : {
            "description" : "Empty Response",
            "content" : { }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "delete_domain",
          "methodNameCamel" : "deleteDomain"
        }
      }
    },
    "/verified-domains/{domainName}/actions/verify" : {
      "post" : {
        "tags" : [ "verifiedDomains" ],
        "summary" : "Verify domain",
        "description" : "Verify a domain for sending.",
        "operationId" : "verifyDomain",
        "parameters" : [ {
          "name" : "domainName",
          "in" : "path",
          "description" : "The domain name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "x-title" : "Domain Name"
          },
          "x-title" : "Domain Name"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VerifyADomainForSending"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The domain being verified for sending",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "submit_domain_verification",
          "methodNameCamel" : "submitDomainVerification"
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/verified-domains" : {
      "get" : {
        "tags" : [ "verifiedDomains" ],
        "summary" : "List sending domains",
        "description" : "Get all of the sending domains on the account.",
        "operationId" : "getVerifiedDomains",
        "responses" : {
          "200" : {
            "description" : "The domains on the account",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains1"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains1"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "get_verified_domains_all",
          "methodNameCamel" : "getVerifiedDomainsAll"
        }
      },
      "post" : {
        "tags" : [ "verifiedDomains" ],
        "summary" : "Add domain to account",
        "description" : "Add a domain to the account.",
        "operationId" : "createVerifiedDomain",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VerifiedDomains2"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The newly-created domain",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VerifiedDomains"
                }
              }
            }
          },
          "default" : {
            "description" : "An error generated by the Mailchimp API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              },
              "application/problem+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProblemDetailDocument"
                }
              }
            }
          }
        },
        "deprecated" : false,
        "x-custom-config" : {
          "methodNameSnake" : "create_verified_domain",
          "methodNameCamel" : "createVerifiedDomain"
        },
        "x-codegen-request-body-name" : "body"
      }
    }
  },
  "components" : {
    "schemas" : {
      "ECommercePromoCode1" : {
        "title" : "E-commerce Promo Code",
        "type" : "object",
        "properties" : {
          "usage_count" : {
            "title" : "Promo Code Usage Count",
            "type" : "integer",
            "description" : "Number of times promo code has been used",
            "x-ballerina-name" : "usageCount"
          },
          "code" : {
            "title" : "Promo Code",
            "type" : "string",
            "description" : "The discount code. Restricted to UTF-8 characters with max length 50",
            "example" : "summersale"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Promo Code Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo Code",
            "readOnly" : true
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "redemption_url" : {
            "title" : "Redemption Url",
            "type" : "string",
            "description" : "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000",
            "example" : "A url that applies promo code directly at checkout or a url that points to sale page or store url",
            "x-ballerina-name" : "redemptionUrl"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo code is currently enabled",
            "example" : true
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Code"
      },
      "ECommercePromoCode2" : {
        "title" : "E-commerce Promo Code",
        "type" : "object",
        "properties" : {
          "usage_count" : {
            "title" : "Promo Code Usage Count",
            "type" : "integer",
            "description" : "Number of times promo code has been used",
            "x-ballerina-name" : "usageCount"
          },
          "code" : {
            "title" : "Promo Code",
            "type" : "string",
            "description" : "The discount code. Restricted to UTF-8 characters with max length 50",
            "example" : "summersale"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "redemption_url" : {
            "title" : "Redemption Url",
            "type" : "string",
            "description" : "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000",
            "example" : "A url that applies promo code directly at checkout or a url that points to sale page or store url",
            "x-ballerina-name" : "redemptionUrl"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo code is currently enabled",
            "example" : true
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Code"
      },
      "ECommercePromoRule3" : {
        "title" : "E-commerce Promo Rule",
        "type" : "object",
        "properties" : {
          "starts_at" : {
            "title" : "Promo Start Time",
            "type" : "string",
            "description" : "The date and time when the promotion is in effect in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startsAt"
          },
          "amount" : {
            "title" : "Amount",
            "type" : "number",
            "description" : "The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive",
            "format" : "float",
            "example" : 0.5
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a promotion restricted to UTF-8 characters with max length 255",
            "example" : "Save BIG during our summer sale!"
          },
          "id" : {
            "title" : "Promo Rule Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50",
            "readOnly" : true
          },
          "ends_at" : {
            "title" : "End Time",
            "type" : "string",
            "description" : "The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format",
            "format" : "Promo date-time",
            "x-ballerina-name" : "endsAt"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes",
            "example" : "50% off Total Order"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo rule is currently enabled",
            "example" : true
          },
          "target" : {
            "title" : "Target",
            "type" : "string",
            "description" : "The target that the discount applies to",
            "enum" : [ "per_item", "total", "shipping" ]
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Rule"
      },
      "ECommercePromoCode3" : {
        "title" : "E-commerce Promo Code",
        "type" : "object",
        "properties" : {
          "usage_count" : {
            "title" : "Promo Code Usage Count",
            "type" : "integer",
            "description" : "Number of times promo code has been used",
            "x-ballerina-name" : "usageCount"
          },
          "code" : {
            "title" : "Promo Code",
            "type" : "string",
            "description" : "The discount code. Restricted to UTF-8 characters with max length 50",
            "example" : "summersale"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Promo Code Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo Code",
            "readOnly" : true
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "redemption_url" : {
            "title" : "Redemption Url",
            "type" : "string",
            "description" : "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000",
            "example" : "A url that applies promo code directly at checkout or a url that points to sale page or store url",
            "x-ballerina-name" : "redemptionUrl"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo code is currently enabled",
            "example" : true
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Code"
      },
      "ABTestOptions2" : {
        "title" : "A/B Test Options",
        "type" : "object",
        "properties" : {
          "send_times" : {
            "title" : "Send Times",
            "type" : "array",
            "description" : "The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            },
            "x-ballerina-name" : "sendTimes"
          },
          "combinations" : {
            "title" : "Combinations",
            "type" : "array",
            "description" : "Combinations of possible variables used to build emails",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ABTestOptions1Combinations"
            }
          },
          "wait_time" : {
            "title" : "Wait Time",
            "type" : "integer",
            "description" : "The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes",
            "x-ballerina-name" : "waitTime"
          },
          "subject_lines" : {
            "title" : "Subject Lines",
            "type" : "array",
            "description" : "The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "subjectLines"
          },
          "contents" : {
            "title" : "Content Descriptions",
            "type" : "array",
            "description" : "Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "test_size" : {
            "title" : "Test Size",
            "type" : "integer",
            "description" : "The percentage of recipients to send the test combinations to, must be a value between 10 and 100",
            "x-ballerina-name" : "testSize"
          },
          "winning_combination_id" : {
            "title" : "Winning Combination ID",
            "type" : "string",
            "description" : "ID for the winning combination",
            "readOnly" : true,
            "x-ballerina-name" : "winningCombinationId"
          },
          "reply_to_addresses" : {
            "title" : "Reply To Addresses",
            "type" : "array",
            "description" : "The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "replyToAddresses"
          },
          "winner_criteria" : {
            "title" : "Winning Criteria",
            "type" : "string",
            "description" : "The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application",
            "enum" : [ "opens", "clicks", "manual", "total_revenue" ],
            "x-ballerina-name" : "winnerCriteria"
          },
          "winning_campaign_id" : {
            "title" : "Winning Campaign ID",
            "type" : "string",
            "description" : "ID of the campaign that was sent to the remaining recipients based on the winning combination",
            "readOnly" : true,
            "x-ballerina-name" : "winningCampaignId"
          },
          "from_names" : {
            "title" : "From Names",
            "type" : "array",
            "description" : "The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "fromNames"
          }
        },
        "description" : "The settings specific to A/B test campaigns"
      },
      "ABTestOptions1" : {
        "title" : "A/B Test Options",
        "required" : [ "winner_criteria" ],
        "type" : "object",
        "properties" : {
          "send_times" : {
            "title" : "Send Times",
            "type" : "array",
            "description" : "The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            },
            "x-ballerina-name" : "sendTimes"
          },
          "combinations" : {
            "title" : "Combinations",
            "type" : "array",
            "description" : "Combinations of possible variables used to build emails",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ABTestOptions1Combinations"
            }
          },
          "wait_time" : {
            "title" : "Wait Time",
            "type" : "integer",
            "description" : "The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes",
            "x-ballerina-name" : "waitTime"
          },
          "subject_lines" : {
            "title" : "Subject Lines",
            "type" : "array",
            "description" : "The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "subjectLines"
          },
          "contents" : {
            "title" : "Content Descriptions",
            "type" : "array",
            "description" : "Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "test_size" : {
            "title" : "Test Size",
            "type" : "integer",
            "description" : "The percentage of recipients to send the test combinations to, must be a value between 10 and 100",
            "x-ballerina-name" : "testSize"
          },
          "winning_combination_id" : {
            "title" : "Winning Combination ID",
            "type" : "string",
            "description" : "ID for the winning combination",
            "readOnly" : true,
            "x-ballerina-name" : "winningCombinationId"
          },
          "reply_to_addresses" : {
            "title" : "Reply To Addresses",
            "type" : "array",
            "description" : "The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "replyToAddresses"
          },
          "winner_criteria" : {
            "title" : "Winning Criteria",
            "type" : "string",
            "description" : "The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application",
            "enum" : [ "opens", "clicks", "manual", "total_revenue" ],
            "x-ballerina-name" : "winnerCriteria"
          },
          "winning_campaign_id" : {
            "title" : "Winning Campaign ID",
            "type" : "string",
            "description" : "ID of the campaign that was sent to the remaining recipients based on the winning combination",
            "readOnly" : true,
            "x-ballerina-name" : "winningCampaignId"
          },
          "from_names" : {
            "title" : "From Names",
            "type" : "array",
            "description" : "The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "fromNames"
          }
        },
        "description" : "The settings specific to A/B test campaigns"
      },
      "ECommercePromoRule2" : {
        "title" : "E-commerce Promo Rule",
        "type" : "object",
        "properties" : {
          "starts_at" : {
            "title" : "Promo Start Time",
            "type" : "string",
            "description" : "The date and time when the promotion is in effect in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startsAt"
          },
          "amount" : {
            "title" : "Amount",
            "type" : "number",
            "description" : "The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive",
            "format" : "float",
            "example" : 0.5
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a promotion restricted to UTF-8 characters with max length 255",
            "example" : "Save BIG during our summer sale!"
          },
          "ends_at" : {
            "title" : "End Time",
            "type" : "string",
            "description" : "The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format",
            "format" : "Promo date-time",
            "x-ballerina-name" : "endsAt"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes",
            "example" : "50% off Total Order"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo rule is currently enabled",
            "example" : true
          },
          "target" : {
            "title" : "Target",
            "type" : "string",
            "description" : "The target that the discount applies to",
            "enum" : [ "per_item", "total", "shipping" ]
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Rule"
      },
      "ECommercePromoRule1" : {
        "title" : "E-commerce Promo Rule",
        "type" : "object",
        "properties" : {
          "starts_at" : {
            "title" : "Promo Start Time",
            "type" : "string",
            "description" : "The date and time when the promotion is in effect in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startsAt"
          },
          "amount" : {
            "title" : "Amount",
            "type" : "number",
            "description" : "The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive",
            "format" : "float",
            "example" : 0.5
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a promotion restricted to UTF-8 characters with max length 255",
            "example" : "Save BIG during our summer sale!"
          },
          "id" : {
            "title" : "Promo Rule Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50",
            "readOnly" : true
          },
          "ends_at" : {
            "title" : "End Time",
            "type" : "string",
            "description" : "The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format",
            "format" : "Promo date-time",
            "x-ballerina-name" : "endsAt"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes",
            "example" : "50% off Total Order"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo rule is currently enabled",
            "example" : true
          },
          "target" : {
            "title" : "Target",
            "type" : "string",
            "description" : "The target that the discount applies to",
            "enum" : [ "per_item", "total", "shipping" ]
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Rule"
      },
      "InlineResponse20013InlineResponse20013InlineResponse20013AllOf123" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "$ref" : "#/components/schemas/InlineResponse20011Audience"
          },
          "channel" : {
            "$ref" : "#/components/schemas/InlineResponse20011Channel"
          },
          "audience_activity" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013AudienceActivity"
            } ],
            "x-ballerina-name" : "audienceActivity"
          },
          "budget" : {
            "$ref" : "#/components/schemas/InlineResponse20011Budget"
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "MemberActivityEvents1" : {
        "title" : "Member Activity Events",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "activity" : {
            "title" : "Activity",
            "type" : "array",
            "description" : "An array of objects, each representing a contact event. There are multiple possible types, see the [activity schema documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#activity-schemas)",
            "readOnly" : true,
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Email Opens",
                "description" : "Activity feed item representing opening an email.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "open",
                    "enum" : [ "open" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the campaign."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Clicks",
                "description" : "Activity feed item representing having a link clicked by a contact.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "click",
                    "enum" : [ "click" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the campaign."
                  },
                  "link_clicked" : {
                    "type" : "string",
                    "title" : "Link Clicked",
                    "description" : "The URL of the link that was clicked."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Bounced",
                "description" : "Activity feed item representing an email to this contact bouncing.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "bounce",
                    "enum" : [ "bounce" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the campaign."
                  },
                  "bounce_type" : {
                    "type" : "string",
                    "title" : "Bounce Type",
                    "description" : "The type of bounce.",
                    "enum" : [ "hard", "soft" ]
                  },
                  "bounce_has_open_activity" : {
                    "type" : "boolean",
                    "title" : "Bounce Has Open Activity",
                    "description" : "Indicates if the email associated with this bounce also has open activity on the same campaign."
                  }
                }
              }, {
                "type" : "object",
                "title" : "List Unsubscribed",
                "description" : "Activity feed item representing this contact unsubscribing from a list.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "unsub",
                    "enum" : [ "unsub" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Text",
                    "description" : "The title of the campaign."
                  },
                  "is_admin_unsubscribed" : {
                    "type" : "boolean",
                    "title" : "Is Admin Unsubscribed",
                    "description" : "Indicates if an admin unsubscribed a contact."
                  },
                  "unsubscribe_reason" : {
                    "type" : "string",
                    "title" : "Unsubscribe Reason",
                    "description" : "Indicates the reason that the contact was unsubscribed."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Sent",
                "description" : "Activity feed item representing having an email sent to the contact.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "sent",
                    "enum" : [ "sent" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the campaign."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Conversation",
                "description" : "Activity feed item representing an individual reply in a conversation.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "conversation",
                    "enum" : [ "conversation" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the campaign."
                  },
                  "thread_id" : {
                    "type" : "string",
                    "title" : "Thread ID",
                    "description" : "The thread's unique id of the conversation referenced in this event."
                  },
                  "message_text" : {
                    "type" : "string",
                    "title" : "Message Text",
                    "description" : "The body of the message in this conversation."
                  },
                  "created_by" : {
                    "type" : "string",
                    "title" : "Created By",
                    "description" : "The username of the person who created this event."
                  },
                  "is_user" : {
                    "type" : "boolean",
                    "title" : "Is User",
                    "description" : "Indicates that the message created by a user (as opposed to a contact)."
                  },
                  "has_read" : {
                    "type" : "boolean",
                    "title" : "Has Read",
                    "description" : "Indicates that the message has been read."
                  },
                  "from_email" : {
                    "type" : "string",
                    "title" : "From Email",
                    "description" : "The email of the contact who sent the reply."
                  },
                  "avatar_url" : {
                    "type" : "string",
                    "title" : "Avatar URL",
                    "description" : "The gravatar URL of the contact who sent the reply."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Note",
                "description" : "Activity feed item representing a note on the contact record.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "note",
                    "enum" : [ "note" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "updated_at_timestamp" : {
                    "type" : "string",
                    "title" : "Updated At Timestamp",
                    "format" : "date-time",
                    "description" : "The updated at timestamp in ISO8601."
                  },
                  "note_id" : {
                    "type" : "string",
                    "title" : "Note ID",
                    "description" : "The note's unique id."
                  },
                  "note_text" : {
                    "type" : "string",
                    "title" : "Note Text",
                    "description" : "The note's text."
                  },
                  "created_by" : {
                    "type" : "string",
                    "title" : "Created By",
                    "description" : "The person who created the note."
                  },
                  "avatar_url" : {
                    "type" : "string",
                    "title" : "Avatar URL",
                    "description" : "The URL of the contact's profile gravatar image."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Marketing Permission",
                "description" : "Activity feed item indicating if a marketing permission was added or updated.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "marketing_permission",
                    "enum" : [ "marketing_permission" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "marketing_permission_text" : {
                    "type" : "string",
                    "title" : "Marketing Permission Text",
                    "description" : "The text describing this marketing permission."
                  },
                  "updated_by" : {
                    "type" : "string",
                    "title" : "Updated By",
                    "description" : "The name of the contact who updated this permission."
                  },
                  "marketing_permission_opted_in" : {
                    "type" : "boolean",
                    "title" : "Marketing Permission Opted In",
                    "description" : "Indicates if the marketing permission is enabled or not."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Postcard Sent",
                "description" : "Activity feed item representing a time when a contact was sent a particular postcard.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "postcard_sent",
                    "enum" : [ "postcard_sent" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "outreach_id" : {
                    "type" : "string",
                    "title" : "Outreach ID",
                    "description" : "The outreach's unique id."
                  },
                  "outreach_title" : {
                    "type" : "string",
                    "title" : "Outreach Title",
                    "description" : "The title of the outreach."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Squatter Signup",
                "description" : "Activity feed item to representing a contact signing up for the audience from a squatter page.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "squatter_signup",
                    "enum" : [ "squatter_signup" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "outreach_id" : {
                    "type" : "string",
                    "title" : "Outreach ID",
                    "description" : "The outreach's unique id."
                  },
                  "outreach_title" : {
                    "type" : "string",
                    "title" : "Outreach Title",
                    "description" : "The title of the outreach."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Website Signup",
                "description" : "Activity feed item to representing a contact signing up for the contact through a website page.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "website_signup",
                    "enum" : [ "website_signup" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "outreach_id" : {
                    "type" : "string",
                    "title" : "Outreach ID",
                    "description" : "The outreach's unique id."
                  },
                  "outreach_title" : {
                    "type" : "string",
                    "title" : "Outreach Title",
                    "description" : "The title of the outreach."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Landing Page Signup",
                "description" : "Activity feed item to representing a contact signing up for the list via a landing page.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "landing_page_signup",
                    "enum" : [ "landing_page_signup" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "outreach_id" : {
                    "type" : "string",
                    "title" : "Outreach ID",
                    "description" : "The outreach's unique id."
                  },
                  "outreach_title" : {
                    "type" : "string",
                    "title" : "Outreach Title",
                    "description" : "The title of the outreach."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Signup",
                "description" : "Activity feed item to representing a contact signing up for the list via a ecommerce store.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "ecommerce_signup",
                    "enum" : [ "ecommerce_signup" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "store_name" : {
                    "type" : "string",
                    "title" : "Store Name",
                    "description" : "The name of the store."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Generic Signup",
                "description" : "Activity feed item that represents a contact signing up for the audience via a generic some generic method (specifically, one we can't link to).",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "generic_signup",
                    "enum" : [ "generic_signup" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "signup_category" : {
                    "type" : "string",
                    "title" : "Signup Category",
                    "description" : "How was this user added to the list."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Order",
                "description" : "Activity feed item that represents an order.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "order",
                    "enum" : [ "order" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "outreach_id" : {
                    "type" : "string",
                    "title" : "Outreach ID",
                    "description" : "The outreach's unique id."
                  },
                  "outreach_type" : {
                    "type" : "string",
                    "title" : "Outreach Type",
                    "description" : "The type of outreach that triggered the event."
                  },
                  "outreach_title" : {
                    "type" : "string",
                    "title" : "Outreach Title",
                    "description" : "The title of the outreach."
                  },
                  "order_id" : {
                    "type" : "string",
                    "title" : "Order ID",
                    "description" : "The unique order id."
                  },
                  "order_total" : {
                    "type" : "string",
                    "title" : "Order Total",
                    "description" : "The order total formatted as a string."
                  },
                  "order_items" : {
                    "type" : "array",
                    "title" : "Order Items",
                    "description" : "An array of items that have been ordered.",
                    "items" : {
                      "type" : "object",
                      "title" : "E-commerce Order Line Item",
                      "description" : "Information about a specific order line.",
                      "properties" : {
                        "id" : {
                          "type" : "string",
                          "title" : "Order Line Item Foreign ID",
                          "description" : "A unique identifier for an order line item.",
                          "readOnly" : true
                        },
                        "product_id" : {
                          "type" : "string",
                          "title" : "Order Line Item Product Foreign ID",
                          "description" : "A unique identifier for the product associated with an order line item."
                        },
                        "product_title" : {
                          "type" : "string",
                          "title" : "Order Line Item Product Title",
                          "description" : "The name of the product for an order line item.",
                          "readOnly" : true
                        },
                        "product_variant_id" : {
                          "type" : "string",
                          "title" : "Order Line Item Product Variant Foreign ID",
                          "description" : "A unique identifier for the product variant associated with an order line item."
                        },
                        "product_variant_title" : {
                          "type" : "string",
                          "title" : "Order Line Item Product Variant Title",
                          "description" : "The name of the product variant for an order line item.",
                          "readOnly" : true
                        },
                        "image_url" : {
                          "type" : "string",
                          "title" : "Product Image URL",
                          "description" : "The image URL for a product.",
                          "readOnly" : true
                        },
                        "quantity" : {
                          "type" : "integer",
                          "title" : "Quantity",
                          "description" : "The order line item quantity."
                        },
                        "price" : {
                          "type" : "number",
                          "title" : "Price",
                          "description" : "The order line item price."
                        },
                        "discount" : {
                          "type" : "number",
                          "title" : "Discount",
                          "description" : "The total discount amount applied to a line item."
                        },
                        "_links" : {
                          "title" : "Links",
                          "description" : "A list of link types and descriptions for the API schema documents.",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "title" : "Resource Link",
                            "description" : "This object represents a link from the resource where it is found to another resource or action that may be performed.",
                            "properties" : {
                              "rel" : {
                                "type" : "string",
                                "title" : "Rel",
                                "description" : "As with an HTML 'rel' attribute, this describes the type of link.",
                                "readOnly" : true
                              },
                              "href" : {
                                "type" : "string",
                                "title" : "Href",
                                "description" : "This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action.",
                                "readOnly" : true
                              },
                              "method" : {
                                "type" : "string",
                                "title" : "Method",
                                "description" : "The HTTP method that should be used when accessing the URL defined in 'href'.",
                                "enum" : [ "GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD" ],
                                "readOnly" : true
                              },
                              "targetSchema" : {
                                "type" : "string",
                                "title" : "Target Schema",
                                "description" : "For GETs, this is a URL representing the schema that the response should conform to.",
                                "readOnly" : true
                              },
                              "schema" : {
                                "type" : "string",
                                "title" : "Schema",
                                "description" : "For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to.",
                                "readOnly" : true
                              }
                            }
                          },
                          "readOnly" : true
                        }
                      }
                    }
                  },
                  "store_name" : {
                    "type" : "string",
                    "title" : "Store Name",
                    "description" : "The name of the store for an order."
                  },
                  "order_url" : {
                    "type" : "string",
                    "title" : "Order URL",
                    "description" : "The order URL."
                  },
                  "integration_platform" : {
                    "type" : "string",
                    "title" : "Integration Platform",
                    "description" : "The name of the integration platform this order originated through."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Contact Activity Event",
                "description" : "Activity feed item that represents a generic event.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "event",
                    "enum" : [ "event" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "event_name" : {
                    "type" : "string",
                    "title" : "Event Name",
                    "description" : "The name of the event."
                  },
                  "event_properties" : {
                    "type" : "array",
                    "title" : "Event Properties",
                    "items" : {
                      "x-skip-validation" : true,
                      "type" : "string"
                    },
                    "description" : "An arbitrary datastore containing properties for the given event."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey response",
                "description" : "Represents when a contact completes and submits a survey",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "survey_response",
                    "enum" : [ "survey_response" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "survey_id" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The survey's unique id."
                  },
                  "survey_title" : {
                    "type" : "string",
                    "title" : "Survey Title",
                    "description" : "The title of the survey."
                  }
                }
              }, {
                "type" : "object",
                "title" : "SMS Bulk Sent",
                "description" : "Activity feed item representing an SMS campaign sent to the contact.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "sms_bulk_sent",
                    "enum" : [ "sms_bulk_sent" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "campaign_id" : {
                    "type" : "string",
                    "title" : "Campaign ID",
                    "description" : "The campaign's unique id."
                  },
                  "campaign_title" : {
                    "type" : "string",
                    "title" : "Campaign Title",
                    "description" : "The title of the SMS campaign."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Inbox Thread",
                "description" : "Activity feed item representing a thread located in Inbox.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "inbox_thread",
                    "enum" : [ "inbox_thread" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "id" : {
                    "type" : "string",
                    "title" : "Thread ID",
                    "description" : "The ID of the thread."
                  },
                  "thread_subject" : {
                    "type" : "string",
                    "title" : "Thread Subject",
                    "description" : "The subject of the thread."
                  },
                  "thread_url" : {
                    "type" : "string",
                    "title" : "Thread URL",
                    "description" : "The url of the thread."
                  },
                  "thread_direction" : {
                    "type" : "string",
                    "title" : "Thread Direction",
                    "description" : "The direction of the message noting if it is outbound or inbound.",
                    "enum" : [ "INBOUND", "OUTBOUND" ]
                  },
                  "thread_author" : {
                    "type" : "string",
                    "title" : "Thread Author",
                    "description" : "The author of the thread."
                  }
                }
              }, {
                "type" : "object",
                "title" : "QBO Payment Link",
                "description" : "Activity feed item representing a payment link from QBO.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "qbo_payment_link",
                    "enum" : [ "qbo_payment_link" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "id" : {
                    "type" : "string",
                    "title" : "id",
                    "description" : "The QuickBooks payment link id."
                  },
                  "qbo_payment_external_id" : {
                    "type" : "string",
                    "title" : "QBO Payment External ID",
                    "description" : "The external QuickBooks payment id."
                  },
                  "integration_platform" : {
                    "type" : "string",
                    "title" : "Integration Platform",
                    "description" : "The platform Mailchimp is integrated with.",
                    "enum" : [ "quickbooks" ]
                  }
                }
              }, {
                "type" : "object",
                "title" : "Video Call Transcripts",
                "description" : "Activity feed item representing a video call transcript.",
                "properties" : {
                  "activity_type" : {
                    "type" : "string",
                    "description" : "The type of event activity.",
                    "x-value" : "video_call_transcripts",
                    "enum" : [ "video_call_transcripts" ]
                  },
                  "created_at_timestamp" : {
                    "type" : "string",
                    "title" : "Created At Timestamp",
                    "format" : "date-time",
                    "description" : "The created at timestamp in ISO8601."
                  },
                  "id" : {
                    "type" : "string",
                    "title" : "id",
                    "description" : "The id for video call transcripts."
                  },
                  "scheduled_meeting_start_timestamp" : {
                    "type" : "string",
                    "title" : "Scheduled Meeting Start Timestamp",
                    "format" : "date-time",
                    "description" : "The Scheduled Meeting Start timestamp in ISO8601."
                  },
                  "expire_at_timestamp" : {
                    "type" : "string",
                    "title" : "Expire At Timestamp",
                    "format" : "date-time",
                    "description" : "The Expire At timestamp in ISO8601."
                  }
                }
              } ],
              "x-discriminator" : {
                "propertyName" : "activity_type",
                "type" : "string"
              }
            }
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        },
        "description" : "The member activity events for a given member",
        "x-hidden" : false
      },
      "ShippingAddress1" : {
        "title" : "Shipping Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country",
            "type" : "string",
            "description" : "The country in the shipping address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the shipping address"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the order's shipping address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The shipping address for the order",
            "example" : "405 N Angier Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the shipping address location",
            "example" : 33.768526
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province or state in the shipping address",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the shipping address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the order's shipping address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the order's shipping address",
            "example" : "+16155550128"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with an order's shipping address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with the shipping address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the shipping address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the shipping address location",
            "example" : -84.362887
          }
        },
        "description" : "The shipping address for the order"
      },
      "SegmentMembers" : {
        "title" : "Segment Members",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "members" : {
            "title" : "Members",
            "type" : "array",
            "description" : "An array of objects, each representing a specific list member",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "View members in a specific list segment"
      },
      "BatchWebhook" : {
        "title" : "Batch Webhook",
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "example" : "http://yourdomain.com/webhook"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the webhook receives requests or not",
            "example" : true
          }
        },
        "description" : "Add a new Batch Webook"
      },
      "ShippingAddress2" : {
        "title" : "Shipping Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The country in the order's shipping address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the shipping address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the order's shipping address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The shipping address for the order",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the shipping address location",
            "example" : 45.427408
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province or state the order's shipping address is located in",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the shipping address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the order's shipping address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the order's shipping address",
            "example" : "8675309"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with an order's shipping address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with an order's shipping address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the order's shipping address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the shipping address location",
            "example" : -75.68903
          }
        },
        "description" : "The shipping address for the order"
      },
      "CampaignReports1" : {
        "title" : "Campaign Reports",
        "type" : "object",
        "properties" : {
          "reports" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a report resource",
            "items" : {
              "$ref" : "#/components/schemas/CampaignReport1"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of reports containing campaigns marked as Sent"
      },
      "LandingPage" : {
        "title" : "Landing Page",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The ID of the store associated with this landing page",
            "x-ballerina-name" : "storeId"
          },
          "list_id" : {
            "title" : "Landing Page list id",
            "type" : "string",
            "description" : "The list's ID associated with this landing page",
            "x-ballerina-name" : "listId"
          },
          "name" : {
            "title" : "Landing Page Name",
            "type" : "string",
            "description" : "The name of this landing page"
          },
          "description" : {
            "title" : "Landing Page description",
            "type" : "string",
            "description" : "The description of this landing page"
          },
          "template_id" : {
            "title" : "Landing Page template_id",
            "type" : "integer",
            "description" : "The template_id of this landing page",
            "example" : 1001,
            "x-ballerina-name" : "templateId"
          },
          "title" : {
            "title" : "Landing Page title",
            "type" : "string",
            "description" : "The title of this landing page seen in the browser's title bar"
          },
          "type" : {
            "title" : "Landing Page Template Type",
            "type" : "string",
            "description" : "The type of template the landing page has",
            "example" : "signup",
            "enum" : [ "signup", "product" ]
          },
          "tracking" : {
            "$ref" : "#/components/schemas/TrackingSettings"
          }
        },
        "description" : "A summary of an individual page's properties"
      },
      "FileManager" : {
        "title" : "File Manager",
        "type" : "object",
        "properties" : {
          "total_file_size" : {
            "title" : "Total File Size",
            "type" : "number",
            "description" : "The total size of all File Manager files in bytes",
            "readOnly" : true,
            "x-ballerina-name" : "totalFileSize"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "files" : {
            "title" : "Files",
            "type" : "array",
            "description" : " A list of files and images in an account",
            "items" : {
              "$ref" : "#/components/schemas/GalleryFile3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of available images and files stored in the File Manager for the account"
      },
      "AbandonedCartAutomation" : {
        "title" : "Abandoned Cart Automation",
        "type" : "object",
        "properties" : {
          "is_supported" : {
            "title" : "Is Supported",
            "type" : "boolean",
            "description" : "Whether this store supports the abandonedCart automation",
            "readOnly" : true,
            "example" : false,
            "x-ballerina-name" : "isSupported"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of automation parent campaign",
            "readOnly" : true,
            "example" : "355a72bfc3"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Status of the abandonedCart automation",
            "readOnly" : true,
            "example" : "sending",
            "enum" : [ "save", "sending", "paused" ]
          }
        },
        "description" : "abandonedCart automation details",
        "readOnly" : true
      },
      "InterestGroupings" : {
        "title" : "Interest Groupings",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID for the list that this category belongs to",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "categories" : {
            "title" : "Interest Categories",
            "type" : "array",
            "description" : "This array contains individual interest categories",
            "items" : {
              "$ref" : "#/components/schemas/InterestCategory2"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Information about this list's interest categories"
      },
      "CampaignAdvice" : {
        "title" : "Campaign Advice",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "type" : {
            "title" : "Advice Type",
            "type" : "string",
            "description" : "The sentiment type for a feedback message",
            "readOnly" : true,
            "enum" : [ "negative", "positive", "neutral" ]
          },
          "message" : {
            "title" : "Advice Message",
            "type" : "string",
            "description" : "The advice message",
            "readOnly" : true
          }
        },
        "description" : "Campaign feedback details"
      },
      "TrackedConversations" : {
        "title" : "Tracked Conversations",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "conversations" : {
            "title" : "Conversations",
            "type" : "array",
            "description" : "A list of conversations",
            "items" : {
              "$ref" : "#/components/schemas/Conversation1"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of this account's tracked conversations"
      },
      "InlineResponse20011AudienceTargetingSpecs" : {
        "type" : "object",
        "properties" : {
          "max_age" : {
            "type" : "integer",
            "x-ballerina-name" : "maxAge"
          },
          "gender" : {
            "type" : "integer"
          },
          "locations" : {
            "$ref" : "#/components/schemas/InlineResponse20011AudienceTargetingSpecsLocations"
          },
          "min_age" : {
            "type" : "integer",
            "x-ballerina-name" : "minAge"
          },
          "interests" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20011AudienceTargetingSpecsInterests"
            }
          }
        }
      },
      "InlineResponse2009" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse2009Products"
            }
          }
        },
        "description" : "A collection of ecommerce products"
      },
      "WeeklyClicksAndVisitsData" : {
        "title" : "Weekly clicks and visits data",
        "type" : "object",
        "properties" : {
          "unique_visits" : {
            "title" : "Unique Visits",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DailyClicksAndVisitsDataUniqueVisits"
            },
            "x-ballerina-name" : "uniqueVisits"
          },
          "visits" : {
            "title" : "Visits",
            "type" : "array",
            "description" : "The total number of visits in a week",
            "items" : {
              "$ref" : "#/components/schemas/WeeklyClicksAndVisitsDataVisits"
            }
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "array",
            "description" : "The total number of clicks in a week",
            "items" : {
              "$ref" : "#/components/schemas/WeeklyClicksAndVisitsDataClicks"
            }
          }
        },
        "description" : "The clicks and visits data from the last five weeks",
        "readOnly" : true
      },
      "InlineResponse2008" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "landing_pages" : {
            "type" : "array",
            "description" : "The landing pages on the account",
            "items" : {
              "$ref" : "#/components/schemas/LandingPage3"
            },
            "x-ballerina-name" : "landingPages"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of landing pages"
      },
      "CampaignSubReports" : {
        "title" : "Campaign Sub-Reports",
        "type" : "object",
        "properties" : {
          "reports" : {
            "title" : "Reports",
            "type" : "array",
            "description" : "An array of objects, each representing a report resource",
            "items" : {
              "$ref" : "#/components/schemas/CampaignReport1"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "Unique identifier of the parent campaign",
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of reports containing child campaigns for a specific campaign"
      },
      "InlineResponse20011AudienceTargetingSpecsLocations" : {
        "type" : "object",
        "properties" : {
          "regions" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "cities" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "countries" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "zips" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ReportSummary" : {
        "title" : "Report Summary",
        "type" : "object",
        "properties" : {
          "proxy_excluded_opens" : {
            "type" : "integer",
            "x-ballerina-name" : "proxyExcludedOpens"
          },
          "unique_visits" : {
            "type" : "integer",
            "x-ballerina-name" : "uniqueVisits"
          },
          "subscribes" : {
            "type" : "integer"
          },
          "proxy_excluded_open_rate" : {
            "type" : "number",
            "x-ballerina-name" : "proxyExcludedOpenRate"
          },
          "reach" : {
            "type" : "integer"
          },
          "click_rate" : {
            "type" : "number",
            "x-ballerina-name" : "clickRate"
          },
          "total_sent" : {
            "type" : "integer",
            "x-ballerina-name" : "totalSent"
          },
          "impressions" : {
            "type" : "number"
          },
          "unique_opens" : {
            "type" : "integer",
            "x-ballerina-name" : "uniqueOpens"
          },
          "subscriber_clicks" : {
            "type" : "integer",
            "x-ballerina-name" : "subscriberClicks"
          },
          "visits" : {
            "type" : "integer"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/ReportSummaryEcommerce"
          },
          "opens" : {
            "type" : "integer"
          },
          "proxy_excluded_unique_opens" : {
            "type" : "integer",
            "x-ballerina-name" : "proxyExcludedUniqueOpens"
          },
          "clicks" : {
            "type" : "integer"
          },
          "engagements" : {
            "type" : "integer"
          },
          "conversion_rate" : {
            "type" : "number",
            "x-ballerina-name" : "conversionRate"
          },
          "open_rate" : {
            "type" : "number",
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "High level reporting stats for an outreach"
      },
      "ConnectedSite3" : {
        "title" : "Connected Site",
        "type" : "object",
        "properties" : {
          "site_script" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Script1"
            } ],
            "x-ballerina-name" : "siteScript"
          },
          "site_foreign_id" : {
            "title" : "Connected Site Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the connected site",
            "readOnly" : true,
            "example" : "a180c384d7db88b if created in-app, MC001 if created via API",
            "x-ballerina-name" : "siteForeignId"
          }
        },
        "description" : "The Connected Site associated with the store",
        "readOnly" : true
      },
      "ConnectedSite2" : {
        "title" : "Connected Site",
        "type" : "object",
        "properties" : {
          "foreign_id" : {
            "title" : "Connected Site Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the site",
            "readOnly" : true,
            "example" : "a180c384d7db88b if created in-app, MC001 if created via API",
            "x-ballerina-name" : "foreignId"
          },
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change",
            "readOnly" : true,
            "example" : "MC001",
            "x-ballerina-name" : "storeId"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the connected site was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:35:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The connected site domain",
            "readOnly" : true,
            "example" : "example.myshopify.com"
          },
          "site_script" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Script"
            } ],
            "x-ballerina-name" : "siteScript"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the connected site was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "platform" : {
            "title" : "Connected Site Platform",
            "type" : "string",
            "description" : "The platform of the connected site",
            "readOnly" : true,
            "example" : "shopify, magento, bigcommerce, woocommerce"
          }
        },
        "description" : "Information about a specific connected site"
      },
      "UpdateInformationAboutASpecificWorkflowEmail" : {
        "title" : "Update information about a specific workflow email",
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings"
          },
          "delay" : {
            "$ref" : "#/components/schemas/AutomationDelay"
          }
        },
        "description" : "Update information about an individual Automation workflow email"
      },
      "ConnectedSite1" : {
        "title" : "Connected Site",
        "type" : "object",
        "properties" : {
          "foreign_id" : {
            "title" : "Connected Site Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the site",
            "readOnly" : true,
            "example" : "a180c384d7db88b if created in-app, MC001 if created via API",
            "x-ballerina-name" : "foreignId"
          },
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change",
            "readOnly" : true,
            "example" : "MC001",
            "x-ballerina-name" : "storeId"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the connected site was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:35:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The connected site domain",
            "readOnly" : true,
            "example" : "example.myshopify.com"
          },
          "site_script" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Script"
            } ],
            "x-ballerina-name" : "siteScript"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the connected site was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "platform" : {
            "title" : "Connected Site Platform",
            "type" : "string",
            "description" : "The platform of the connected site",
            "readOnly" : true,
            "example" : "shopify, magento, bigcommerce, woocommerce"
          }
        },
        "description" : "Information about a specific connected site"
      },
      "ECommerceProductVariant" : {
        "title" : "E-commerce Product Variant",
        "required" : [ "id", "title" ],
        "type" : "object",
        "properties" : {
          "inventory_quantity" : {
            "title" : "Inventory Quantity",
            "type" : "integer",
            "description" : "The inventory quantity of a product variant",
            "x-ballerina-name" : "inventoryQuantity"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "The visibility of a product variant"
          },
          "backorders" : {
            "title" : "Backorders",
            "type" : "string",
            "description" : "The backorders of a product variant"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a product variant"
          },
          "image_url" : {
            "title" : "Image URL",
            "type" : "string",
            "description" : "The image URL for a product variant",
            "x-ballerina-name" : "imageUrl"
          },
          "id" : {
            "title" : "Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product variant",
            "example" : "Cat Hat"
          },
          "sku" : {
            "title" : "SKU",
            "type" : "string",
            "description" : "The stock keeping unit (SKU) of a product variant"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product variant"
          }
        },
        "description" : "Information about a specific product variant"
      },
      "SalesforceCRMTracking" : {
        "title" : "Salesforce CRM Tracking",
        "type" : "object",
        "properties" : {
          "notes" : {
            "title" : "Salesforce Note",
            "type" : "boolean",
            "description" : "Update contact notes for a campaign based on subscriber email addresses"
          },
          "campaign" : {
            "title" : "Salesforce Campaign",
            "type" : "boolean",
            "description" : "Create a campaign in a connected Salesforce account"
          }
        },
        "description" : "Deprecated"
      },
      "TemplateInstance" : {
        "title" : "Template Instance",
        "required" : [ "html", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Template Name",
            "type" : "string",
            "description" : "The name of the template",
            "example" : "Freddie's Jokes"
          },
          "html" : {
            "title" : "Template HTML",
            "type" : "string",
            "description" : "The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "The id of the folder the template is currently in",
            "example" : "a4b830b",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "Information about a specific template"
      },
      "ReportSummaryEcommerce" : {
        "type" : "object",
        "properties" : {
          "average_order_revenue" : {
            "type" : "number",
            "x-ballerina-name" : "averageOrderRevenue"
          },
          "total_revenue" : {
            "type" : "number",
            "x-ballerina-name" : "totalRevenue"
          },
          "currency_code" : {
            "type" : "string",
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "CapsuleCRMTracking" : {
        "title" : "Capsule CRM Tracking",
        "type" : "object",
        "properties" : {
          "notes" : {
            "title" : "Capsule Note",
            "type" : "boolean",
            "description" : "Update contact notes for a campaign based on subscriber email addresses"
          }
        },
        "description" : "Deprecated"
      },
      "ConnectedSite" : {
        "title" : "Connected Site",
        "required" : [ "domain", "foreign_id" ],
        "type" : "object",
        "properties" : {
          "foreign_id" : {
            "title" : "Connected Site Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the site",
            "example" : "MC001",
            "x-ballerina-name" : "foreignId"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The connected site domain",
            "example" : "example.com"
          }
        },
        "description" : "Information about a specific connected site"
      },
      "ABSplitStats" : {
        "title" : "A/B Split Stats",
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/CampaignA"
          },
          "b" : {
            "$ref" : "#/components/schemas/CampaignB"
          }
        },
        "description" : "General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns"
      },
      "AutomationTrackingOptions" : {
        "title" : "Automation Tracking Options",
        "type" : "object",
        "properties" : {
          "salesforce" : {
            "$ref" : "#/components/schemas/SalesforceCRMTracking1"
          },
          "goal_tracking" : {
            "title" : "Mailchimp Goal Tracking",
            "type" : "boolean",
            "description" : "Deprecated",
            "x-ballerina-name" : "goalTracking"
          },
          "capsule" : {
            "$ref" : "#/components/schemas/CapsuleCRMTracking2"
          },
          "clicktale" : {
            "title" : "ClickTale Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)"
          },
          "text_clicks" : {
            "title" : "Plain-Text Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`",
            "x-ballerina-name" : "textClicks"
          },
          "ecomm360" : {
            "title" : "E-commerce Tracking",
            "type" : "boolean",
            "description" : "Whether to enable e-commerce tracking"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "boolean",
            "description" : "Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`"
          },
          "google_analytics" : {
            "title" : "Google Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)",
            "x-ballerina-name" : "googleAnalytics"
          },
          "html_clicks" : {
            "title" : "HTML Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`",
            "x-ballerina-name" : "htmlClicks"
          }
        },
        "description" : "The tracking options for the Automation"
      },
      "VerifiedDomains2" : {
        "title" : "Verified Domains",
        "required" : [ "verification_email" ],
        "type" : "object",
        "properties" : {
          "verification_email" : {
            "title" : "Verification Email",
            "type" : "string",
            "description" : "The e-mail address at the domain you want to verify. This will receive a two-factor challenge to be used in the verify action",
            "x-ballerina-name" : "verificationEmail"
          }
        },
        "description" : "The verified domains currently on the account"
      },
      "VerifiedDomains1" : {
        "title" : "Verified Domains",
        "type" : "object",
        "properties" : {
          "domains" : {
            "title" : "Domains",
            "type" : "array",
            "description" : "The domains on the account",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/VerifiedDomains"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "The verified domains currently on the account"
      },
      "ToNonOpeners" : {
        "title" : "To Non-Openers",
        "type" : "object",
        "properties" : {
          "reason" : {
            "title" : "Reason",
            "type" : "string",
            "description" : "The reason the campaign is not eligible to be resent to this segment",
            "readOnly" : true
          },
          "is_eligible" : {
            "title" : "Is Eligible",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to this segment",
            "readOnly" : true,
            "x-ballerina-name" : "isEligible"
          }
        },
        "description" : "Determines if the campaign qualifies to be resent to non-openers"
      },
      "Sources1" : {
        "title" : "Sources",
        "type" : "object",
        "properties" : {
          "admin" : {
            "title" : "Admin",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by admin-initiated actions in the web interface",
            "example" : true
          },
          "api" : {
            "title" : "API",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by actions initiated via the API",
            "example" : true
          },
          "user" : {
            "title" : "User",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by subscriber-initiated actions",
            "example" : true
          }
        },
        "description" : "The possible sources of any events that can trigger the webhook and whether they are enabled",
        "readOnly" : true
      },
      "SubscriberInAutomationQueue" : {
        "title" : "Subscriber in Automation Queue",
        "required" : [ "email_address" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          }
        },
        "description" : "Information about subscribers in an Automation email queue"
      },
      "TagSearchResults" : {
        "title" : "Tag search results",
        "type" : "object",
        "properties" : {
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "A list of matching tags",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/TagSearchResultsTags"
            }
          }
        },
        "description" : "A list of tags matching the input query"
      },
      "EmailActivity" : {
        "title" : "Email Activity",
        "type" : "object",
        "properties" : {
          "emails" : {
            "title" : "Sent To",
            "type" : "array",
            "description" : "An array of members that were sent the campaign",
            "items" : {
              "$ref" : "#/components/schemas/EmailActivity2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the sent campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of member's subscriber activity in a specific campaign"
      },
      "CollectionOfMergeFields" : {
        "title" : "Collection of Merge Fields",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "array",
            "description" : "An array of objects, each representing a merge field resource",
            "items" : {
              "$ref" : "#/components/schemas/MergeField3"
            },
            "x-ballerina-name" : "mergeFields"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "The [merge fields](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience"
      },
      "Statistics" : {
        "title" : "Statistics",
        "type" : "object",
        "properties" : {
          "cleaned_count" : {
            "title" : "Cleaned Count",
            "type" : "integer",
            "description" : "The number of members cleaned from the list",
            "readOnly" : true,
            "x-ballerina-name" : "cleanedCount"
          },
          "unsubscribe_count_since_send" : {
            "title" : "Unsubscribe Count Since Send",
            "type" : "integer",
            "description" : "The number of members who have unsubscribed since the last campaign was sent",
            "readOnly" : true,
            "x-ballerina-name" : "unsubscribeCountSinceSend"
          },
          "member_count_since_send" : {
            "title" : "Member Count Since Send",
            "type" : "integer",
            "description" : "The number of active members in the list since the last campaign was sent",
            "readOnly" : true,
            "x-ballerina-name" : "memberCountSinceSend"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet)",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "cleaned_count_since_send" : {
            "title" : "Cleaned Count Since Send",
            "type" : "integer",
            "description" : "The number of members cleaned from the list since the last campaign was sent",
            "readOnly" : true,
            "x-ballerina-name" : "cleanedCountSinceSend"
          },
          "total_contacts" : {
            "title" : "Total Contacts",
            "type" : "integer",
            "description" : "The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included",
            "readOnly" : true,
            "x-ballerina-name" : "totalContacts"
          },
          "campaign_count" : {
            "title" : "Campaign Count",
            "type" : "integer",
            "description" : "The number of campaigns in any status that use this list",
            "readOnly" : true,
            "x-ballerina-name" : "campaignCount"
          },
          "avg_unsub_rate" : {
            "title" : "Average Unsubscription Rate",
            "type" : "number",
            "description" : "The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet)",
            "readOnly" : true,
            "x-ballerina-name" : "avgUnsubRate"
          },
          "last_sub_date" : {
            "title" : "Date of Last List Subscribe",
            "type" : "string",
            "description" : "The date and time of the last time someone subscribed to this list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastSubDate"
          },
          "unsubscribe_count" : {
            "title" : "Unsubscribe Count",
            "type" : "integer",
            "description" : "The number of members who have unsubscribed from the list",
            "readOnly" : true,
            "x-ballerina-name" : "unsubscribeCount"
          },
          "target_sub_rate" : {
            "title" : "Average Subscription Rate",
            "type" : "number",
            "description" : "The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet)",
            "readOnly" : true,
            "x-ballerina-name" : "targetSubRate"
          },
          "campaign_last_sent" : {
            "title" : "Campaign Last Sent",
            "type" : "string",
            "description" : "The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "campaignLastSent"
          },
          "avg_sub_rate" : {
            "title" : "Average Subscription Rate",
            "type" : "number",
            "description" : "The average number of subscriptions per month for the list (not returned if we haven't calculated it yet)",
            "readOnly" : true,
            "x-ballerina-name" : "avgSubRate"
          },
          "member_count" : {
            "title" : "Member Count",
            "type" : "integer",
            "description" : "The number of active members in the list",
            "readOnly" : true,
            "x-ballerina-name" : "memberCount"
          },
          "merge_field_count" : {
            "title" : "Merge Field Count",
            "type" : "integer",
            "description" : "The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL)",
            "readOnly" : true,
            "x-ballerina-name" : "mergeFieldCount"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet)",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          },
          "last_unsub_date" : {
            "title" : "Date of Last List Unsubscribe",
            "type" : "string",
            "description" : "The date and time of the last time someone unsubscribed from this list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastUnsubDate"
          }
        },
        "description" : "Stats for the list. Many of these are cached for at least five minutes",
        "readOnly" : true
      },
      "Unsubscribes" : {
        "title" : "Unsubscribes",
        "type" : "object",
        "properties" : {
          "unsubscribes" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a member who unsubscribed from a campaign",
            "items" : {
              "$ref" : "#/components/schemas/Unsubscribes2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of members who have unsubscribed from a specific campaign"
      },
      "EcommercestoresstoreIdordersPromos" : {
        "required" : [ "amount_discounted", "code", "type" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "title" : "Code",
            "type" : "string",
            "description" : "The Promo Code"
          },
          "amount_discounted" : {
            "title" : "Amount Discounted",
            "type" : "number",
            "description" : "The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0",
            "x-ballerina-name" : "amountDiscounted"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          }
        }
      },
      "InlineResponse2001" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "exports" : {
            "title" : "Account Exports",
            "type" : "array",
            "description" : "An array of objects, each representing an account export",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse2001Exports"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "An array of objects, each representing an account export"
      },
      "RSSOptions" : {
        "title" : "RSS Options",
        "required" : [ "feed_url", "frequency" ],
        "type" : "object",
        "properties" : {
          "schedule" : {
            "$ref" : "#/components/schemas/SendingSchedule"
          },
          "constrain_rss_img" : {
            "title" : "Constrain RSS Images",
            "type" : "boolean",
            "description" : "Whether to add CSS to images in the RSS feed to constrain their width in campaigns",
            "x-ballerina-name" : "constrainRssImg"
          },
          "feed_url" : {
            "title" : "Feed URL",
            "type" : "string",
            "description" : "The URL for the RSS feed",
            "format" : "uri",
            "x-ballerina-name" : "feedUrl"
          },
          "frequency" : {
            "title" : "Frequency",
            "type" : "string",
            "description" : "The frequency of the RSS Campaign",
            "enum" : [ "daily", "weekly", "monthly" ]
          }
        },
        "description" : "[RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options, specific to an RSS campaign"
      },
      "InlineResponse2003" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "apps" : {
            "title" : "Authorized Applications",
            "type" : "array",
            "description" : "An array of objects, each representing an authorized application",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse2003Apps"
            }
          }
        },
        "description" : "An array of objects, each representing an authorized application"
      },
      "InlineResponse2002" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "size_in_bytes" : {
            "title" : "Export Size",
            "type" : "integer",
            "description" : "The size of the uncompressed export in bytes",
            "x-ballerina-name" : "sizeInBytes"
          },
          "download_url" : {
            "title" : "Download URL",
            "type" : "string",
            "description" : "If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes",
            "x-ballerina-name" : "downloadUrl"
          },
          "started" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "Start time for the export",
            "format" : "date-time"
          },
          "finished" : {
            "title" : "Finish Time",
            "type" : "string",
            "description" : "If finished, the finish time for the export",
            "format" : "date-time"
          },
          "export_id" : {
            "title" : "Export ID",
            "type" : "integer",
            "description" : "The ID for the export",
            "x-ballerina-name" : "exportId"
          }
        },
        "description" : "An account export"
      },
      "Clicks" : {
        "title" : "Clicks",
        "type" : "object",
        "properties" : {
          "clicks_total" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of clicks for the campaign",
            "x-ballerina-name" : "clicksTotal"
          },
          "unique_clicks" : {
            "title" : "Unique Clicks",
            "type" : "integer",
            "description" : "The total number of unique clicks for links across a campaign",
            "x-ballerina-name" : "uniqueClicks"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The number of unique clicks divided by the total number of successful deliveries",
            "x-ballerina-name" : "clickRate"
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The date and time of the last recorded click for the campaign in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastClick"
          },
          "unique_subscriber_clicks" : {
            "title" : "Unique Subscriber Clicks",
            "type" : "integer",
            "description" : "The total number of subscribers who clicked on a campaign",
            "x-ballerina-name" : "uniqueSubscriberClicks"
          }
        },
        "description" : "An object describing the click activity for the campaign"
      },
      "InlineResponse2005" : {
        "type" : "object",
        "properties" : {
          "automations" : {
            "title" : "Automation Workflows",
            "type" : "array",
            "description" : "An array of objects, each representing an Automation workflow",
            "items" : {
              "$ref" : "#/components/schemas/AutomationWorkflow2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "An array of objects, each representing an Automation workflow"
      },
      "InlineResponse2004" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Application Name",
            "type" : "string",
            "description" : "The name of the application"
          },
          "description" : {
            "title" : "Application Description",
            "type" : "string",
            "description" : "A short description of the application"
          },
          "id" : {
            "title" : "Client ID",
            "type" : "integer",
            "description" : "The ID for the application"
          },
          "users" : {
            "title" : "Application Users",
            "type" : "array",
            "description" : "An array of usernames for users who have linked the app",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "An authorized app"
      },
      "InlineResponse2007" : {
        "type" : "object",
        "properties" : {
          "campaigns" : {
            "title" : "Campaigns",
            "type" : "array",
            "description" : "An array of campaigns",
            "items" : {
              "$ref" : "#/components/schemas/Campaign4"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "An array of campaigns"
      },
      "SalesforceCRMTracking1" : {
        "title" : "Salesforce CRM Tracking",
        "type" : "object",
        "properties" : {
          "notes" : {
            "title" : "Salesforce Note",
            "type" : "boolean",
            "description" : "Update contact notes for a campaign based on a subscriber's email address"
          },
          "campaign" : {
            "title" : "Salesforce Campaign",
            "type" : "boolean",
            "description" : "Create a campaign in a connected Salesforce account"
          }
        },
        "description" : "Deprecated"
      },
      "InlineResponse2006" : {
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Automation Email ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an email in an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "queue" : {
            "title" : "Trigger",
            "type" : "array",
            "description" : "An array of objects, each representing a subscriber queue for an email in an Automation workflow",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/SubscriberInAutomationQueue2"
            }
          }
        },
        "description" : "An automation workflow"
      },
      "CampaignAdviceReport" : {
        "title" : "Campaign Advice Report",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "advice" : {
            "title" : "Campaign Advice",
            "type" : "array",
            "description" : "An array of objects, each representing a point of campaign feedback",
            "items" : {
              "$ref" : "#/components/schemas/CampaignAdvice"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of feedback based on a campaign's statistics"
      },
      "TemplateDefaultContent" : {
        "title" : "Template Default Content",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "sections" : {
            "title" : "Sections",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "The default content for the sections that you can edit in the template."
            },
            "description" : "The sections that you can edit in the template, including each section's default content"
          }
        },
        "description" : "Default content for a template"
      },
      "ConnectedSites" : {
        "title" : "Connected Sites",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "sites" : {
            "title" : "Connected Sites",
            "type" : "array",
            "description" : "An array of objects, each representing a connected site",
            "items" : {
              "$ref" : "#/components/schemas/ConnectedSite2"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of connected sites in the account"
      },
      "GalleryFile" : {
        "title" : "Gallery File",
        "required" : [ "file_data", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "File Name",
            "type" : "string",
            "description" : "The name of the file"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The id of the folder",
            "x-ballerina-name" : "folderId"
          },
          "file_data" : {
            "title" : "File Data",
            "type" : "string",
            "description" : "The base64-encoded contents of the file",
            "x-ballerina-name" : "fileData"
          }
        },
        "description" : "An individual file listed in the File Manager"
      },
      "ECommerceStores" : {
        "title" : "E-commerce Stores",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "stores" : {
            "title" : "Stores",
            "type" : "array",
            "description" : "An array of objects, each representing a store",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceStore3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of stores in the account"
      },
      "SendingSchedule" : {
        "title" : "Sending Schedule",
        "type" : "object",
        "properties" : {
          "hour" : {
            "title" : "Sending Hour",
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/)"
          },
          "weekly_send_day" : {
            "title" : "Weekly Sending Day",
            "type" : "string",
            "description" : "The day of the week to send a weekly RSS Campaign",
            "enum" : [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ],
            "x-ballerina-name" : "weeklySendDay"
          },
          "daily_send" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DailySendingDays"
            } ],
            "x-ballerina-name" : "dailySend"
          },
          "monthly_send_date" : {
            "title" : "Monthly Sending Day",
            "maximum" : 31,
            "minimum" : 0,
            "type" : "number",
            "description" : "The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February",
            "x-ballerina-name" : "monthlySendDate"
          }
        },
        "description" : "The schedule for sending the RSS Campaign"
      },
      "CartLines" : {
        "title" : "Cart Lines",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "cart_id" : {
            "title" : "Cart ID",
            "type" : "string",
            "description" : "The cart id",
            "x-ballerina-name" : "cartId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "lines" : {
            "title" : "Ecommerce Cart Lines",
            "type" : "array",
            "description" : "An array of objects, each representing a cart's line item",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCartLineItem3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of a cart's line items"
      },
      "InlineResponse20011Feedback" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "type" : "string",
            "description" : "Feedback regarding the audience of this Ad"
          },
          "compliance" : {
            "type" : "string",
            "description" : "Feedback regarding the compliance of this Ad"
          },
          "content" : {
            "type" : "string",
            "description" : "Feedback regarding the content of this Ad"
          },
          "budget" : {
            "type" : "string",
            "description" : "Feedback regarding the budget of this Ad"
          }
        },
        "description" : "Check if this ad is connected to a facebook page"
      },
      "CampaignSettings1" : {
        "title" : "Campaign Settings",
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign",
            "x-ballerina-name" : "autoFooter"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "use_conversation" : {
            "title" : "Conversation",
            "type" : "boolean",
            "description" : "Use Mailchimp Conversation feature to manage out-of-office replies",
            "x-ballerina-name" : "useConversation"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`"
          },
          "to_name" : {
            "title" : "To Name",
            "type" : "string",
            "description" : "The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)",
            "x-ballerina-name" : "toName"
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name on the campaign (not an email address)",
            "x-ballerina-name" : "fromName"
          },
          "auto_tweet" : {
            "title" : "Auto-Tweet",
            "type" : "boolean",
            "description" : "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent",
            "x-ballerina-name" : "autoTweet"
          },
          "auto_fb_post" : {
            "title" : "Auto Post to Facebook",
            "type" : "array",
            "description" : "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "autoFbPost"
          },
          "fb_comments" : {
            "title" : "Facebook Comments",
            "type" : "boolean",
            "description" : "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`",
            "x-ballerina-name" : "fbComments"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending",
            "x-ballerina-name" : "replyTo"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Automatically inline the CSS included with the campaign content",
            "x-ballerina-name" : "inlineCss"
          },
          "template_id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id of the template to use",
            "x-ballerina-name" : "templateId"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "If the campaign is listed in a folder, the id for that folder",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "The settings for your campaign, including subject, from name, reply-to address, and more"
      },
      "CampaignSettings2" : {
        "title" : "Campaign Settings",
        "required" : [ "from_name", "reply_to", "subject_line" ],
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign",
            "x-ballerina-name" : "autoFooter"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "use_conversation" : {
            "title" : "Conversation",
            "type" : "boolean",
            "description" : "Use Mailchimp Conversation feature to manage out-of-office replies",
            "x-ballerina-name" : "useConversation"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`"
          },
          "to_name" : {
            "title" : "To Name",
            "type" : "string",
            "description" : "The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)",
            "x-ballerina-name" : "toName"
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name on the campaign (not an email address)",
            "x-ballerina-name" : "fromName"
          },
          "auto_tweet" : {
            "title" : "Auto-Tweet",
            "type" : "boolean",
            "description" : "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent",
            "x-ballerina-name" : "autoTweet"
          },
          "auto_fb_post" : {
            "title" : "Auto Post to Facebook",
            "type" : "array",
            "description" : "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "autoFbPost"
          },
          "fb_comments" : {
            "title" : "Facebook Comments",
            "type" : "boolean",
            "description" : "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`",
            "x-ballerina-name" : "fbComments"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the campaign",
            "x-ballerina-name" : "replyTo"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Automatically inline the CSS included with the campaign content",
            "x-ballerina-name" : "inlineCss"
          },
          "template_id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id of the template to use",
            "x-ballerina-name" : "templateId"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "If the campaign is listed in a folder, the id for that folder",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "The settings for your campaign, including subject, from name, reply-to address, and more"
      },
      "LandingPageReport1" : {
        "title" : "Landing Page Report",
        "type" : "object",
        "properties" : {
          "unique_visits" : {
            "title" : "Unique Visits",
            "type" : "integer",
            "description" : "The number of unique visits to this landing pages",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueVisits"
          },
          "subscribes" : {
            "title" : "Subscribes",
            "type" : "integer",
            "description" : "The number of subscribes to this landing pages",
            "readOnly" : true
          },
          "list_id" : {
            "title" : "List Id",
            "type" : "string",
            "description" : "The list id connected to this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "web_id" : {
            "title" : "Landing Page Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application",
            "readOnly" : true,
            "example" : 33345484,
            "x-ballerina-name" : "webId"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "List Name",
            "readOnly" : true,
            "example" : "Test List",
            "x-ballerina-name" : "listName"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The name of the landing page the user's customers will see",
            "readOnly" : true
          },
          "url" : {
            "title" : "Url",
            "type" : "string",
            "description" : "The landing page url",
            "readOnly" : true
          },
          "signup_tags" : {
            "title" : "Signup Tags",
            "type" : "array",
            "description" : "A list of tags associated to the landing page",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            },
            "x-ballerina-name" : "signupTags"
          },
          "visits" : {
            "title" : "Visits",
            "type" : "integer",
            "description" : "The number of visits to this landing pages",
            "readOnly" : true
          },
          "timeseries" : {
            "$ref" : "#/components/schemas/LandingPageReportTimeseries"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/LandingPageReportEcommerce"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name of this landing page the user will see",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The number of clicks to this landing pages",
            "readOnly" : true
          },
          "id" : {
            "title" : "Landing Page ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this landing page",
            "readOnly" : true,
            "example" : "00dfc2e1f0"
          },
          "published_at" : {
            "title" : "Published At",
            "type" : "string",
            "description" : "The time this landing page was published",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "publishedAt"
          },
          "conversion_rate" : {
            "title" : "Conversion rate",
            "type" : "number",
            "description" : "The percentage of people who visited your landing page and were added to your list",
            "readOnly" : true,
            "x-ballerina-name" : "conversionRate"
          },
          "unpublished_at" : {
            "title" : "Unpublished At",
            "type" : "string",
            "description" : "The time this landing page was unpublished",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "unpublishedAt"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The status of the landing page",
            "readOnly" : true
          }
        },
        "description" : "A summary of an individual landing page's settings and content"
      },
      "InlineResponse20013AudienceActivityImpressions" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string"
          },
          "impressions" : {
            "type" : "integer"
          }
        }
      },
      "List" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The id of the store",
            "example" : "1a2df69xxx",
            "x-ballerina-name" : "storeId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The id of the List",
            "example" : "1a2df69xxx",
            "x-ballerina-name" : "listId"
          }
        },
        "description" : "List settings for the Automation"
      },
      "AutomationWorkflowEmail1" : {
        "title" : "Automation Workflow Email",
        "type" : "object",
        "properties" : {
          "archive_url" : {
            "title" : "Archive URL",
            "type" : "string",
            "description" : "The link to the campaign's archive version in ISO 8601 format",
            "readOnly" : true,
            "x-ballerina-name" : "archiveUrl"
          },
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings3"
          },
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the campaign was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "trigger_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AutomationTrigger1"
            } ],
            "x-ballerina-name" : "triggerSettings"
          },
          "web_id" : {
            "title" : "Automation Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "example" : 33345484,
            "x-ballerina-name" : "webId"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions1"
          },
          "needs_block_refresh" : {
            "title" : "Needs Block Refresh",
            "type" : "boolean",
            "description" : "Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor",
            "readOnly" : true,
            "example" : true,
            "x-ballerina-name" : "needsBlockRefresh"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the campaign was started in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "startTime"
          },
          "delay" : {
            "$ref" : "#/components/schemas/AutomationDelay1"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : " The date and time a campaign was sent in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')",
            "readOnly" : true,
            "x-ballerina-name" : "contentType"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List6"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "id" : {
            "title" : "Automation Email ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the Automation email",
            "readOnly" : true
          },
          "position" : {
            "title" : "Email Position",
            "type" : "integer",
            "description" : "The position of an Automation email in a workflow",
            "readOnly" : true
          },
          "has_logo_merge_tag" : {
            "title" : "Has Logo Merge Tag",
            "type" : "boolean",
            "description" : "Determines if the campaign contains the *|BRAND:LOGO|* merge tag",
            "readOnly" : true,
            "example" : true,
            "x-ballerina-name" : "hasLogoMergeTag"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "sending" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        },
        "description" : "A summary of an individual Automation workflow email"
      },
      "EepurlActivity" : {
        "title" : "Eepurl Activity",
        "type" : "object",
        "properties" : {
          "twitter" : {
            "$ref" : "#/components/schemas/TwitterStats"
          },
          "eepurl" : {
            "title" : "Eepurl",
            "type" : "string",
            "description" : "The shortened link used for tracking",
            "readOnly" : true
          },
          "referrers" : {
            "title" : "Referrers",
            "type" : "array",
            "description" : "A summary of the top referrers for the campaign",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Referrer"
            },
            "x-title" : "Referrers"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "clicks" : {
            "$ref" : "#/components/schemas/ClickSummary"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A summary of social activity for the campaign, tracked by EepURL"
      },
      "InlineResponse20010FacebookAds" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/FacebookAdsAllOf1"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsAllOf12"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsFacebookAdsAllOf123"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf1234"
        } ]
      },
      "ABSplit" : {
        "title" : "A/B Split",
        "type" : "object",
        "properties" : {
          "a" : {
            "$ref" : "#/components/schemas/GroupA"
          },
          "b" : {
            "$ref" : "#/components/schemas/GroupB"
          }
        },
        "description" : "A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns"
      },
      "FacebookAdsFacebookAdsAllOf12" : {
        "type" : "object",
        "properties" : {
          "email_source_name" : {
            "title" : "Ad: Email Source Name",
            "type" : "string",
            "x-ballerina-name" : "emailSourceName"
          },
          "paused_at" : {
            "title" : "Ad: Paused At",
            "type" : "string",
            "description" : "The date and time the ad was paused in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "pausedAt"
          },
          "end_time" : {
            "title" : "Ad: End Time",
            "type" : "string",
            "description" : "The date and time the ad was ended in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "endTime"
          },
          "needs_attention" : {
            "title" : "Ad: Needs Attention",
            "type" : "boolean",
            "description" : "If the ad has a problem and needs attention",
            "x-ballerina-name" : "needsAttention"
          },
          "was_canceled_by_facebook" : {
            "title" : "Ad: Was Canceled By Facebook",
            "type" : "boolean",
            "x-ballerina-name" : "wasCanceledByFacebook"
          }
        }
      },
      "MergeField3" : {
        "title" : "Merge Field",
        "type" : "object",
        "properties" : {
          "public" : {
            "title" : "Merge Field Public Status",
            "type" : "boolean",
            "description" : "Whether the merge field is displayed on the signup form"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID that identifies this merge field's audience'",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Merge Field Name",
            "type" : "string",
            "description" : "The name of the merge field (audience field)"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the merge field displays on the list signup form",
            "x-ballerina-name" : "displayOrder"
          },
          "options" : {
            "$ref" : "#/components/schemas/MergeFieldOptions2"
          },
          "merge_id" : {
            "title" : "Merge Field ID",
            "type" : "integer",
            "description" : "An unchanging id for the merge field",
            "readOnly" : true,
            "x-ballerina-name" : "mergeId"
          },
          "default_value" : {
            "title" : "Default Value",
            "type" : "string",
            "description" : "The default value for the merge field if `null`",
            "x-ballerina-name" : "defaultValue"
          },
          "tag" : {
            "title" : "Merge Tag",
            "type" : "string",
            "description" : "The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)"
          },
          "type" : {
            "title" : "Merge Field Type",
            "type" : "string",
            "description" : "The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field",
            "readOnly" : true,
            "enum" : [ "text", "number", "address", "phone", "date", "url", "imageurl", "radio", "dropdown", "birthday", "zip" ]
          },
          "required" : {
            "title" : "Required",
            "type" : "boolean",
            "description" : "The boolean value if the merge field is required"
          },
          "help_text" : {
            "title" : "Merge Field Help Text",
            "type" : "string",
            "description" : "Extra text to help the subscriber fill out the form",
            "x-ballerina-name" : "helpText"
          }
        },
        "description" : "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience"
      },
      "MemberActivityEvents" : {
        "title" : "Member Activity Events",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "activity" : {
            "title" : "Activity",
            "type" : "array",
            "description" : "An array of objects, each representing a member event",
            "items" : {
              "$ref" : "#/components/schemas/MemberActivity1"
            }
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "The last 50 member events for a list"
      },
      "BatchWebhook1" : {
        "title" : "Batch Webhook",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Batch Webhook ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this Batch Webhook",
            "readOnly" : true
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "example" : "http://yourdomain.com/webhook"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the webhook receives requests or not",
            "example" : true
          }
        },
        "description" : "A webhook configured for batch status updates"
      },
      "MergeField2" : {
        "title" : "Merge Field",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "public" : {
            "title" : "Merge Field Public Status",
            "type" : "boolean",
            "description" : "Whether the merge field is displayed on the signup form"
          },
          "name" : {
            "title" : "Merge Field Name",
            "type" : "string",
            "description" : "The name of the merge field (audience field)"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the merge field displays on the list signup form",
            "x-ballerina-name" : "displayOrder"
          },
          "options" : {
            "$ref" : "#/components/schemas/MergeFieldOptions1"
          },
          "default_value" : {
            "title" : "Default Value",
            "type" : "string",
            "description" : "The default value for the merge field if `null`",
            "x-ballerina-name" : "defaultValue"
          },
          "tag" : {
            "title" : "Merge Tag",
            "type" : "string",
            "description" : "The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)"
          },
          "required" : {
            "title" : "Required",
            "type" : "boolean",
            "description" : "Whether the merge field is required to import a contact"
          },
          "help_text" : {
            "title" : "Merge Field Help Text",
            "type" : "string",
            "description" : "Extra text to help the subscriber fill out the form",
            "x-ballerina-name" : "helpText"
          }
        },
        "description" : "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience"
      },
      "BatchWebhook2" : {
        "title" : "Batch Webhook",
        "type" : "object",
        "properties" : {
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "example" : "http://yourdomain.com/webhook"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the webhook receives requests or not",
            "example" : true
          }
        },
        "description" : "Update an existing Batch Webook"
      },
      "BatchWebhook3" : {
        "title" : "Batch Webhook",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Batch Webhook ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this Batch Webhook",
            "readOnly" : true
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "example" : "http://yourdomain.com/webhook"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the webhook receives requests or not",
            "example" : true
          }
        },
        "description" : "A webhook configured for batch status updates"
      },
      "MergeField4" : {
        "title" : "Merge Field",
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "Merge Field ID",
            "type" : "integer",
            "description" : "An unchanging id for the merge field",
            "readOnly" : true
          },
          "label" : {
            "title" : "Merge Field Label",
            "type" : "string",
            "description" : "The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field",
            "readOnly" : true
          },
          "type" : {
            "title" : "Merge Field Type",
            "type" : "string",
            "description" : "The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field",
            "readOnly" : true,
            "enum" : [ "text", "number", "address", "phone", "date", "url", "imageurl", "radio", "dropdown", "birthday", "zip" ]
          }
        },
        "description" : "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience",
        "readOnly" : true
      },
      "EcommerceProductImages" : {
        "title" : "Ecommerce Product Images",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "images" : {
            "title" : "Ecommerce Product Images",
            "type" : "array",
            "description" : "An array of objects, each representing a product image resource",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "product_id" : {
            "title" : "Product ID",
            "type" : "string",
            "description" : "The product id",
            "x-ballerina-name" : "productId"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of a product's images"
      },
      "CampaignSettings5" : {
        "title" : "Campaign Settings",
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign",
            "x-ballerina-name" : "autoFooter"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "use_conversation" : {
            "title" : "Conversation",
            "type" : "boolean",
            "description" : "Use Mailchimp Conversation feature to manage out-of-office replies",
            "x-ballerina-name" : "useConversation"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`"
          },
          "to_name" : {
            "title" : "To Name",
            "type" : "string",
            "description" : "The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)",
            "x-ballerina-name" : "toName"
          },
          "timewarp" : {
            "title" : "Timewarp Send",
            "type" : "boolean",
            "description" : "Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/)",
            "readOnly" : true
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name on the campaign (not an email address)",
            "x-ballerina-name" : "fromName"
          },
          "auto_tweet" : {
            "title" : "Auto-Tweet",
            "type" : "boolean",
            "description" : "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent",
            "x-ballerina-name" : "autoTweet"
          },
          "auto_fb_post" : {
            "title" : "Auto Post to Facebook",
            "type" : "array",
            "description" : "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "autoFbPost"
          },
          "fb_comments" : {
            "title" : "Facebook Comments",
            "type" : "boolean",
            "description" : "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`",
            "x-ballerina-name" : "fbComments"
          },
          "drag_and_drop" : {
            "title" : "Drag And Drop Campaign",
            "type" : "boolean",
            "description" : "Whether the campaign uses the drag-and-drop editor",
            "readOnly" : true,
            "x-ballerina-name" : "dragAndDrop"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the campaign",
            "x-ballerina-name" : "replyTo"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Automatically inline the CSS included with the campaign content",
            "x-ballerina-name" : "inlineCss"
          },
          "template_id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id for the template used in this campaign",
            "x-ballerina-name" : "templateId"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "If the campaign is listed in a folder, the id for that folder",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "The settings for your campaign, including subject, from name, reply-to address, and more"
      },
      "CampaignSettings3" : {
        "title" : "Campaign Settings",
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign",
            "x-ballerina-name" : "autoFooter"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`"
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name on the campaign (not an email address)",
            "x-ballerina-name" : "fromName"
          },
          "auto_tweet" : {
            "title" : "Auto-Tweet",
            "type" : "boolean",
            "description" : "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent",
            "x-ballerina-name" : "autoTweet"
          },
          "auto_fb_post" : {
            "title" : "Auto Post to Facebook",
            "type" : "array",
            "description" : "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "autoFbPost"
          },
          "fb_comments" : {
            "title" : "Facebook Comments",
            "type" : "boolean",
            "description" : "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`",
            "x-ballerina-name" : "fbComments"
          },
          "drag_and_drop" : {
            "title" : "Drag And Drop Campaign",
            "type" : "boolean",
            "description" : "Whether the campaign uses the drag-and-drop editor",
            "readOnly" : true,
            "x-ballerina-name" : "dragAndDrop"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the campaign",
            "x-ballerina-name" : "replyTo"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Automatically inline the CSS included with the campaign content",
            "x-ballerina-name" : "inlineCss"
          },
          "template_id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id for the template used in this campaign",
            "x-ballerina-name" : "templateId"
          }
        },
        "description" : "Settings for the campaign including the email subject, from name, and from email address"
      },
      "CampaignSettings4" : {
        "title" : "Campaign Settings",
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign",
            "x-ballerina-name" : "autoFooter"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "use_conversation" : {
            "title" : "Conversation",
            "type" : "boolean",
            "description" : "Use Mailchimp Conversation feature to manage replies",
            "x-ballerina-name" : "useConversation"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`"
          },
          "to_name" : {
            "title" : "To Name",
            "type" : "string",
            "description" : "The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)",
            "x-ballerina-name" : "toName"
          },
          "timewarp" : {
            "title" : "Timewarp Send",
            "type" : "boolean",
            "description" : "Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/)",
            "readOnly" : true
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name on the campaign (not an email address)",
            "x-ballerina-name" : "fromName"
          },
          "auto_tweet" : {
            "title" : "Auto-Tweet",
            "type" : "boolean",
            "description" : "Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent",
            "x-ballerina-name" : "autoTweet"
          },
          "auto_fb_post" : {
            "title" : "Auto Post to Facebook",
            "type" : "array",
            "description" : "An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "autoFbPost"
          },
          "fb_comments" : {
            "title" : "Facebook Comments",
            "type" : "boolean",
            "description" : "Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`",
            "x-ballerina-name" : "fbComments"
          },
          "drag_and_drop" : {
            "title" : "Drag And Drop Campaign",
            "type" : "boolean",
            "description" : "Whether the campaign uses the drag-and-drop editor",
            "readOnly" : true,
            "x-ballerina-name" : "dragAndDrop"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the campaign",
            "x-ballerina-name" : "replyTo"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Automatically inline the CSS included with the campaign content",
            "x-ballerina-name" : "inlineCss"
          },
          "template_id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id for the template used in this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "templateId"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "If the campaign is listed in a folder, the id for that folder",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "The settings for your campaign, including subject, from name, reply-to address, and more"
      },
      "ToNewSubscribers" : {
        "title" : "To New Subscribers",
        "type" : "object",
        "properties" : {
          "reason" : {
            "title" : "Reason",
            "type" : "string",
            "description" : "The reason the campaign is not eligible to be resent to this segment",
            "readOnly" : true
          },
          "is_eligible" : {
            "title" : "Is Eligible",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to this segment",
            "readOnly" : true,
            "x-ballerina-name" : "isEligible"
          }
        },
        "description" : "Determines if the campaign qualifies to be resent to new subscribers"
      },
      "MemberActivity1" : {
        "title" : "Member Activity",
        "type" : "object",
        "properties" : {
          "parent_campaign" : {
            "title" : "Parent Campaign ID",
            "type" : "string",
            "description" : "The ID of the parent campaign",
            "x-ballerina-name" : "parentCampaign"
          },
          "action" : {
            "title" : "Action Type",
            "type" : "string",
            "description" : "The type of action recorded for the subscriber"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "The type of campaign that was sent"
          },
          "title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "If set, the campaign's title"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "For clicks, the URL the subscriber clicked on"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The web-based ID for the campaign",
            "x-ballerina-name" : "campaignId"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time recorded for the action",
            "format" : "date-time"
          }
        },
        "description" : "Member activity events"
      },
      "InlineResponse20011ContentAttachments" : {
        "type" : "object",
        "properties" : {
          "call_to_action" : {
            "type" : "string",
            "x-ballerina-name" : "callToAction"
          },
          "image_url" : {
            "type" : "string",
            "x-ballerina-name" : "imageUrl"
          },
          "name" : {
            "type" : "string"
          },
          "link_url" : {
            "type" : "string",
            "x-ballerina-name" : "linkUrl"
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "MemberActivity2" : {
        "title" : "Member Activity",
        "type" : "object",
        "properties" : {
          "is_proxy_open" : {
            "title" : "Proxy Open",
            "type" : "boolean",
            "description" : "Indicates if the open was from an email client that use proxies",
            "readOnly" : true,
            "x-ballerina-name" : "isProxyOpen"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time recorded for the action in ISO 8601 format",
            "format" : "date-time"
          }
        },
        "description" : "A summary of the interaction with the campaign"
      },
      "MergeField1" : {
        "title" : "Merge Field",
        "type" : "object",
        "properties" : {
          "public" : {
            "title" : "Merge Field Public Status",
            "type" : "boolean",
            "description" : "Whether the merge field is displayed on the signup form"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID that identifies this merge field's audience'",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Merge Field Name",
            "type" : "string",
            "description" : "The name of the merge field (audience field)"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the merge field displays on the list signup form",
            "x-ballerina-name" : "displayOrder"
          },
          "options" : {
            "$ref" : "#/components/schemas/MergeFieldOptions2"
          },
          "merge_id" : {
            "title" : "Merge Field ID",
            "type" : "integer",
            "description" : "An unchanging id for the merge field",
            "readOnly" : true,
            "x-ballerina-name" : "mergeId"
          },
          "default_value" : {
            "title" : "Default Value",
            "type" : "string",
            "description" : "The default value for the merge field if `null`",
            "x-ballerina-name" : "defaultValue"
          },
          "tag" : {
            "title" : "Merge Tag",
            "type" : "string",
            "description" : "The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)"
          },
          "type" : {
            "title" : "Merge Field Type",
            "type" : "string",
            "description" : "The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field",
            "readOnly" : true,
            "enum" : [ "text", "number", "address", "phone", "date", "url", "imageurl", "radio", "dropdown", "birthday", "zip" ]
          },
          "required" : {
            "title" : "Required",
            "type" : "boolean",
            "description" : "The boolean value if the merge field is required"
          },
          "help_text" : {
            "title" : "Merge Field Help Text",
            "type" : "string",
            "description" : "Extra text to help the subscriber fill out the form",
            "x-ballerina-name" : "helpText"
          }
        },
        "description" : "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience"
      },
      "MarketingPermission1" : {
        "title" : "Marketing Permission",
        "type" : "object",
        "properties" : {
          "marketing_permission_id" : {
            "title" : "Marketing Permission ID",
            "type" : "string",
            "description" : "The id for the marketing permission on the list",
            "x-ballerina-name" : "marketingPermissionId"
          },
          "text" : {
            "title" : "Marketing Permission Text",
            "type" : "string",
            "description" : "The text of the marketing permission"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "If the subscriber has opted-in to the marketing permission"
          }
        },
        "description" : "A single marketing permission a subscriber has either opted-in to or opted-out of"
      },
      "AutomationWorkflow1" : {
        "title" : "Automation Workflow",
        "type" : "object",
        "properties" : {
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the Automation was started in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "startTime"
          },
          "settings" : {
            "$ref" : "#/components/schemas/AutomationCampaignSettings1"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the Automation was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List10"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for the Automation",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "trigger_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AutomationTrigger1"
            } ],
            "x-ballerina-name" : "triggerSettings"
          },
          "id" : {
            "title" : "Automation Campaign ID",
            "type" : "string",
            "description" : "A string that identifies the Automation",
            "readOnly" : true
          },
          "tracking" : {
            "$ref" : "#/components/schemas/AutomationTrackingOptions"
          },
          "status" : {
            "title" : "Automation Status",
            "type" : "string",
            "description" : "The current status of the Automation",
            "readOnly" : true,
            "enum" : [ "save", "paused", "sending" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary3"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        },
        "description" : "A summary of an individual Automation workflow's settings and content"
      },
      "CampaignFolder1" : {
        "title" : "Campaign Folder",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "count" : {
            "title" : "Campaign Count",
            "type" : "integer",
            "description" : "The number of campaigns in the folder",
            "readOnly" : true
          },
          "id" : {
            "title" : "Folder Id",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign folder",
            "readOnly" : true
          }
        },
        "description" : "A folder used to organize campaigns"
      },
      "CampaignFolder2" : {
        "title" : "Campaign Folder",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "count" : {
            "title" : "Campaign Count",
            "type" : "integer",
            "description" : "The number of campaigns in the folder",
            "readOnly" : true
          },
          "id" : {
            "title" : "Folder Id",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign folder",
            "readOnly" : true
          }
        },
        "description" : "A folder used to organize campaigns"
      },
      "InlineResponse20011Audience" : {
        "type" : "object",
        "properties" : {
          "include_source_in_target" : {
            "type" : "boolean",
            "description" : "To include list contacts as part of audience",
            "x-ballerina-name" : "includeSourceInTarget"
          },
          "email_source" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20011AudienceEmailSource"
            } ],
            "x-ballerina-name" : "emailSource"
          },
          "targeting_specs" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20011AudienceTargetingSpecs"
            } ],
            "x-ballerina-name" : "targetingSpecs"
          },
          "source_type" : {
            "type" : "string",
            "description" : "List or Facebook based audience",
            "enum" : [ "facebook", "list" ],
            "x-ballerina-name" : "sourceType"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the audience",
            "enum" : [ "Custom Audience", "Lookalike Audience", "Interest-based Audience" ]
          },
          "lookalike_country_code" : {
            "type" : "string",
            "description" : "To find similar audience in given country",
            "x-ballerina-name" : "lookalikeCountryCode"
          }
        },
        "description" : "Audience settings"
      },
      "AutomationWorkflow2" : {
        "title" : "Automation Workflow",
        "type" : "object",
        "properties" : {
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the Automation was started in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "startTime"
          },
          "settings" : {
            "$ref" : "#/components/schemas/AutomationCampaignSettings1"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the Automation was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List10"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for the Automation",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "trigger_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AutomationTrigger1"
            } ],
            "x-ballerina-name" : "triggerSettings"
          },
          "id" : {
            "title" : "Automation Campaign ID",
            "type" : "string",
            "description" : "A string that identifies the Automation",
            "readOnly" : true
          },
          "tracking" : {
            "$ref" : "#/components/schemas/AutomationTrackingOptions"
          },
          "status" : {
            "title" : "Automation Status",
            "type" : "string",
            "description" : "The current status of the Automation",
            "readOnly" : true,
            "enum" : [ "save", "paused", "sending" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary3"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        },
        "description" : "A summary of an individual Automation workflow's settings and content"
      },
      "DomainPerformance" : {
        "title" : "Domain Performance",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_sent" : {
            "title" : "Total Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "totalSent"
          },
          "domains" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "The top 5 email domains based on total delivered emails",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/EmailDomain"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Statistics for the top-performing email domains in a campaign"
      },
      "CollectionOfConversationMessages" : {
        "title" : "Collection of Conversation Messages",
        "type" : "object",
        "properties" : {
          "conversation_messages" : {
            "title" : "Conversation Messages",
            "type" : "array",
            "description" : "An array of objects, each representing a conversation messages resources",
            "items" : {
              "$ref" : "#/components/schemas/ConversationMessage1"
            },
            "x-ballerina-name" : "conversationMessages"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "conversation_id" : {
            "title" : "Conversation ID",
            "type" : "string",
            "description" : "A string that identifies this conversation",
            "x-ballerina-name" : "conversationId"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Messages from a specific conversation"
      },
      "CampaignDefaults" : {
        "title" : "Campaign Defaults",
        "required" : [ "from_email", "from_name", "language", "subject" ],
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "Sender's Email Address",
            "type" : "string",
            "description" : "The default from email for campaigns sent to this list",
            "x-ballerina-name" : "fromEmail"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The default subject line for campaigns sent to this list"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "The default language for this lists's forms"
          },
          "from_name" : {
            "title" : "Sender's Name",
            "type" : "string",
            "description" : "The default from name for campaigns sent to this list",
            "x-ballerina-name" : "fromName"
          }
        },
        "description" : "[Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list"
      },
      "AutomationCampaignSettings1" : {
        "title" : "Automation Campaign Settings",
        "type" : "object",
        "properties" : {
          "auto_footer" : {
            "title" : "Auto-Footer",
            "type" : "boolean",
            "description" : "Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation",
            "x-ballerina-name" : "autoFooter"
          },
          "use_conversation" : {
            "title" : "Conversations",
            "type" : "boolean",
            "description" : "Whether to use Mailchimp Conversation feature to manage replies",
            "x-ballerina-name" : "useConversation"
          },
          "authenticate" : {
            "title" : "Authentication",
            "type" : "boolean",
            "description" : "Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the Automation",
            "x-ballerina-name" : "replyTo"
          },
          "to_name" : {
            "title" : "To Name",
            "type" : "string",
            "description" : "The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)",
            "x-ballerina-name" : "toName"
          },
          "inline_css" : {
            "title" : "Inline CSS",
            "type" : "boolean",
            "description" : "Whether to automatically inline the CSS included with the Automation content",
            "x-ballerina-name" : "inlineCss"
          },
          "title" : {
            "title" : "Automation Title",
            "type" : "string",
            "description" : "The title of the Automation"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name for the Automation (not an email address)",
            "x-ballerina-name" : "fromName"
          }
        },
        "description" : "The settings for the Automation workflow"
      },
      "MemberNotes" : {
        "title" : "Member Notes",
        "type" : "object",
        "properties" : {
          "note" : {
            "title" : "Note",
            "type" : "string",
            "description" : "The content of the note. Note length is limited to 1,000 characters"
          }
        },
        "description" : "A specific note for a specific member"
      },
      "Conversation1" : {
        "title" : "Conversation",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "From Email",
            "type" : "string",
            "description" : "A label representing the email of the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromEmail"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique identifier of the list for this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The subject of the message",
            "readOnly" : true
          },
          "unread_messages" : {
            "title" : "Unread Messages",
            "type" : "integer",
            "description" : "The number of unread messages in this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "unreadMessages"
          },
          "last_message" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/LastMessage"
            } ],
            "x-ballerina-name" : "lastMessage"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this conversation",
            "readOnly" : true
          },
          "message_count" : {
            "title" : "Message Count",
            "type" : "integer",
            "description" : "The total number of messages in this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "messageCount"
          },
          "from_label" : {
            "title" : "From Label",
            "type" : "string",
            "description" : "A label representing the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromLabel"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique identifier of the campaign for this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account"
      },
      "LastMessage" : {
        "title" : "Last Message",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "From Email",
            "type" : "string",
            "description" : "A label representing the email of the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromEmail"
          },
          "read" : {
            "title" : "Read",
            "type" : "boolean",
            "description" : "Whether this message has been marked as read"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The subject of this message",
            "readOnly" : true
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The plain-text content of the message",
            "readOnly" : true
          },
          "from_label" : {
            "title" : "From Label",
            "type" : "string",
            "description" : "A label representing the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromLabel"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time the message was either sent or received in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "The most recent message in the conversation"
      },
      "Batch" : {
        "title" : "Batch",
        "type" : "object",
        "properties" : {
          "finished_operations" : {
            "title" : "Finished Operations",
            "type" : "integer",
            "description" : "The number of completed operations. This includes operations that returned an error",
            "readOnly" : true,
            "x-ballerina-name" : "finishedOperations"
          },
          "completed_at" : {
            "title" : "Completed At",
            "type" : "string",
            "description" : "The date and time when all operations in the batch request completed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "completedAt"
          },
          "submitted_at" : {
            "title" : "Submitted At",
            "type" : "string",
            "description" : "The date and time when the server received the batch request in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "submittedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_operations" : {
            "title" : "Total Operations",
            "type" : "integer",
            "description" : "The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation",
            "readOnly" : true,
            "x-ballerina-name" : "totalOperations"
          },
          "errored_operations" : {
            "title" : "Error Operations",
            "type" : "integer",
            "description" : "The number of completed operations that returned an error",
            "readOnly" : true,
            "x-ballerina-name" : "erroredOperations"
          },
          "id" : {
            "title" : "Batch ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this batch request",
            "readOnly" : true
          },
          "response_body_url" : {
            "title" : "Response Body URL",
            "type" : "string",
            "description" : "The URL of the gzipped archive of the results of all the operations",
            "readOnly" : true,
            "x-ballerina-name" : "responseBodyUrl"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status",
            "readOnly" : true,
            "enum" : [ "pending", "preprocessing", "started", "finalizing", "finished" ]
          }
        },
        "description" : "The status of a batch request"
      },
      "ECommerceProduct" : {
        "title" : "E-commerce Product",
        "required" : [ "id", "title", "variants" ],
        "type" : "object",
        "properties" : {
          "images" : {
            "title" : "Product Images",
            "type" : "array",
            "description" : "An array of the product's images",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage"
            }
          },
          "vendor" : {
            "title" : "Vendor",
            "type" : "string",
            "description" : "The vendor for a product"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a product",
            "example" : "This is a cat hat."
          },
          "handle" : {
            "title" : "Handle",
            "type" : "string",
            "description" : "The handle of a product",
            "example" : "cat-hat"
          },
          "published_at_foreign" : {
            "title" : "Foreign Publish Time",
            "type" : "string",
            "description" : "The date and time the product was published",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "publishedAtForeign"
          },
          "id" : {
            "title" : "Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product"
          },
          "variants" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant"
            }
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product",
            "example" : "Cat Hat"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of product",
            "example" : "Accessories"
          },
          "url" : {
            "title" : "Product URL",
            "type" : "string",
            "description" : "The URL for a product"
          }
        },
        "description" : "Information about a specific product"
      },
      "ECommerceCart" : {
        "title" : "E-commerce Cart",
        "required" : [ "currency_code", "customer", "id", "lines", "order_total" ],
        "type" : "object",
        "properties" : {
          "checkout_url" : {
            "title" : "Checkout URL",
            "type" : "string",
            "description" : "The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations",
            "x-ballerina-name" : "checkoutUrl"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The total tax for the cart",
            "x-ballerina-name" : "taxTotal"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total for the cart",
            "x-ballerina-name" : "orderTotal"
          },
          "id" : {
            "title" : "Cart Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart"
          },
          "lines" : {
            "title" : "Cart Line Items",
            "type" : "array",
            "description" : "An array of the cart's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCartLineItem"
            }
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign for a cart",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the cart uses",
            "x-ballerina-name" : "currencyCode"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer"
          }
        },
        "description" : "Information about a specific cart"
      },
      "CampaignReportSummary1" : {
        "title" : "Campaign Report Summary",
        "type" : "object",
        "properties" : {
          "subscriber_clicks" : {
            "title" : "Unique Subscriber Clicks",
            "type" : "integer",
            "description" : "The number of unique clicks",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberClicks"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The number of unique clicks divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/ECommerceReport1"
          },
          "opens" : {
            "title" : "Automation Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of clicks for an campaign",
            "readOnly" : true
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueOpens"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The number of unique opens divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "For sent campaigns, a summary of opens and clicks"
      },
      "ListMembers" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampOpt"
          },
          "last_note" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Notes"
            } ],
            "x-ballerina-name" : "lastNote"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampSignup"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "readOnly" : true,
            "x-ballerina-name" : "ipSignup"
          },
          "member_rating" : {
            "title" : "Member Rating",
            "type" : "integer",
            "description" : "Star rating for this member, between 1 and 5",
            "readOnly" : true,
            "x-ballerina-name" : "memberRating"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "unique_email_id" : {
            "title" : "Unique Email ID",
            "type" : "string",
            "description" : "An identifier for the address across all of Mailchimp",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueEmailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "full_name" : {
            "title" : "Full Name",
            "type" : "string",
            "description" : "The contact's full name",
            "readOnly" : true,
            "x-ballerina-name" : "fullName"
          },
          "email_client" : {
            "title" : "Email Client",
            "type" : "string",
            "description" : "The list member's email client",
            "readOnly" : true,
            "x-ballerina-name" : "emailClient"
          },
          "stats" : {
            "$ref" : "#/components/schemas/SubscriberStats"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "readOnly" : true,
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location1"
          },
          "id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          },
          "last_changed" : {
            "title" : "Last Changed Date",
            "type" : "string",
            "description" : "The date and time the member's info was last changed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastChanged"
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "List10" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions2"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The id of the store",
            "example" : "1a2df69xxx",
            "x-ballerina-name" : "storeId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "List Name",
            "x-ballerina-name" : "listName"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          }
        },
        "description" : "List settings for the Automation"
      },
      "ActionsTestBody" : {
        "required" : [ "send_type", "test_emails" ],
        "type" : "object",
        "properties" : {
          "test_emails" : {
            "title" : "Test Emails",
            "type" : "array",
            "description" : "An array of email addresses to send the test email to",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "testEmails"
          },
          "send_type" : {
            "title" : "Type of email to test",
            "type" : "string",
            "description" : "Choose the type of test email to send",
            "enum" : [ "html", "plaintext" ],
            "x-ballerina-name" : "sendType"
          }
        }
      },
      "InlineResponse20011InlineResponse20011InlineResponse20011AllOf123" : {
        "type" : "object",
        "properties" : {
          "is_connected" : {
            "type" : "boolean",
            "description" : "Check if this ad is connected to a facebook page",
            "x-ballerina-name" : "isConnected"
          },
          "feedback" : {
            "$ref" : "#/components/schemas/InlineResponse20011Feedback"
          },
          "site" : {
            "$ref" : "#/components/schemas/InlineResponse20011Site"
          },
          "audience" : {
            "$ref" : "#/components/schemas/InlineResponse20011Audience"
          },
          "has_audience" : {
            "type" : "boolean",
            "description" : "Check if this ad has audience setup",
            "x-ballerina-name" : "hasAudience"
          },
          "has_content" : {
            "type" : "boolean",
            "description" : "Check if this ad has content",
            "x-ballerina-name" : "hasContent"
          },
          "channel" : {
            "$ref" : "#/components/schemas/InlineResponse20011Channel"
          },
          "content" : {
            "$ref" : "#/components/schemas/InlineResponse20011Content"
          },
          "budget" : {
            "$ref" : "#/components/schemas/InlineResponse20011Budget"
          }
        },
        "description" : "A facebook ad"
      },
      "ECommerceCart1" : {
        "title" : "E-commerce Cart",
        "type" : "object",
        "properties" : {
          "checkout_url" : {
            "title" : "Checkout URL",
            "type" : "string",
            "description" : "The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations",
            "x-ballerina-name" : "checkoutUrl"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The total tax for the cart",
            "x-ballerina-name" : "taxTotal"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the cart was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the cart was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total for the cart",
            "x-ballerina-name" : "orderTotal"
          },
          "id" : {
            "title" : "Cart Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart",
            "readOnly" : true
          },
          "lines" : {
            "title" : "Cart Line Items",
            "type" : "array",
            "description" : "An array of the cart's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCartLineItem3"
            }
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with a cart",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the cart uses",
            "x-ballerina-name" : "currencyCode"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer6"
          }
        },
        "description" : "Information about a specific cart"
      },
      "CollectionAuthorization" : {
        "title" : "Collection Authorization",
        "required" : [ "max_instances", "may_create" ],
        "type" : "object",
        "properties" : {
          "may_create" : {
            "title" : "Resource creation authorization",
            "type" : "boolean",
            "description" : "May the user create additional instances of this resource?",
            "x-ballerina-name" : "mayCreate"
          },
          "current_total_instances" : {
            "title" : "Current total instances",
            "type" : "integer",
            "description" : "How many total instances of this resource are already in use? This is independent of any filter conditions applied to the query. Value may be larger than max_instances. As a special case, -1 is returned when access is unlimited",
            "x-ballerina-name" : "currentTotalInstances"
          },
          "max_instances" : {
            "title" : "Max instances",
            "type" : "integer",
            "description" : "How many total instances of this resource are allowed? This is independent of any filter conditions applied to the query. As a special case, -1 indicates unlimited",
            "x-ballerina-name" : "maxInstances"
          }
        },
        "description" : "Do particular authorization constraints around this collection limit creation of new instances?"
      },
      "ECommerceCart2" : {
        "title" : "E-commerce Cart",
        "type" : "object",
        "properties" : {
          "checkout_url" : {
            "title" : "Checkout URL",
            "type" : "string",
            "description" : "The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations",
            "x-ballerina-name" : "checkoutUrl"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The total tax for the cart",
            "x-ballerina-name" : "taxTotal"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total for the cart",
            "x-ballerina-name" : "orderTotal"
          },
          "lines" : {
            "title" : "Cart Line Items",
            "type" : "array",
            "description" : "An array of the cart's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCartLineItem1"
            }
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with a cart",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the cart uses",
            "x-ballerina-name" : "currencyCode"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer1"
          }
        },
        "description" : "Information about a specific cart"
      },
      "Referrer" : {
        "title" : "Referrer",
        "type" : "object",
        "properties" : {
          "referrer" : {
            "title" : "Referrer",
            "type" : "string",
            "description" : "A referrer (truncated to 100 bytes)"
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The number of clicks a single referrer generated"
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The timestamp for the last click from this referrer",
            "format" : "date-time",
            "x-ballerina-name" : "lastClick"
          },
          "first_click" : {
            "title" : "First Click",
            "type" : "string",
            "description" : "The timestamp for the first click from this referrer",
            "format" : "date-time",
            "x-ballerina-name" : "firstClick"
          }
        },
        "description" : "A single instance of a campaign referral"
      },
      "ECommerceCart3" : {
        "title" : "E-commerce Cart",
        "type" : "object",
        "properties" : {
          "checkout_url" : {
            "title" : "Checkout URL",
            "type" : "string",
            "description" : "The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations",
            "x-ballerina-name" : "checkoutUrl"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The total tax for the cart",
            "x-ballerina-name" : "taxTotal"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the cart was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the cart was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total for the cart",
            "x-ballerina-name" : "orderTotal"
          },
          "id" : {
            "title" : "Cart Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart",
            "readOnly" : true
          },
          "lines" : {
            "title" : "Cart Line Items",
            "type" : "array",
            "description" : "An array of the cart's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCartLineItem3"
            }
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with a cart",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the cart uses",
            "x-ballerina-name" : "currencyCode"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer6"
          }
        },
        "description" : "Information about a specific cart"
      },
      "SurveyReport" : {
        "title" : "Survey Report",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID of the list connected to this survey",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the survey was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01Z",
            "x-ballerina-name" : "updatedAt"
          },
          "created_at" : {
            "title" : "Created At",
            "type" : "string",
            "description" : "The date and time the survey was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01Z",
            "x-ballerina-name" : "createdAt"
          },
          "total_responses" : {
            "title" : "Total Responses",
            "type" : "integer",
            "description" : "The total number of responses to this survey",
            "readOnly" : true,
            "example" : 810,
            "x-ballerina-name" : "totalResponses"
          },
          "id" : {
            "title" : "Survey ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this survey",
            "readOnly" : true,
            "example" : "040d2c2e1f0"
          },
          "web_id" : {
            "title" : "Survey Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`",
            "readOnly" : true,
            "example" : 165,
            "x-ballerina-name" : "webId"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list connected to this survey",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of the survey",
            "readOnly" : true,
            "example" : "New product ideas"
          },
          "published_at" : {
            "title" : "Published At",
            "type" : "string",
            "description" : "The date and time the survey was published in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01Z",
            "x-ballerina-name" : "publishedAt"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for the survey",
            "readOnly" : true
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The survey's status",
            "readOnly" : true,
            "example" : "published",
            "enum" : [ "published", "unpublished" ]
          }
        },
        "description" : "The report for a survey"
      },
      "CampaignTrackingOptions1" : {
        "title" : "Campaign Tracking Options",
        "type" : "object",
        "properties" : {
          "salesforce" : {
            "$ref" : "#/components/schemas/SalesforceCRMTracking1"
          },
          "goal_tracking" : {
            "title" : "Mailchimp Goal Tracking",
            "type" : "boolean",
            "description" : "Deprecated",
            "x-ballerina-name" : "goalTracking"
          },
          "capsule" : {
            "$ref" : "#/components/schemas/CapsuleCRMTracking1"
          },
          "clicktale" : {
            "title" : "ClickTale Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)"
          },
          "text_clicks" : {
            "title" : "Plain-Text Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`",
            "x-ballerina-name" : "textClicks"
          },
          "ecomm360" : {
            "title" : "E-commerce Tracking",
            "type" : "boolean",
            "description" : "Whether to enable e-commerce tracking"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "boolean",
            "description" : "Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`"
          },
          "google_analytics" : {
            "title" : "Google Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)",
            "x-ballerina-name" : "googleAnalytics"
          },
          "html_clicks" : {
            "title" : "HTML Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`",
            "x-ballerina-name" : "htmlClicks"
          }
        },
        "description" : "The tracking options for a campaign"
      },
      "CampaignFolders" : {
        "title" : "Campaign Folders",
        "type" : "object",
        "properties" : {
          "folders" : {
            "title" : "Campaign Folders",
            "type" : "array",
            "description" : "An array of objects representing campaign folders",
            "items" : {
              "$ref" : "#/components/schemas/CampaignFolder2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of campaign folders"
      },
      "OpenActivity" : {
        "title" : "Open Activity",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "opens_count" : {
            "title" : "Opens count",
            "type" : "integer",
            "description" : "The total number of times the this campaign was opened by the list member",
            "readOnly" : true,
            "x-ballerina-name" : "opensCount"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "opens" : {
            "title" : "Time series data of opens activity",
            "type" : "array",
            "description" : "An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event",
            "items" : {
              "$ref" : "#/components/schemas/MemberActivity2"
            }
          },
          "contact_status" : {
            "title" : "Member Status",
            "type" : "string",
            "description" : "The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation",
            "readOnly" : true,
            "x-ballerina-name" : "contactStatus"
          },
          "proxy_excluded_opens_count" : {
            "title" : "Proxy Excluded Opens count",
            "type" : "integer",
            "description" : "The total number of times the this campaign was opened by the list member excluding opens from email clients that use proxies ",
            "readOnly" : true,
            "x-ballerina-name" : "proxyExcludedOpensCount"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of a member's opens activity in a specific campaign"
      },
      "CampaignReportSummary3" : {
        "title" : "Campaign Report Summary",
        "type" : "object",
        "properties" : {
          "subscriber_clicks" : {
            "title" : "Unique Subscriber Clicks",
            "type" : "integer",
            "description" : "The number of unique clicks",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberClicks"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The number of unique clicks, divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "opens" : {
            "title" : "Automation Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of clicks for an campaign",
            "readOnly" : true
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueOpens"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The number of unique opens divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "A summary of opens and clicks for sent campaigns"
      },
      "CampaignReportSummary2" : {
        "title" : "Campaign Report Summary",
        "type" : "object",
        "properties" : {
          "subscriber_clicks" : {
            "title" : "Unique Subscriber Clicks",
            "type" : "integer",
            "description" : "The number of unique clicks",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberClicks"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The number of unique clicks divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/ECommerceReport1"
          },
          "opens" : {
            "title" : "Automation Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of clicks for an campaign",
            "readOnly" : true
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueOpens"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The number of unique opens divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "For sent campaigns, a summary of opens, clicks, and e-commerce data"
      },
      "MemberNotes1" : {
        "title" : "Member Notes",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "note" : {
            "title" : "Note",
            "type" : "string",
            "description" : "The content of the note"
          },
          "updated_at" : {
            "title" : "Updated Time",
            "type" : "string",
            "description" : "The date and time the note was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "created_at" : {
            "title" : "Created Time",
            "type" : "string",
            "description" : "The date and time the note was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Note ID",
            "type" : "integer",
            "description" : "The note id",
            "readOnly" : true
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "created_by" : {
            "title" : "Author",
            "type" : "string",
            "description" : "The author of the note",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          }
        },
        "description" : "A specific note for a specific member"
      },
      "MemberNotes2" : {
        "title" : "Member Notes",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "note" : {
            "title" : "Note",
            "type" : "string",
            "description" : "The content of the note"
          },
          "updated_at" : {
            "title" : "Updated Time",
            "type" : "string",
            "description" : "The date and time the note was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "created_at" : {
            "title" : "Created Time",
            "type" : "string",
            "description" : "The date and time the note was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Note ID",
            "type" : "integer",
            "description" : "The note id",
            "readOnly" : true
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "created_by" : {
            "title" : "Author",
            "type" : "string",
            "description" : "The author of the note",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          }
        },
        "description" : "A specific note for a specific member"
      },
      "CampaignReport" : {
        "title" : "Campaign Report",
        "type" : "object",
        "properties" : {
          "forwards" : {
            "$ref" : "#/components/schemas/Forwards"
          },
          "share_report" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShareReport"
            } ],
            "x-ballerina-name" : "shareReport"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "rss_last_send" : {
            "title" : "RSS Last Send",
            "type" : "string",
            "description" : "For RSS campaigns, the date and time of the last send in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "rssLastSend"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto)"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "industry_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/IndustryStats"
            } ],
            "x-ballerina-name" : "industryStats"
          },
          "list_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ListStats"
            } ],
            "x-ballerina-name" : "listStats"
          },
          "campaign_title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignTitle"
          },
          "facebook_likes" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/FacebookLikes"
            } ],
            "x-ballerina-name" : "facebookLikes"
          },
          "timeseries" : {
            "title" : "Timeseries",
            "type" : "array",
            "description" : "An hourly breakdown of the performance of the campaign over the first 24 hours",
            "items" : {
              "$ref" : "#/components/schemas/CampaignSubReportsTimeseries"
            }
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "x-ballerina-name" : "emailsSent"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/ECommerceReport"
          },
          "id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign"
          },
          "bounces" : {
            "$ref" : "#/components/schemas/Bounces"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "subjectLine"
          },
          "ab_split" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABSplitStats"
            } ],
            "x-ballerina-name" : "abSplit"
          },
          "timewarp" : {
            "title" : "Timewarp Stats",
            "type" : "array",
            "description" : "An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp",
            "items" : {
              "$ref" : "#/components/schemas/CampaignSubReportsTimewarp"
            }
          },
          "unsubscribed" : {
            "title" : "Unsubscribe Count",
            "type" : "integer",
            "description" : "The total number of unsubscribed members for this campaign",
            "readOnly" : true
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a campaign was sent in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "opens" : {
            "$ref" : "#/components/schemas/Opens"
          },
          "clicks" : {
            "$ref" : "#/components/schemas/Clicks"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "integer",
            "description" : "The number of abuse reports generated for this campaign",
            "x-ballerina-name" : "abuseReports"
          },
          "delivery_status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDeliveryStatus"
            } ],
            "x-ballerina-name" : "deliveryStatus"
          }
        },
        "description" : "Report details about a sent campaign"
      },
      "Address" : {
        "title" : "Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The store's country",
            "example" : "United States"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for to the store's country",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The store's state name or normalized province",
            "example" : "Georgia"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the store's mailing address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city the store is located in",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The store's mailing address",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude of the store location",
            "example" : 45.427408
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the store's province or state",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The store's postal or zip code",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude of the store location",
            "example" : -75.68903
          }
        },
        "description" : "The store address"
      },
      "AutomationDelay" : {
        "title" : "Automation Delay",
        "required" : [ "action" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "title" : "Delay Amount",
            "type" : "integer",
            "description" : "The delay amount for an automation email",
            "example" : 1
          },
          "action" : {
            "title" : "Delay Action",
            "type" : "string",
            "description" : "The action that triggers the delay of an automation emails",
            "example" : "signup",
            "enum" : [ "signup", "ecomm_abandoned_browse", "ecomm_abandoned_cart" ]
          },
          "type" : {
            "title" : "Delay Type",
            "type" : "string",
            "description" : "The type of delay for an automation email",
            "example" : "day",
            "enum" : [ "now", "day", "hour", "week" ]
          },
          "direction" : {
            "title" : "Delay Direction",
            "type" : "string",
            "description" : "Whether the delay settings describe before or after the delay action of an automation email",
            "example" : "after",
            "enum" : [ "after" ]
          }
        },
        "description" : "The delay settings for an automation email"
      },
      "ECommerceReport1" : {
        "title" : "E-Commerce Report",
        "type" : "object",
        "properties" : {
          "total_spent" : {
            "title" : "Total Spent",
            "type" : "number",
            "description" : "The total spent for a campaign. Calculated as the sum of all order totals with no deductions",
            "readOnly" : true,
            "x-ballerina-name" : "totalSpent"
          },
          "total_revenue" : {
            "title" : "Total Revenue",
            "type" : "number",
            "description" : "The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals",
            "readOnly" : true,
            "x-ballerina-name" : "totalRevenue"
          },
          "total_orders" : {
            "title" : "Total Orders",
            "type" : "integer",
            "description" : "The total orders for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "totalOrders"
          }
        },
        "description" : "E-Commerce stats for a campaign"
      },
      "GrowthHistory" : {
        "title" : "Growth History",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "history" : {
            "title" : "Members",
            "type" : "array",
            "description" : "An array of objects, each representing a monthly growth report for a list",
            "items" : {
              "$ref" : "#/components/schemas/GrowthHistory2"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A month-by-month summary of a specific list's growth activity"
      },
      "TemplateFolder" : {
        "title" : "Template Folder",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          }
        },
        "description" : "A folder used to organize templates"
      },
      "SendChecklist" : {
        "title" : "Send Checklist",
        "type" : "object",
        "properties" : {
          "is_ready" : {
            "title" : "Ready?",
            "type" : "boolean",
            "description" : "Whether the campaign is ready to send",
            "x-ballerina-name" : "isReady"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "items" : {
            "title" : "Items",
            "type" : "array",
            "description" : "A list of feedback items to review before sending your campaign",
            "items" : {
              "$ref" : "#/components/schemas/SendChecklistItems"
            }
          }
        },
        "description" : "The send checklist for the campaign"
      },
      "LandingPageContent" : {
        "title" : "Landing Page Content",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "json" : {
            "title" : "Landing Page JSON",
            "type" : "string",
            "description" : "The JSON Structure for the landing page"
          },
          "html" : {
            "title" : "Landing Page HTML",
            "type" : "string",
            "description" : "The raw HTML for the landing page"
          }
        },
        "description" : "The HTML content for a landing page"
      },
      "MembersToSubscribeUnsubscribeTofromAListInBatch" : {
        "title" : "Members to Subscribe/Unsubscribe to/from a List in batch",
        "required" : [ "members" ],
        "type" : "object",
        "properties" : {
          "members" : {
            "title" : "List Members",
            "type" : "array",
            "description" : "An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call",
            "items" : {
              "$ref" : "#/components/schemas/AddListMembers"
            }
          },
          "sync_tags" : {
            "title" : "Sync Tags",
            "type" : "boolean",
            "description" : "Whether this batch operation will replace all existing tags with tags in request",
            "x-ballerina-name" : "syncTags"
          },
          "update_existing" : {
            "title" : "Update Existing Members",
            "type" : "boolean",
            "description" : "Whether this batch operation will change existing members' subscription status",
            "x-ballerina-name" : "updateExisting"
          }
        },
        "description" : "Members to subscribe to or unsubscribe from a list"
      },
      "InlineResponse20012FacebookAds" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/FacebookAdsAllOf11"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsAllOf112"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsFacebookAdsAllOf1123"
        }, {
          "$ref" : "#/components/schemas/FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf11234"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20012FacebookAdsAllOf5"
        } ]
      },
      "CampaignFeedback2" : {
        "title" : "Campaign Feedback",
        "type" : "object",
        "properties" : {
          "is_complete" : {
            "title" : "Complete",
            "type" : "boolean",
            "description" : "The status of feedback",
            "x-ballerina-name" : "isComplete"
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The content of the feedback"
          },
          "block_id" : {
            "title" : "Block ID",
            "type" : "integer",
            "description" : "The block id for the editable block that the feedback addresses",
            "x-ballerina-name" : "blockId"
          }
        },
        "description" : "A specific feedback message from a specific campaign"
      },
      "CampaignFeedback1" : {
        "title" : "Campaign Feedback",
        "type" : "object",
        "properties" : {
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the feedback was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "parent_id" : {
            "title" : "Parent ID",
            "type" : "integer",
            "description" : "If a reply, the id of the parent feedback item",
            "readOnly" : true,
            "x-ballerina-name" : "parentId"
          },
          "feedback_id" : {
            "title" : "Feedback ID",
            "type" : "integer",
            "description" : "The individual id for the feedback item",
            "readOnly" : true,
            "x-ballerina-name" : "feedbackId"
          },
          "created_at" : {
            "title" : "Created At",
            "type" : "string",
            "description" : "The date and time the feedback item was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "is_complete" : {
            "title" : "Complete",
            "type" : "boolean",
            "description" : "The status of feedback",
            "x-ballerina-name" : "isComplete"
          },
          "source" : {
            "title" : "Source",
            "type" : "string",
            "description" : "The source of the feedback",
            "readOnly" : true,
            "enum" : [ "api", "email", "sms", "web", "ios", "android" ]
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The content of the feedback"
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The login name of the user who created the feedback",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "block_id" : {
            "title" : "Block ID",
            "type" : "integer",
            "description" : "The block id for the editable block that the feedback addresses",
            "x-ballerina-name" : "blockId"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A specific feedback message from a specific campaign"
      },
      "CampaignFeedback3" : {
        "title" : "Campaign Feedback",
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the feedback was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "parent_id" : {
            "title" : "Parent ID",
            "type" : "integer",
            "description" : "If a reply, the id of the parent feedback item",
            "readOnly" : true,
            "x-ballerina-name" : "parentId"
          },
          "feedback_id" : {
            "title" : "Feedback ID",
            "type" : "integer",
            "description" : "The individual id for the feedback item",
            "readOnly" : true,
            "x-ballerina-name" : "feedbackId"
          },
          "created_at" : {
            "title" : "Created At",
            "type" : "string",
            "description" : "The date and time the feedback item was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "is_complete" : {
            "title" : "Complete",
            "type" : "boolean",
            "description" : "The status of feedback",
            "x-ballerina-name" : "isComplete"
          },
          "source" : {
            "title" : "Source",
            "type" : "string",
            "description" : "The source of the feedback",
            "readOnly" : true,
            "enum" : [ "api", "email", "sms", "web", "ios", "android" ]
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The content of the feedback"
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The login name of the user who created the feedback",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "block_id" : {
            "title" : "Block ID",
            "type" : "integer",
            "description" : "The block id for the editable block that the feedback addresses",
            "x-ballerina-name" : "blockId"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A specific feedback message from a specific campaign"
      },
      "ListLocation" : {
        "title" : "List Location",
        "type" : "object",
        "properties" : {
          "cc" : {
            "title" : "cc",
            "type" : "string",
            "description" : "The ISO 3166 2 digit country code",
            "readOnly" : true
          },
          "country" : {
            "title" : "Country Name",
            "type" : "string",
            "description" : "The name of the country",
            "readOnly" : true
          },
          "total" : {
            "title" : "total",
            "type" : "integer",
            "description" : "The total number of subscribers in the country",
            "readOnly" : true
          },
          "percent" : {
            "title" : "percent",
            "type" : "number",
            "description" : "The percent of subscribers in the country",
            "readOnly" : true
          }
        }
      },
      "InlineResponse20013AudienceActivityRevenue" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string"
          },
          "revenue" : {
            "type" : "number"
          }
        }
      },
      "AutomationTrigger1" : {
        "title" : "Automation Trigger",
        "required" : [ "workflow_type" ],
        "type" : "object",
        "properties" : {
          "runtime" : {
            "$ref" : "#/components/schemas/AutomationWorkflowRuntimeSettings"
          },
          "workflow_emails_count" : {
            "title" : "Workflow Emails Count",
            "type" : "integer",
            "description" : "The number of emails in the Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowEmailsCount"
          },
          "workflow_type" : {
            "title" : "Workflow Type",
            "type" : "string",
            "description" : "The type of Automation workflow",
            "enum" : [ "abandonedBrowse", "abandonedCart", "api", "bestCustomers", "categoryFollowup", "dateAdded", "emailFollowup", "emailSeries", "groupAdd", "groupRemove", "mandrill", "productFollowup", "purchaseFollowup", "recurringEvent", "specialEvent", "visitUrl", "welcomeSeries" ],
            "x-ballerina-name" : "workflowType"
          },
          "workflow_title" : {
            "title" : "Workflow Title",
            "type" : "string",
            "description" : "The title of the workflow type",
            "readOnly" : true,
            "x-ballerina-name" : "workflowTitle"
          }
        },
        "description" : "Available triggers for Automation workflows"
      },
      "InterestCategory" : {
        "title" : "Interest Category",
        "required" : [ "title", "type" ],
        "type" : "object",
        "properties" : {
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the categories are displayed in the list. Lower numbers display first",
            "x-ballerina-name" : "displayOrder"
          },
          "title" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The text description of this category. This field appears on signup forms and is often phrased as a question"
          },
          "type" : {
            "title" : "Display Type",
            "type" : "string",
            "description" : "Determines how this category’s interests appear on signup forms",
            "enum" : [ "checkboxes", "dropdown", "radio", "hidden" ]
          }
        },
        "description" : "Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application"
      },
      "Sources" : {
        "title" : "Sources",
        "type" : "object",
        "properties" : {
          "admin" : {
            "title" : "Admin",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by admin-initiated actions in the web interface",
            "example" : true
          },
          "api" : {
            "title" : "API",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by actions initiated via the API",
            "example" : true
          },
          "user" : {
            "title" : "User",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered by subscriber-initiated actions",
            "example" : true
          }
        },
        "description" : "The possible sources of any events that can trigger the webhook and whether they are enabled"
      },
      "SubscriberList2" : {
        "title" : "Subscriber List",
        "required" : [ "campaign_defaults", "contact", "email_type_option", "name", "permission_reminder" ],
        "type" : "object",
        "properties" : {
          "notify_on_subscribe" : {
            "title" : "Notify on Subscribe",
            "type" : "string",
            "description" : "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnSubscribe"
          },
          "email_type_option" : {
            "title" : "Email Type Option",
            "type" : "boolean",
            "description" : "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup",
            "x-ballerina-name" : "emailTypeOption"
          },
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "boolean",
            "description" : "Whether or not the list has marketing permissions (eg. GDPR) enabled",
            "default" : false,
            "x-ballerina-name" : "marketingPermissions"
          },
          "permission_reminder" : {
            "title" : "Permission Reminder",
            "type" : "string",
            "description" : "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list",
            "x-ballerina-name" : "permissionReminder"
          },
          "use_archive_bar" : {
            "title" : "Use Archive Bar",
            "type" : "boolean",
            "description" : "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default",
            "default" : false,
            "x-ballerina-name" : "useArchiveBar"
          },
          "notify_on_unsubscribe" : {
            "title" : "Notify on Unsubscribe",
            "type" : "string",
            "description" : "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnUnsubscribe"
          },
          "contact" : {
            "$ref" : "#/components/schemas/ListContact1"
          },
          "name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list"
          },
          "double_optin" : {
            "title" : "Double Opt In",
            "type" : "boolean",
            "description" : "Whether or not to require the subscriber to confirm subscription via email",
            "default" : false,
            "x-ballerina-name" : "doubleOptin"
          },
          "campaign_defaults" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDefaults"
            } ],
            "x-ballerina-name" : "campaignDefaults"
          }
        },
        "description" : "Information about a specific list"
      },
      "ClickSummary" : {
        "title" : "Click Summary",
        "type" : "object",
        "properties" : {
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The total number of clicks to the campaign's URL",
            "readOnly" : true
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The timestamp for the last click to the URL",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastClick"
          },
          "locations" : {
            "title" : "Click Locations",
            "type" : "array",
            "description" : "A summary of the top click locations",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Location2"
            }
          },
          "first_click" : {
            "title" : "First Click",
            "type" : "string",
            "description" : "The timestamp for the first click to the URL",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "firstClick"
          }
        },
        "description" : "A summary of the click-throughs on the campaign's URL",
        "readOnly" : true
      },
      "SubscriberList3" : {
        "title" : "Subscriber List",
        "type" : "object",
        "properties" : {
          "notify_on_subscribe" : {
            "title" : "Notify on Subscribe",
            "type" : "string",
            "description" : "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnSubscribe"
          },
          "subscribe_url_long" : {
            "title" : "Subscribe URL Long",
            "type" : "string",
            "description" : "The full version of this list's subscribe form (host will vary)",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeUrlLong"
          },
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "boolean",
            "description" : "Whether or not the list has marketing permissions (eg. GDPR) enabled",
            "default" : false,
            "x-ballerina-name" : "marketingPermissions"
          },
          "permission_reminder" : {
            "title" : "Permission Reminder",
            "type" : "string",
            "description" : "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list",
            "x-ballerina-name" : "permissionReminder"
          },
          "use_archive_bar" : {
            "title" : "Use Archive Bar",
            "type" : "boolean",
            "description" : "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default",
            "default" : false,
            "x-ballerina-name" : "useArchiveBar"
          },
          "notify_on_unsubscribe" : {
            "title" : "Notify on Unsubscribe",
            "type" : "string",
            "description" : "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnUnsubscribe"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "Legacy - visibility settings are no longer used",
            "enum" : [ "pub", "prv" ]
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "date_created" : {
            "title" : "Creation Date",
            "type" : "string",
            "description" : "The date and time that this list was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateCreated"
          },
          "campaign_defaults" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDefaults1"
            } ],
            "x-ballerina-name" : "campaignDefaults"
          },
          "web_id" : {
            "title" : "List Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "modules" : {
            "title" : "Modules",
            "type" : "array",
            "description" : "Any list-specific modules installed for this list",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "email_type_option" : {
            "title" : "Email Type Option",
            "type" : "boolean",
            "description" : "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup",
            "x-ballerina-name" : "emailTypeOption"
          },
          "beamer_address" : {
            "title" : "Beamer Address",
            "type" : "string",
            "description" : "The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address",
            "readOnly" : true,
            "x-ballerina-name" : "beamerAddress"
          },
          "has_welcome" : {
            "title" : "Has Welcome",
            "type" : "boolean",
            "description" : "Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup",
            "example" : false,
            "default" : false,
            "x-ballerina-name" : "hasWelcome"
          },
          "stats" : {
            "$ref" : "#/components/schemas/Statistics"
          },
          "contact" : {
            "$ref" : "#/components/schemas/ListContact2"
          },
          "name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list"
          },
          "list_rating" : {
            "title" : "List Rating",
            "type" : "integer",
            "description" : "An auto-generated activity score for the list (0-5)",
            "readOnly" : true,
            "x-ballerina-name" : "listRating"
          },
          "double_optin" : {
            "title" : "Double Opt In",
            "type" : "boolean",
            "description" : "Whether or not to require the subscriber to confirm subscription via email",
            "default" : false,
            "x-ballerina-name" : "doubleOptin"
          },
          "id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this list",
            "readOnly" : true
          },
          "subscribe_url_short" : {
            "title" : "Subscribe URL Short",
            "type" : "string",
            "description" : "Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeUrlShort"
          }
        },
        "description" : "Information about a specific list"
      },
      "MarketingPermission" : {
        "title" : "Marketing Permission",
        "type" : "object",
        "properties" : {
          "marketing_permission_id" : {
            "title" : "Marketing Permission ID",
            "type" : "string",
            "description" : "The id for the marketing permission on the list",
            "x-ballerina-name" : "marketingPermissionId"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "If the subscriber has opted-in to the marketing permission"
          }
        },
        "description" : "A single marketing permission a subscriber has either opted-in to or opted-out of"
      },
      "SubscriberList1" : {
        "title" : "Subscriber List",
        "type" : "object",
        "properties" : {
          "notify_on_subscribe" : {
            "title" : "Notify on Subscribe",
            "type" : "string",
            "description" : "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnSubscribe"
          },
          "subscribe_url_long" : {
            "title" : "Subscribe URL Long",
            "type" : "string",
            "description" : "The full version of this list's subscribe form (host will vary)",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeUrlLong"
          },
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "boolean",
            "description" : "Whether or not the list has marketing permissions (eg. GDPR) enabled",
            "default" : false,
            "x-ballerina-name" : "marketingPermissions"
          },
          "permission_reminder" : {
            "title" : "Permission Reminder",
            "type" : "string",
            "description" : "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list",
            "x-ballerina-name" : "permissionReminder"
          },
          "use_archive_bar" : {
            "title" : "Use Archive Bar",
            "type" : "boolean",
            "description" : "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default",
            "default" : false,
            "x-ballerina-name" : "useArchiveBar"
          },
          "notify_on_unsubscribe" : {
            "title" : "Notify on Unsubscribe",
            "type" : "string",
            "description" : "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnUnsubscribe"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "Legacy - visibility settings are no longer used",
            "enum" : [ "pub", "prv" ]
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "date_created" : {
            "title" : "Creation Date",
            "type" : "string",
            "description" : "The date and time that this list was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateCreated"
          },
          "campaign_defaults" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDefaults1"
            } ],
            "x-ballerina-name" : "campaignDefaults"
          },
          "web_id" : {
            "title" : "List Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "modules" : {
            "title" : "Modules",
            "type" : "array",
            "description" : "Any list-specific modules installed for this list",
            "readOnly" : true,
            "items" : {
              "type" : "string"
            }
          },
          "email_type_option" : {
            "title" : "Email Type Option",
            "type" : "boolean",
            "description" : "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup",
            "x-ballerina-name" : "emailTypeOption"
          },
          "beamer_address" : {
            "title" : "Beamer Address",
            "type" : "string",
            "description" : "The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address",
            "readOnly" : true,
            "x-ballerina-name" : "beamerAddress"
          },
          "has_welcome" : {
            "title" : "Has Welcome",
            "type" : "boolean",
            "description" : "Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup",
            "example" : false,
            "default" : false,
            "x-ballerina-name" : "hasWelcome"
          },
          "stats" : {
            "$ref" : "#/components/schemas/Statistics"
          },
          "contact" : {
            "$ref" : "#/components/schemas/ListContact2"
          },
          "name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list"
          },
          "list_rating" : {
            "title" : "List Rating",
            "type" : "integer",
            "description" : "An auto-generated activity score for the list (0-5)",
            "readOnly" : true,
            "x-ballerina-name" : "listRating"
          },
          "double_optin" : {
            "title" : "Double Opt In",
            "type" : "boolean",
            "description" : "Whether or not to require the subscriber to confirm subscription via email",
            "default" : false,
            "x-ballerina-name" : "doubleOptin"
          },
          "id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this list",
            "readOnly" : true
          },
          "subscribe_url_short" : {
            "title" : "Subscribe URL Short",
            "type" : "string",
            "description" : "Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeUrlShort"
          }
        },
        "description" : "Information about a specific list"
      },
      "InlineResponse20011Site" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the connected site",
            "example" : "My Connected Site"
          },
          "id" : {
            "type" : "integer",
            "description" : "The ID of this connected site",
            "example" : 43
          },
          "url" : {
            "type" : "string",
            "description" : "The URL for this connected site",
            "example" : "www.example.com"
          }
        },
        "description" : "Connected Site"
      },
      "ToNonPurchasers" : {
        "title" : "To Non-Purchasers",
        "type" : "object",
        "properties" : {
          "reason" : {
            "title" : "Reason",
            "type" : "string",
            "description" : "The reason the campaign is not eligible to be resent to this segment",
            "readOnly" : true
          },
          "is_eligible" : {
            "title" : "Is Eligible",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to this segment",
            "readOnly" : true,
            "x-ballerina-name" : "isEligible"
          }
        },
        "description" : "Determines if the campaign qualifies to be resent to non-purchasers"
      },
      "BatchesBody" : {
        "required" : [ "operations" ],
        "type" : "object",
        "properties" : {
          "operations" : {
            "title" : "Operations List",
            "type" : "array",
            "description" : "An array of objects that describes operations to perform",
            "items" : {
              "$ref" : "#/components/schemas/Operations"
            }
          }
        }
      },
      "CampaignFeedback" : {
        "title" : "Campaign Feedback",
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "is_complete" : {
            "title" : "Complete",
            "type" : "boolean",
            "description" : "The status of feedback",
            "x-ballerina-name" : "isComplete"
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The content of the feedback"
          },
          "block_id" : {
            "title" : "Block ID",
            "type" : "integer",
            "description" : "The block id for the editable block that the feedback addresses",
            "x-ballerina-name" : "blockId"
          }
        },
        "description" : "A specific feedback message from a specific campaign"
      },
      "SubscriberRemovedFromAutomationWorkflow" : {
        "title" : "Subscriber Removed from Automation Workflow",
        "type" : "object",
        "properties" : {
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies a list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          }
        },
        "description" : "A summary of a subscriber removed from an Automation workflow"
      },
      "Conversation" : {
        "title" : "Conversation",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "From Email",
            "type" : "string",
            "description" : "A label representing the email of the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromEmail"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique identifier of the list for this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The subject of the message",
            "readOnly" : true
          },
          "unread_messages" : {
            "title" : "Unread Messages",
            "type" : "integer",
            "description" : "The number of unread messages in this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "unreadMessages"
          },
          "last_message" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/LastMessage"
            } ],
            "x-ballerina-name" : "lastMessage"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this conversation",
            "readOnly" : true
          },
          "message_count" : {
            "title" : "Message Count",
            "type" : "integer",
            "description" : "The total number of messages in this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "messageCount"
          },
          "from_label" : {
            "title" : "From Label",
            "type" : "string",
            "description" : "A label representing the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromLabel"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique identifier of the campaign for this conversation",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account"
      },
      "InlineResponse20013AllOf1" : {
        "type" : "object",
        "properties" : {
          "has_segment" : {
            "title" : "Has Segment",
            "type" : "boolean",
            "description" : "If this outreach targets a segment of your audience",
            "x-ballerina-name" : "hasSegment"
          },
          "thumbnail" : {
            "title" : "Thumbnail",
            "type" : "string",
            "description" : "The URL of the thumbnail for this outreach"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the outreach was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createTime"
          },
          "canceled_at" : {
            "title" : "Canceled At",
            "type" : "string",
            "description" : "The date and time the outreach was canceled in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "canceledAt"
          },
          "web_id" : {
            "title" : "Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "x-ballerina-name" : "webId"
          },
          "type" : {
            "title" : "Outreach Type",
            "type" : "string",
            "description" : "The type of outreach this object is",
            "enum" : [ "regular", "email-touchpoint", "plaintext", "rss", "reconfirm", "variate", "absplit", "automation", "facebook", "google", "autoresponder", "transactional", "page", "website", "social_post", "survey", "customer_journey", "sms" ]
          },
          "show_report" : {
            "title" : "Show Report",
            "type" : "boolean",
            "description" : "Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context",
            "x-ballerina-name" : "showReport"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the outreach was started in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startTime"
          },
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the outreach was last updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAt"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/Recipients"
          },
          "published_time" : {
            "title" : "Publish Time",
            "type" : "string",
            "description" : "The date and time the outreach was (or will be) published in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "publishedTime"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "Title or name of an Outreach"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of an Outreach"
          },
          "status" : {
            "title" : "Outreach Status",
            "type" : "string",
            "description" : "The status of this outreach",
            "enum" : [ "save", "paused", "schedule", "scheduled", "sending", "sent", "canceled", "canceling", "active", "disconnected", "somepaused", "draft", "completed", "partialRejected", "pending", "rejected", "published", "unpublished" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "SurveyQuestionReport1" : {
        "title" : "Survey Question Report",
        "type" : "object",
        "properties" : {
          "range_low_label" : {
            "title" : "Range Low Label",
            "type" : "string",
            "description" : "Label for the low end of the range",
            "readOnly" : true,
            "x-ballerina-name" : "rangeLowLabel"
          },
          "query" : {
            "title" : "Query Text",
            "type" : "string",
            "description" : "The query of the survey question",
            "readOnly" : true
          },
          "average_rating" : {
            "title" : "Average Rating for a Range Question",
            "type" : "number",
            "description" : "The average rating for this range question",
            "format" : "float",
            "readOnly" : true,
            "example" : 2.5,
            "x-ballerina-name" : "averageRating"
          },
          "subscribe_checkbox_label" : {
            "title" : "Subscribe Checkbox Label",
            "type" : "string",
            "description" : "Label used for the subscribe checkbox for this email question",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeCheckboxLabel"
          },
          "type" : {
            "title" : "Response Type",
            "type" : "string",
            "description" : "The response type of the survey question",
            "readOnly" : true,
            "enum" : [ "pickOne", "pickMany", "range", "text", "email" ]
          },
          "range_high_label" : {
            "title" : "Range High Label",
            "type" : "string",
            "description" : "Label for the high end of the range",
            "readOnly" : true,
            "x-ballerina-name" : "rangeHighLabel"
          },
          "subscribe_checkbox_enabled" : {
            "title" : "Is Subscribe Checkbox Enabled",
            "type" : "boolean",
            "description" : "Whether the subscribe checkbox is shown for this email question",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeCheckboxEnabled"
          },
          "survey_id" : {
            "title" : "Survey ID",
            "type" : "string",
            "description" : "The unique ID of the survey",
            "readOnly" : true,
            "x-ballerina-name" : "surveyId"
          },
          "has_other" : {
            "title" : "Has Other Option",
            "type" : "boolean",
            "description" : "Whether this survey question has an 'other' option",
            "readOnly" : true,
            "x-ballerina-name" : "hasOther"
          },
          "placeholder_label" : {
            "title" : "Placeholder Label",
            "type" : "string",
            "description" : "Placeholder text for this survey question's answer box",
            "readOnly" : true,
            "x-ballerina-name" : "placeholderLabel"
          },
          "other_label" : {
            "title" : "Other Option Label",
            "type" : "string",
            "description" : "Label used for the 'other' option of this survey question",
            "readOnly" : true,
            "x-ballerina-name" : "otherLabel"
          },
          "contact_counts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContactCounts"
            } ],
            "x-ballerina-name" : "contactCounts"
          },
          "is_required" : {
            "title" : "Is Required",
            "type" : "boolean",
            "description" : "Whether this survey question is required to answer",
            "readOnly" : true,
            "x-ballerina-name" : "isRequired"
          },
          "options" : {
            "title" : "Options",
            "type" : "array",
            "description" : "The answer choices for this question",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/SurveyQuestionReportOptions"
            }
          },
          "total_responses" : {
            "title" : "Total Responses",
            "type" : "integer",
            "description" : "The total number of responses to this question",
            "readOnly" : true,
            "example" : 810,
            "x-ballerina-name" : "totalResponses"
          },
          "id" : {
            "title" : "Survey Question ID",
            "type" : "string",
            "description" : "The ID of the survey question",
            "readOnly" : true
          },
          "merge_field" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/MergeField4"
            } ],
            "x-ballerina-name" : "mergeField"
          }
        },
        "description" : "The details of a survey question's report"
      },
      "InlineResponse20013AllOf5" : {
        "type" : "object",
        "properties" : {
          "report_summary" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummary"
            }, {
              "$ref" : "#/components/schemas/ReportSummary"
            }, {
              "type" : "object",
              "properties" : {
                "reach" : {
                  "type" : "integer"
                },
                "click_rate" : {
                  "type" : "number",
                  "x-ballerina-name" : "clickRate"
                },
                "impressions" : {
                  "type" : "number"
                },
                "ecommerce" : {
                  "$ref" : "#/components/schemas/ReportSummaryEcommerce"
                },
                "clicks" : {
                  "type" : "integer"
                }
              }
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "LandingPageReport" : {
        "title" : "Landing Page Report",
        "type" : "object",
        "properties" : {
          "unique_visits" : {
            "title" : "Unique Visits",
            "type" : "integer",
            "description" : "The number of unique visits to this landing pages",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueVisits"
          },
          "subscribes" : {
            "title" : "Subscribes",
            "type" : "integer",
            "description" : "The number of subscribes to this landing pages",
            "readOnly" : true
          },
          "list_id" : {
            "title" : "List Id",
            "type" : "string",
            "description" : "The list id connected to this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "web_id" : {
            "title" : "Landing Page Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application",
            "readOnly" : true,
            "example" : 33345484,
            "x-ballerina-name" : "webId"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "List Name",
            "readOnly" : true,
            "example" : "Test List",
            "x-ballerina-name" : "listName"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The name of the landing page the user's customers will see",
            "readOnly" : true
          },
          "url" : {
            "title" : "Url",
            "type" : "string",
            "description" : "The landing page url",
            "readOnly" : true
          },
          "signup_tags" : {
            "title" : "Signup Tags",
            "type" : "array",
            "description" : "A list of tags associated to the landing page",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            },
            "x-ballerina-name" : "signupTags"
          },
          "visits" : {
            "title" : "Visits",
            "type" : "integer",
            "description" : "The number of visits to this landing pages",
            "readOnly" : true
          },
          "timeseries" : {
            "$ref" : "#/components/schemas/LandingPageReportTimeseries"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/LandingPageReportEcommerce"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name of this landing page the user will see",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The number of clicks to this landing pages",
            "readOnly" : true
          },
          "id" : {
            "title" : "Landing Page ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this landing page",
            "readOnly" : true,
            "example" : "00dfc2e1f0"
          },
          "published_at" : {
            "title" : "Published At",
            "type" : "string",
            "description" : "The time this landing page was published",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "publishedAt"
          },
          "conversion_rate" : {
            "title" : "Conversion rate",
            "type" : "number",
            "description" : "The percentage of people who visited your landing page and were added to your list",
            "readOnly" : true,
            "x-ballerina-name" : "conversionRate"
          },
          "unpublished_at" : {
            "title" : "Unpublished At",
            "type" : "string",
            "description" : "The time this landing page was unpublished",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "unpublishedAt"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The status of the landing page",
            "readOnly" : true
          }
        },
        "description" : "A summary of an individual landing page's settings and content"
      },
      "BillingAddress" : {
        "title" : "Billing Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The country in the billing address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the billing address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the billing address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The billing address for the order",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the billing address location",
            "example" : 45.427408
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province in the billing address",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the billing address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the billing address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the billing address",
            "example" : "8675309"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with the billing address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with the billing address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the billing address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the billing address location",
            "example" : -75.68903
          }
        },
        "description" : "The billing address for the order"
      },
      "Events" : {
        "title" : "Events",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "occurred_at" : {
            "title" : "Occurred Time",
            "type" : "string",
            "description" : "The date and time the event occurred in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "occurredAt"
          },
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "Events created with the is_syncing value set to `true` will not trigger automations",
            "x-ballerina-name" : "isSyncing"
          },
          "name" : {
            "title" : "Event Name",
            "type" : "string",
            "description" : "The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length"
          },
          "properties" : {
            "title" : "Properties",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "An optional list of properties"
          }
        },
        "description" : "A new event for a specific list member"
      },
      "AutomationWorkflowEmail" : {
        "title" : "Automation Workflow Email",
        "type" : "object",
        "properties" : {
          "archive_url" : {
            "title" : "Archive URL",
            "type" : "string",
            "description" : "The link to the campaign's archive version in ISO 8601 format",
            "readOnly" : true,
            "x-ballerina-name" : "archiveUrl"
          },
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings3"
          },
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the campaign was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "trigger_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AutomationTrigger1"
            } ],
            "x-ballerina-name" : "triggerSettings"
          },
          "web_id" : {
            "title" : "Automation Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "example" : 33345484,
            "x-ballerina-name" : "webId"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions1"
          },
          "needs_block_refresh" : {
            "title" : "Needs Block Refresh",
            "type" : "boolean",
            "description" : "Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor",
            "readOnly" : true,
            "example" : true,
            "x-ballerina-name" : "needsBlockRefresh"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the campaign was started in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "startTime"
          },
          "delay" : {
            "$ref" : "#/components/schemas/AutomationDelay1"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : " The date and time a campaign was sent in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')",
            "readOnly" : true,
            "x-ballerina-name" : "contentType"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List6"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "id" : {
            "title" : "Automation Email ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the Automation email",
            "readOnly" : true
          },
          "position" : {
            "title" : "Email Position",
            "type" : "integer",
            "description" : "The position of an Automation email in a workflow",
            "readOnly" : true
          },
          "has_logo_merge_tag" : {
            "title" : "Has Logo Merge Tag",
            "type" : "boolean",
            "description" : "Determines if the campaign contains the *|BRAND:LOGO|* merge tag",
            "readOnly" : true,
            "example" : true,
            "x-ballerina-name" : "hasLogoMergeTag"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "sending" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        },
        "description" : "A summary of an individual Automation workflow email"
      },
      "ShareReport" : {
        "title" : "Share Report",
        "type" : "object",
        "properties" : {
          "share_url" : {
            "title" : "Report URL",
            "type" : "string",
            "description" : "The URL for the VIP report",
            "readOnly" : true,
            "x-ballerina-name" : "shareUrl"
          },
          "share_password" : {
            "title" : "Report Password",
            "type" : "string",
            "description" : "If password protected, the password for the VIP report",
            "readOnly" : true,
            "x-ballerina-name" : "sharePassword"
          }
        },
        "description" : "The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/)"
      },
      "TemplateContent" : {
        "title" : "Template Content",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id of the template to use"
          },
          "sections" : {
            "title" : "Template Sections",
            "type" : "object",
            "properties" : { },
            "description" : "Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template"
          }
        },
        "description" : "Use this template to generate the HTML content of the campaign"
      },
      "AutomationWorkflow" : {
        "title" : "Automation Workflow",
        "required" : [ "recipients", "trigger_settings" ],
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/components/schemas/AutomationCampaignSettings"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List"
          },
          "trigger_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AutomationTrigger"
            } ],
            "x-ballerina-name" : "triggerSettings"
          }
        },
        "description" : "A summary of an individual Automation workflow's settings and content"
      },
      "InlineResponse20011Channel" : {
        "type" : "object",
        "properties" : {
          "fb_placement_feed" : {
            "type" : "boolean",
            "description" : "Is this for facebook feed",
            "example" : true,
            "x-ballerina-name" : "fbPlacementFeed"
          },
          "fb_placement_audience" : {
            "type" : "boolean",
            "description" : "Is this for facebook audience",
            "example" : false,
            "x-ballerina-name" : "fbPlacementAudience"
          },
          "ig_placement_feed" : {
            "type" : "boolean",
            "description" : "Is this for instagram feed",
            "example" : false,
            "x-ballerina-name" : "igPlacementFeed"
          }
        },
        "description" : "Channel settings"
      },
      "PromoRules" : {
        "title" : "Promo Rules",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "promo_rules" : {
            "title" : "Promo Rules",
            "type" : "array",
            "description" : "An array of objects, each representing promo rules defined for a store",
            "items" : {
              "$ref" : "#/components/schemas/ECommercePromoRule3"
            },
            "x-ballerina-name" : "promoRules"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of the store's promo rules"
      },
      "SubscriberLists" : {
        "title" : "Subscriber Lists",
        "required" : [ "lists" ],
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "lists" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a list",
            "items" : {
              "$ref" : "#/components/schemas/SubscriberList3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "constraints" : {
            "$ref" : "#/components/schemas/CollectionAuthorization"
          }
        },
        "description" : "A collection of subscriber lists for this account. Lists contain subscribers who have opted-in to receive correspondence from you or your organization"
      },
      "Automations" : {
        "title" : "Automations",
        "type" : "object",
        "properties" : {
          "abandoned_browse" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AbandonedBrowseAutomation"
            } ],
            "x-ballerina-name" : "abandonedBrowse"
          },
          "abandoned_cart" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AbandonedCartAutomation"
            } ],
            "x-ballerina-name" : "abandonedCart"
          }
        },
        "description" : "Details for the automations attached to this store",
        "readOnly" : true
      },
      "Products" : {
        "title" : "Products",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "products" : {
            "title" : "Products",
            "type" : "array",
            "description" : "An array of objects, each representing a store product",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProduct4"
            }
          }
        },
        "description" : "A collection of a store's products"
      },
      "SendingSchedule1" : {
        "title" : "Sending Schedule",
        "type" : "object",
        "properties" : {
          "hour" : {
            "title" : "Sending Hour",
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/)"
          },
          "weekly_send_day" : {
            "title" : "Weekly Sending Day",
            "type" : "string",
            "description" : "The day of the week to send a weekly RSS Campaign",
            "enum" : [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ],
            "x-ballerina-name" : "weeklySendDay"
          },
          "daily_send" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DailySendingDays"
            } ],
            "x-ballerina-name" : "dailySend"
          },
          "monthly_send_date" : {
            "title" : "Monthly Sending Day",
            "maximum" : 31,
            "minimum" : 0,
            "type" : "number",
            "description" : "The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February",
            "x-ballerina-name" : "monthlySendDate"
          }
        },
        "description" : "The schedule for sending the RSS Campaign"
      },
      "TemplateContent1" : {
        "title" : "Template Content",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The id of the template to use"
          },
          "sections" : {
            "title" : "Template Sections",
            "type" : "object",
            "properties" : { },
            "description" : "Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template"
          }
        },
        "description" : "Use this template to generate the HTML content for the campaign"
      },
      "CollectionOfTagsTags" : {
        "type" : "object",
        "properties" : {
          "date_added" : {
            "title" : "Date Added",
            "type" : "string",
            "description" : "The date and time the tag was added to the list member in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateAdded"
          },
          "name" : {
            "title" : "Tag Name",
            "type" : "string",
            "description" : "The name of the tag"
          },
          "id" : {
            "title" : "Tag ID",
            "type" : "integer",
            "description" : "The unique id for the tag",
            "readOnly" : true
          }
        }
      },
      "Conditions" : {
        "title" : "Conditions",
        "type" : "object",
        "properties" : {
          "match" : {
            "title" : "Match",
            "type" : "string",
            "description" : "Match type",
            "enum" : [ "any", "all" ]
          },
          "conditions" : {
            "title" : "Segment Type",
            "type" : "array",
            "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)",
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Aim Segment",
                "description" : "Segment by interaction with a specific campaign.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Aim",
                    "enum" : [ "Aim" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "aim" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a specific campaign.",
                    "example" : "aim"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                    "example" : "open"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Automation Segment",
                "description" : "Segment by interaction with an Automation workflow.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Automation",
                    "enum" : [ "Automation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "automation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with an Automation workflow.",
                    "example" : "automation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id for the automation workflow to segment against.",
                    "example" : "2135217"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Poll Activity Segment",
                "description" : "Segment by poll activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "CampaignPoll",
                    "enum" : [ "CampaignPoll" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "poll" ],
                    "title" : "Segment Field",
                    "description" : "Segment by poll activity.",
                    "example" : "poll"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the poll.",
                    "example" : 409
                  }
                }
              }, {
                "type" : "object",
                "title" : "Conversation Segment",
                "description" : "Segment by interaction with a campaign via Conversations.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Conversation",
                    "enum" : [ "Conversation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "conversation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a campaign via Conversations.",
                    "example" : "conversation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Segment",
                "description" : "Segment by a specific date field.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Date",
                    "enum" : [ "Date" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                    "title" : "Segment Field",
                    "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                    "example" : "timestamp_opt"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                    "title" : "Segment Operator",
                    "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                    "example" : "date"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra Value",
                    "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                    "example" : "2015-01-30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Client Segment",
                "description" : "Segment by use of a particular email client.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailClient",
                    "enum" : [ "EmailClient" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "email_client" ],
                    "title" : "Segment Field",
                    "description" : "Segment by use of a particular email client.",
                    "example" : "email_client"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "client_is", "client_not" ],
                    "title" : "Segment Operator",
                    "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                    "example" : "client_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The name of the email client.",
                    "example" : "Gmail"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Language Segment",
                "description" : "Segment by language.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Language",
                    "enum" : [ "Language" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "language" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's language.",
                    "example" : "language"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's language is or is not set to a specific language.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "A two-letter language identifier.",
                    "example" : "en"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Member Rating Segment",
                "description" : "Segment by member rating.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "MemberRating",
                    "enum" : [ "MemberRating" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "rating" ],
                    "title" : "Segment Field",
                    "description" : "Segment by member rating.",
                    "example" : "rating"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The star rating number to segment against.",
                    "example" : 4
                  }
                }
              }, {
                "type" : "object",
                "title" : "Signup Source Segment",
                "description" : "Segment by signup source.",
                "required" : [ "field", "condition_type", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "enum" : [ "SignupSource" ],
                    "x-value" : "SignupSource",
                    "title" : "Type"
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "source" ],
                    "title" : "Segment Field",
                    "example" : "source"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "source_is", "source_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's signup source was/was not a particular value.",
                    "example" : "source_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The signup source.",
                    "example" : "List Import"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey Monkey Segment",
                "description" : "Segment by interaction with a SurveyMonkey survey.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SurveyMonkey",
                    "enum" : [ "SurveyMonkey" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "survey_monkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a SurveyMonkey survey.",
                    "example" : "survey_monkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The unique ID of the survey monkey survey.",
                    "example" : "32179586"
                  }
                }
              }, {
                "type" : "object",
                "title" : "VIP Segment",
                "description" : "Segment by VIP status.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "VIP",
                    "enum" : [ "VIP" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "gmonkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by VIP status.",
                    "example" : "gmonkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is or is not marked as VIP.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Interests Segment",
                "description" : "Segment by an interest group merge field.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Interests",
                    "enum" : [ "Interests" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                    "example" : "interests-123"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is a part of one, all, or none of the groups.",
                    "example" : "interestcontains"
                  },
                  "value" : {
                    "type" : "array",
                    "title" : "Segment Value",
                    "description" : "An array containing strings, each representing a group id.",
                    "items" : {
                      "type" : "string",
                      "example" : [ "44401", "44405", "44409" ]
                    }
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Category Segment",
                "description" : "Segment by purchases in specific items or categories.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommCategory",
                    "enum" : [ "EcommCategory" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_cat", "ecomm_prod" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases in specific items or categories.",
                    "example" : "ecomm_cat"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The ecommerce category/item information.",
                    "example" : "Product"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Number Segment",
                "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommNumber",
                    "enum" : [ "EcommNumber" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                    "title" : "Segment Field",
                    "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                    "example" : "ecomm_orders"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Segment",
                "description" : "Segment by whether someone has purchased anything.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommPurchased",
                    "enum" : [ "EcommPurchased" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_purchased" ],
                    "title" : "Segment Field",
                    "description" : "Segment by whether someone has purchased anything.",
                    "example" : "ecomm_purchased"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Spent Segment",
                "description" : "Segment by amount spent on a single order or across all orders.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommSpent",
                    "enum" : [ "EcommSpent" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                    "title" : "Segment Field",
                    "description" : "Segment by amount spent on a single order or across all orders.",
                    "example" : "ecomm_spent_one"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent 'more' or 'less' than then specified value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The total amount a member spent.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Store Segment",
                "description" : "Segment by purchases from a specific store.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommStore",
                    "enum" : [ "EcommStore" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_store" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases from a specific store.",
                    "example" : "ecomm_store"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have or have not purchased from a specific store.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Operator",
                    "description" : "The store id to segment against.",
                    "example" : "289"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Activity Segment",
                "description" : "Segment by Goal activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalActivity",
                    "enum" : [ "GoalActivity" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal" ],
                    "title" : "Segment Field",
                    "description" : "Segment by Goal activity.",
                    "example" : "goal"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The URL to check Goal activity against."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Timestamp Segment",
                "description" : "Segment by most recent interaction with a website.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalTimestamp",
                    "enum" : [ "GoalTimestamp" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal_last_visited" ],
                    "title" : "Segment Field",
                    "description" : "Segment by most recent interaction with a website.",
                    "example" : "goal_last_visited"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The date to check Goal activity against.",
                    "example" : "2015-07-20 19:45:21"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Similar Subscribers Segment Member Segment",
                "description" : "Segment by similar subscribers.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "FuzzySegment",
                    "enum" : [ "FuzzySegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by similar subscribers.",
                    "example" : "fuzzy_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_is", "fuzzy_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                    "example" : "fuzzy_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the 'similar subscribers' segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Static Segment Member Segment",
                "description" : "Segment by a given static segment.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "StaticSegment",
                    "enum" : [ "StaticSegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "static_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by a given static segment.",
                    "example" : "static_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "static_is", "static_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a static segment.",
                    "example" : "static_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the static segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Location-Based Segment",
                "description" : "Segment by a specific country or US state.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoCountryState",
                    "enum" : [ "IPGeoCountryState" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific country or US state.",
                    "example" : "ipgeocountry"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The two-letter country code or US state abbreviation.",
                    "example" : "US"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Geolocation Segment",
                "description" : "Segment by a specific geographic region.",
                "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoIn",
                    "enum" : [ "IPGeoIn" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoin", "ipgeonotin" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific geographic region.",
                    "example" : "ipgeoin"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 42
                  },
                  "addr" : {
                    "type" : "string",
                    "title" : "Segment Location Address",
                    "description" : "The address of the target location.",
                    "example" : "Atlanta, GA, USA"
                  },
                  "lat" : {
                    "type" : "string",
                    "title" : "Segment Location Latitude",
                    "description" : "The latitude of the target location.",
                    "example" : "33.7489954"
                  },
                  "lng" : {
                    "type" : "string",
                    "title" : "Segment Location Longitude",
                    "description" : "The longitude of the target location.",
                    "example" : "-84.3879824"
                  }
                }
              }, {
                "type" : "object",
                "title" : "US Zip Code Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoInZip",
                    "enum" : [ "IPGeoInZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoinzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific US zip code.",
                    "example" : "ipgeoinzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 25
                  },
                  "extra" : {
                    "type" : "integer",
                    "title" : "Extra Data",
                    "description" : "The zip code to segment against.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Unknown Location-Based Segment",
                "description" : "Segment members whose location information is unknown.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoUnknown",
                    "enum" : [ "IPGeoUnknown" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeounknown" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members for which location information is unknown.",
                    "example" : "ipgeounknown"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Zip Code Location-Based Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoZip",
                    "enum" : [ "IPGeoZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are/are not within a specific US zip code.",
                    "example" : "ipgeonotzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The 5-digit zip code.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Age Segment",
                "description" : "Segment by age ranges in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialAge",
                    "enum" : [ "SocialAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_age" ],
                    "title" : "Segment Field",
                    "description" : "Segment by age ranges in Social Profiles data.",
                    "example" : "social_age"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                    "title" : "Segment Operator",
                    "description" : "The age range to segment.",
                    "example" : "35-54"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Gender Segment",
                "description" : "Segment by listed gender in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialGender",
                    "enum" : [ "SocialGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by listed gender in Social Profiles data.",
                    "example" : "social_gender"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Influence Segment",
                "description" : "Segment by influence rating in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialInfluence",
                    "enum" : [ "SocialInfluence" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_influence" ],
                    "title" : "Segment Field",
                    "description" : "Segment by influence rating in Social Profiles data.",
                    "example" : "social_influence"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles influence rating to segment.",
                    "example" : 2
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkMember",
                    "enum" : [ "SocialNetworkMember" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not on a given social network.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Follow Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkFollow",
                    "enum" : [ "SocialNetworkFollow" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "follow", "notfollow" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not following a linked account on a given social network.",
                    "example" : "follow"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter_follow" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter_follow"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address Merge Field Segment",
                "description" : "Segment by an address-type merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "AddressMerge",
                    "enum" : [ "AddressMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address-type merge field to segment.",
                    "example" : "MMERGE3"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Atlanta"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address/Zip Merge Field Segment",
                "description" : "Segment by an address-type merge field within a given distance.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "ZipMerge",
                    "enum" : [ "ZipMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address or zip-type merge field to segment.",
                    "example" : "MMERGE2"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "geoin" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                    "example" : "geoin"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The distance from the city/zip.",
                    "example" : "25"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra",
                    "description" : "The city or the zip being used to segment against.",
                    "example" : "30318"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Birthday Merge Field Segment",
                "description" : "Segment by a contact's birthday.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "BirthdayMerge",
                    "enum" : [ "BirthdayMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE4"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against (mm/dd).",
                    "example" : "01/30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Merge Field Segment",
                "description" : "Segment by a given date merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "DateMerge",
                    "enum" : [ "DateMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE5"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against.",
                    "example" : "01/30/2015"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Dropdown/Radio Merge Field Segment",
                "description" : "An individual segment condition",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SelectMerge",
                    "enum" : [ "SelectMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A merge field to segment.",
                    "example" : "MMERGE6"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Second Choice"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Text or Number Merge Field Segment",
                "description" : "Segment by a given text or number merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "TextMerge",
                    "enum" : [ "TextMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A text or number merge field to segment.",
                    "example" : "MMERGE7"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text or number merge field with.",
                    "example" : "Freddie's Jokes"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Segment",
                "description" : "Segment by email address.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailAddress",
                    "enum" : [ "EmailAddress" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "merge0", "EMAIL" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's email address.",
                    "example" : "EMAIL"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to compare the email against.",
                    "example" : "urist.mcvankab@freddiesjokes.com"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Gender Segment",
                "description" : "Segment by predicted gender.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedGender",
                    "enum" : [ "PredictedGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted gender."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Age Segment",
                "description" : "Segment by predicted age.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedAge",
                    "enum" : [ "PredictedAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_age_range" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted age."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted age to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "New Subscribers Prebuilt Segment",
                "description" : "Segment by when people subscribed.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "NewSubscribers",
                    "enum" : [ "NewSubscribers" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt" ],
                    "title" : "Segment Field",
                    "description" : "Segment by when people subscribed."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "date_within" ],
                    "title" : "Segment Operator",
                    "description" : "Whe the event took place, namely within a time frame."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                  }
                }
              } ],
              "x-discriminator" : {
                "type" : "string",
                "propertyName" : "condition_type"
              }
            }
          }
        },
        "description" : "The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions"
      },
      "ECommercePromoRule" : {
        "title" : "E-commerce Promo Rule",
        "required" : [ "amount", "description", "id", "target", "type" ],
        "type" : "object",
        "properties" : {
          "starts_at" : {
            "title" : "Promo Start Time",
            "type" : "string",
            "description" : "The date and time when the promotion is in effect in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startsAt"
          },
          "amount" : {
            "title" : "Amount",
            "type" : "number",
            "description" : "The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive",
            "format" : "float",
            "example" : 0.5
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a promotion restricted to UTF-8 characters with max length 255",
            "example" : "Save BIG during our summer sale!"
          },
          "id" : {
            "title" : "Promo Rule Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50"
          },
          "ends_at" : {
            "title" : "End Time",
            "type" : "string",
            "description" : "The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format",
            "format" : "Promo date-time",
            "x-ballerina-name" : "endsAt"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes",
            "example" : "50% off Total Order"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo rule is currently enabled",
            "example" : true
          },
          "target" : {
            "title" : "Target",
            "type" : "string",
            "description" : "The target that the discount applies to",
            "enum" : [ "per_item", "total", "shipping" ]
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Rule"
      },
      "InlineResponse20011AllOf1" : {
        "type" : "object",
        "properties" : {
          "has_segment" : {
            "title" : "Has Segment",
            "type" : "boolean",
            "description" : "If this outreach targets a segment of your audience",
            "x-ballerina-name" : "hasSegment"
          },
          "thumbnail" : {
            "title" : "Thumbnail",
            "type" : "string",
            "description" : "The URL of the thumbnail for this outreach"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the outreach was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createTime"
          },
          "canceled_at" : {
            "title" : "Canceled At",
            "type" : "string",
            "description" : "The date and time the outreach was canceled in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "canceledAt"
          },
          "web_id" : {
            "title" : "Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "x-ballerina-name" : "webId"
          },
          "type" : {
            "title" : "Outreach Type",
            "type" : "string",
            "description" : "The type of outreach this object is",
            "enum" : [ "regular", "email-touchpoint", "plaintext", "rss", "reconfirm", "variate", "absplit", "automation", "facebook", "google", "autoresponder", "transactional", "page", "website", "social_post", "survey", "customer_journey", "sms" ]
          },
          "show_report" : {
            "title" : "Show Report",
            "type" : "boolean",
            "description" : "Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context",
            "x-ballerina-name" : "showReport"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the outreach was started in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startTime"
          },
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the outreach was last updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAt"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/Recipients"
          },
          "published_time" : {
            "title" : "Publish Time",
            "type" : "string",
            "description" : "The date and time the outreach was (or will be) published in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "publishedTime"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "Title or name of an Outreach"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of an Outreach"
          },
          "status" : {
            "title" : "Outreach Status",
            "type" : "string",
            "description" : "The status of this outreach",
            "enum" : [ "save", "paused", "schedule", "scheduled", "sending", "sent", "canceled", "canceling", "active", "disconnected", "somepaused", "draft", "completed", "partialRejected", "pending", "rejected", "published", "unpublished" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "Bounces" : {
        "title" : "Bounces",
        "type" : "object",
        "properties" : {
          "hard_bounces" : {
            "title" : "Hard Bounces",
            "type" : "integer",
            "description" : "The total number of hard bounced email addresses",
            "x-ballerina-name" : "hardBounces"
          },
          "syntax_errors" : {
            "title" : "Syntax Errors",
            "type" : "integer",
            "description" : "The total number of addresses that were syntax-related bounces",
            "x-ballerina-name" : "syntaxErrors"
          },
          "soft_bounces" : {
            "title" : "Soft Bounces",
            "type" : "integer",
            "description" : "The total number of soft bounced email addresses",
            "x-ballerina-name" : "softBounces"
          }
        },
        "description" : "An object describing the bounce summary for the campaign"
      },
      "LandingPageReportEcommerce" : {
        "type" : "object",
        "properties" : {
          "average_order_revenue" : {
            "title" : "Average Order Revenue",
            "type" : "number",
            "description" : "The average order revenue of this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "averageOrderRevenue"
          },
          "total_revenue" : {
            "title" : "Total Revenue",
            "type" : "number",
            "description" : "The total revenue of this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "totalRevenue"
          },
          "total_orders" : {
            "title" : "Total Orders",
            "type" : "integer",
            "description" : "The total number of orders associated with this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "totalOrders"
          },
          "currency_code" : {
            "title" : "Currency code",
            "type" : "string",
            "description" : "The user's currency code",
            "readOnly" : true,
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "ECommerceProductImage" : {
        "title" : "E-commerce Product Image",
        "required" : [ "id", "url" ],
        "type" : "object",
        "properties" : {
          "variant_ids" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "The list of product variants using the image",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "variantIds"
          },
          "id" : {
            "title" : "Image Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product image"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product image"
          }
        },
        "description" : "Information about a specific product image"
      },
      "LandingPageReportTimeseries" : {
        "type" : "object",
        "properties" : {
          "daily_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/DailyClicksAndVisitsData"
            } ],
            "x-ballerina-name" : "dailyStats"
          },
          "weekly_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WeeklyClicksAndVisitsData"
            } ],
            "x-ballerina-name" : "weeklyStats"
          }
        }
      },
      "Campaigns" : {
        "title" : "Campaigns",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "results" : {
            "title" : "Results",
            "type" : "array",
            "description" : "An array of matching campaigns and snippets",
            "items" : {
              "$ref" : "#/components/schemas/CampaignsResults"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Campaigns and Snippets found for given search term"
      },
      "CampaignSocialCard" : {
        "title" : "Campaign Social Card",
        "type" : "object",
        "properties" : {
          "image_url" : {
            "title" : "Image URL",
            "type" : "string",
            "description" : "The url for the header image for the card",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Campaign Description",
            "type" : "string",
            "description" : "A short summary of the campaign to display"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title for the card. Typically the subject line of the campaign"
          }
        },
        "description" : "The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/)"
      },
      "EmailClient" : {
        "title" : "Email Client",
        "type" : "object",
        "properties" : {
          "members" : {
            "title" : "Members",
            "type" : "integer",
            "description" : "The number of subscribed members who used this email client",
            "readOnly" : true
          },
          "client" : {
            "title" : "Client",
            "type" : "string",
            "description" : "The name of the email client",
            "readOnly" : true
          }
        },
        "description" : "The email client"
      },
      "DailyClicksAndVisitsDataVisits" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "title" : "Date",
            "type" : "string",
            "readOnly" : true,
            "example" : "2018-04-25"
          },
          "val" : {
            "title" : "Value",
            "type" : "integer",
            "readOnly" : true,
            "example" : 11
          }
        }
      },
      "ECommerceStore" : {
        "title" : "E-commerce Store",
        "required" : [ "currency_code", "id", "list_id", "name" ],
        "type" : "object",
        "properties" : {
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)",
            "x-ballerina-name" : "isSyncing"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique identifier for the list associated with the store. The `list_id` for a specific store cannot change",
            "example" : "1a2df69511",
            "x-ballerina-name" : "listId"
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the store",
            "example" : "Eastern"
          },
          "primary_locale" : {
            "title" : "Primary Locale",
            "type" : "string",
            "description" : "The primary locale for the store. For example: `en`, `de`, etc",
            "example" : "fr",
            "x-ballerina-name" : "primaryLocale"
          },
          "platform" : {
            "title" : "Platform",
            "type" : "string",
            "description" : "The e-commerce platform of the store"
          },
          "currency_code" : {
            "title" : "Currency",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          },
          "money_format" : {
            "title" : "Money Format",
            "type" : "string",
            "description" : "The currency format for the store. For example: `$`, `£`, etc",
            "example" : "$",
            "x-ballerina-name" : "moneyFormat"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The email address for the store",
            "example" : "freddie@mailchimp.com",
            "x-ballerina-name" : "emailAddress"
          },
          "phone" : {
            "title" : "Phone",
            "type" : "string",
            "description" : "The store phone number",
            "example" : "+16155550128"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The store domain. This parameter is required for Connected Sites and Google Ads",
            "example" : "example.com"
          },
          "name" : {
            "title" : "Store Name",
            "type" : "string",
            "description" : "The name of the store",
            "example" : "Freddie's Cat Hat Emporium"
          },
          "id" : {
            "title" : "Store Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "example" : "example_store"
          }
        },
        "description" : "An individual store in an account"
      },
      "GalleryFolder" : {
        "title" : "Gallery Folder",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          }
        },
        "description" : "An individual folder listed in the File Manager"
      },
      "AbuseComplaints" : {
        "title" : "Abuse Complaints",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id for the abuse report",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "array",
            "description" : "An array of objects, each representing an abuse report resource",
            "items" : {
              "$ref" : "#/components/schemas/AbuseComplaint2"
            },
            "x-ballerina-name" : "abuseReports"
          }
        },
        "description" : "A collection of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program"
      },
      "ContactCounts" : {
        "title" : "Contact Counts",
        "type" : "object",
        "properties" : {
          "new" : {
            "title" : "New Contacts Count",
            "type" : "integer",
            "description" : "The number of new contacts that responded to this survey"
          },
          "known" : {
            "title" : "Known Contacts Count",
            "type" : "integer",
            "description" : "The number of known contacts that responded to this survey"
          },
          "unknown" : {
            "title" : "Unknown Contacts Count",
            "type" : "integer",
            "description" : "The number of unknown contacts that responded to this survey"
          }
        },
        "description" : "For email question types, how many are new, known, or unknown contacts"
      },
      "InlineResponse20013ReportSummary" : {
        "type" : "object",
        "properties" : {
          "total_products_sold" : {
            "type" : "integer",
            "x-ballerina-name" : "totalProductsSold"
          },
          "comments" : {
            "type" : "integer"
          },
          "reach" : {
            "type" : "integer"
          },
          "click_rate" : {
            "type" : "number",
            "x-ballerina-name" : "clickRate"
          },
          "cost_per_click" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummaryAverageOrderAmount"
            } ],
            "x-ballerina-name" : "costPerClick"
          },
          "extended_at" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummaryExtendedAt"
            } ],
            "x-ballerina-name" : "extendedAt"
          },
          "return_on_investment" : {
            "type" : "number",
            "x-ballerina-name" : "returnOnInvestment"
          },
          "impressions" : {
            "type" : "number"
          },
          "total_orders" : {
            "type" : "integer",
            "x-ballerina-name" : "totalOrders"
          },
          "first_time_buyers" : {
            "type" : "integer",
            "x-ballerina-name" : "firstTimeBuyers"
          },
          "shares" : {
            "type" : "integer"
          },
          "average_order_amount" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummaryAverageOrderAmount"
            } ],
            "x-ballerina-name" : "averageOrderAmount"
          },
          "average_daily_budget" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummaryAverageOrderAmount"
            } ],
            "x-ballerina-name" : "averageDailyBudget"
          },
          "unique_clicks" : {
            "type" : "integer",
            "x-ballerina-name" : "uniqueClicks"
          },
          "has_extended_ad_duration" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasExtendedAdDuration"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/InlineResponse20013ReportSummaryEcommerce"
          },
          "clicks" : {
            "type" : "integer"
          },
          "likes" : {
            "type" : "integer"
          }
        },
        "description" : "Report summary of facebook ad"
      },
      "InlineResponse200" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "chimp_chatter" : {
            "type" : "array",
            "description" : "An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ChimpChatter"
            },
            "x-ballerina-name" : "chimpChatter"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account"
      },
      "EcommerceStats" : {
        "title" : "Ecommerce Stats",
        "type" : "object",
        "properties" : {
          "total_revenue" : {
            "title" : "Total Revenue",
            "type" : "number",
            "description" : "The total revenue the list member has brought in",
            "readOnly" : true,
            "x-ballerina-name" : "totalRevenue"
          },
          "number_of_orders" : {
            "title" : "Total Number of Orders",
            "type" : "number",
            "description" : "The total number of orders placed by the list member",
            "readOnly" : true,
            "x-ballerina-name" : "numberOfOrders"
          },
          "currency_code" : {
            "title" : "Currency",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "readOnly" : true,
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          }
        },
        "description" : "Ecommerce stats for the list member if the list is attached to a store",
        "readOnly" : true
      },
      "InlineResponse2001Exports" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "size_in_bytes" : {
            "title" : "Export Size",
            "type" : "integer",
            "description" : "The size of the uncompressed export in bytes",
            "x-ballerina-name" : "sizeInBytes"
          },
          "download_url" : {
            "title" : "Download URL",
            "type" : "string",
            "description" : "If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes",
            "x-ballerina-name" : "downloadUrl"
          },
          "started" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "Start time for the export",
            "format" : "date-time"
          },
          "finished" : {
            "title" : "Finish Time",
            "type" : "string",
            "description" : "If finished, the finish time for the export",
            "format" : "date-time"
          },
          "export_id" : {
            "title" : "Export ID",
            "type" : "integer",
            "description" : "The ID for the export",
            "x-ballerina-name" : "exportId"
          }
        },
        "description" : "An account export"
      },
      "ProblemDetailDocument" : {
        "title" : "Problem Detail Document",
        "required" : [ "detail", "instance", "status", "title", "type" ],
        "type" : "object",
        "properties" : {
          "instance" : {
            "title" : "Instance ID",
            "type" : "string",
            "description" : "A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support",
            "example" : "995c5cb0-3280-4a6e-808b-3b096d0bb219"
          },
          "detail" : {
            "title" : "Error Message",
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors)",
            "example" : "The requested resource could not be found."
          },
          "type" : {
            "title" : "Problem Type",
            "type" : "string",
            "description" : "An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type",
            "example" : "https://mailchimp.com/developer/marketing/docs/errors/"
          },
          "title" : {
            "title" : "Error Title",
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization",
            "example" : "Resource Not Found"
          },
          "status" : {
            "title" : "HTTP Status Code",
            "type" : "integer",
            "description" : "The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem",
            "example" : 404
          }
        },
        "description" : "An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'"
      },
      "CampaignDefaults1" : {
        "title" : "Campaign Defaults",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "Sender's Email Address",
            "type" : "string",
            "description" : "The default from email for campaigns sent to this list",
            "x-ballerina-name" : "fromEmail"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The default subject line for campaigns sent to this list"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "The default language for this lists's forms"
          },
          "from_name" : {
            "title" : "Sender's Name",
            "type" : "string",
            "description" : "The default from name for campaigns sent to this list",
            "x-ballerina-name" : "fromName"
          }
        },
        "description" : "[Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list"
      },
      "InlineResponse20011InlineResponse20011AllOf12" : {
        "type" : "object",
        "properties" : {
          "email_source_name" : {
            "title" : "Ad: Email Source Name",
            "type" : "string",
            "x-ballerina-name" : "emailSourceName"
          },
          "paused_at" : {
            "title" : "Ad: Paused At",
            "type" : "string",
            "description" : "The date and time the ad was paused in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "pausedAt"
          },
          "end_time" : {
            "title" : "Ad: End Time",
            "type" : "string",
            "description" : "The date and time the ad was ended in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "endTime"
          },
          "needs_attention" : {
            "title" : "Ad: Needs Attention",
            "type" : "boolean",
            "description" : "If the ad has a problem and needs attention",
            "x-ballerina-name" : "needsAttention"
          },
          "was_canceled_by_facebook" : {
            "title" : "Ad: Was Canceled By Facebook",
            "type" : "boolean",
            "x-ballerina-name" : "wasCanceledByFacebook"
          }
        }
      },
      "Campaign1" : {
        "title" : "Campaign",
        "type" : "object",
        "properties" : {
          "resendable" : {
            "title" : "Resendable",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to non-openers",
            "readOnly" : true
          },
          "ab_split_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestingOptions"
            } ],
            "x-ballerina-name" : "abSplitOpts"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "resend_shortcut_usage" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResendShortcutUsage"
            } ],
            "x-ballerina-name" : "resendShortcutUsage"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ]
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions"
          },
          "parent_campaign_id" : {
            "title" : "Parent Campaign ID",
            "type" : "string",
            "description" : "If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children",
            "readOnly" : true,
            "x-ballerina-name" : "parentCampaignId"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together",
            "enum" : [ "template", "html", "url", "multichannel" ],
            "x-ballerina-name" : "contentType"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign",
            "readOnly" : true
          },
          "long_archive_url" : {
            "title" : "Long Archive URL",
            "type" : "string",
            "description" : "The original link to the campaign's archive version",
            "readOnly" : true,
            "x-ballerina-name" : "longArchiveUrl"
          },
          "archive_url" : {
            "title" : "Archive URL",
            "type" : "string",
            "description" : "The link to the campaign's archive version in ISO 8601 format",
            "readOnly" : true,
            "x-ballerina-name" : "archiveUrl"
          },
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings5"
          },
          "variate_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestOptions2"
            } ],
            "x-ballerina-name" : "variateSettings"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the campaign was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "web_id" : {
            "title" : "Campaign Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "needs_block_refresh" : {
            "title" : "Needs Block Refresh",
            "type" : "boolean",
            "description" : "Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false",
            "readOnly" : true,
            "x-ballerina-name" : "needsBlockRefresh"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a campaign was sent",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "rss_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RSSOptions3"
            } ],
            "x-ballerina-name" : "rssOpts"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List8"
          },
          "delivery_status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDeliveryStatus"
            } ],
            "x-ballerina-name" : "deliveryStatus"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "schedule", "sending", "sent", "canceled", "canceling", "archived" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary2"
            } ],
            "x-ballerina-name" : "reportSummary"
          },
          "resend_shortcut_eligibility" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResendShortcutEligibility"
            } ],
            "x-ballerina-name" : "resendShortcutEligibility"
          }
        },
        "description" : "A summary of an individual campaign's settings and content"
      },
      "Address2" : {
        "title" : "Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country",
            "type" : "string",
            "description" : "The customer's country",
            "example" : "United States"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the customer's country",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The customer's state name or normalized province",
            "example" : "Georgia"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the customer's mailing address"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city the customer is located in",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The mailing address of the customer",
            "example" : "405 N Angier Ave NE"
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the customer's province or state",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The customer's postal or zip code",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          }
        },
        "description" : "The customer's address"
      },
      "SurveyResponse" : {
        "title" : "Survey Response",
        "type" : "object",
        "properties" : {
          "submitted_at" : {
            "title" : "Submitted At",
            "type" : "string",
            "description" : "The date and time when the survey response was submitted in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "submittedAt"
          },
          "response_id" : {
            "title" : "Response ID",
            "type" : "string",
            "description" : "The ID for the survey response",
            "readOnly" : true,
            "x-ballerina-name" : "responseId"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "is_new_contact" : {
            "title" : "Is New Contact",
            "type" : "boolean",
            "description" : "If this contact was added to the Mailchimp audience via this survey",
            "x-ballerina-name" : "isNewContact"
          },
          "results" : {
            "title" : "Results",
            "type" : "array",
            "description" : "The survey questions and the answers to those questions",
            "items" : {
              "$ref" : "#/components/schemas/Response"
            }
          }
        },
        "description" : "A single survey response"
      },
      "InlineResponse20013AudienceActivity" : {
        "type" : "object",
        "properties" : {
          "revenue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20013AudienceActivityRevenue"
            }
          },
          "clicks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20013AudienceActivityClicks"
            }
          },
          "impressions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20013AudienceActivityImpressions"
            }
          }
        }
      },
      "Campaign3" : {
        "title" : "Campaign",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "archive_url" : {
            "title" : "Archive URL",
            "type" : "string",
            "description" : "The link to the campaign's archive version",
            "readOnly" : true,
            "x-ballerina-name" : "archiveUrl"
          },
          "resendable" : {
            "title" : "Resendable",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to non-openers",
            "readOnly" : true
          },
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings4"
          },
          "variate_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestOptions1"
            } ],
            "x-ballerina-name" : "variateSettings"
          },
          "ab_split_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestingOptions"
            } ],
            "x-ballerina-name" : "abSplitOpts"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the campaign was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "web_id" : {
            "title" : "Campaign Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ]
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions"
          },
          "needs_block_refresh" : {
            "title" : "Needs Block Refresh",
            "type" : "boolean",
            "description" : "Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false",
            "readOnly" : true,
            "x-ballerina-name" : "needsBlockRefresh"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a campaign was sent in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "rss_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RSSOptions2"
            } ],
            "x-ballerina-name" : "rssOpts"
          },
          "parent_campaign_id" : {
            "title" : "Parent Campaign ID",
            "type" : "string",
            "description" : "If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children",
            "readOnly" : true,
            "x-ballerina-name" : "parentCampaignId"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')",
            "readOnly" : true,
            "x-ballerina-name" : "contentType"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List7"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign",
            "readOnly" : true
          },
          "delivery_status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDeliveryStatus"
            } ],
            "x-ballerina-name" : "deliveryStatus"
          },
          "long_archive_url" : {
            "title" : "Long Archive URL",
            "type" : "string",
            "description" : "The original link to the campaign's archive version",
            "readOnly" : true,
            "x-ballerina-name" : "longArchiveUrl"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "schedule", "sending", "sent", "canceled", "canceling", "archived" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary1"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        },
        "description" : "A summary of an individual campaign's settings and content"
      },
      "Campaign2" : {
        "title" : "Campaign",
        "required" : [ "settings" ],
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings2"
          },
          "variate_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestOptions"
            } ],
            "x-ballerina-name" : "variateSettings"
          },
          "rss_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RSSOptions1"
            } ],
            "x-ballerina-name" : "rssOpts"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List2"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions"
          }
        },
        "description" : "A summary of an individual campaign's settings and content"
      },
      "Address1" : {
        "title" : "Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The customer's country",
            "example" : "United States"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the customer's country",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The customer's state name or normalized province",
            "example" : "Georgia"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the customer's mailing address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city the customer is located in",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The mailing address of the customer",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the customer's province or state",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The customer's postal or zip code",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          }
        },
        "description" : "The customer's address"
      },
      "Campaign4" : {
        "title" : "Campaign",
        "type" : "object",
        "properties" : {
          "resendable" : {
            "title" : "Resendable",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to non-openers",
            "readOnly" : true
          },
          "ab_split_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestingOptions"
            } ],
            "x-ballerina-name" : "abSplitOpts"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "resend_shortcut_usage" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResendShortcutUsage"
            } ],
            "x-ballerina-name" : "resendShortcutUsage"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ]
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions"
          },
          "parent_campaign_id" : {
            "title" : "Parent Campaign ID",
            "type" : "string",
            "description" : "If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children",
            "readOnly" : true,
            "x-ballerina-name" : "parentCampaignId"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together",
            "enum" : [ "template", "html", "url", "multichannel" ],
            "x-ballerina-name" : "contentType"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign",
            "readOnly" : true
          },
          "long_archive_url" : {
            "title" : "Long Archive URL",
            "type" : "string",
            "description" : "The original link to the campaign's archive version",
            "readOnly" : true,
            "x-ballerina-name" : "longArchiveUrl"
          },
          "archive_url" : {
            "title" : "Archive URL",
            "type" : "string",
            "description" : "The link to the campaign's archive version in ISO 8601 format",
            "readOnly" : true,
            "x-ballerina-name" : "archiveUrl"
          },
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings5"
          },
          "variate_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestOptions2"
            } ],
            "x-ballerina-name" : "variateSettings"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the campaign was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createTime"
          },
          "web_id" : {
            "title" : "Campaign Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "needs_block_refresh" : {
            "title" : "Needs Block Refresh",
            "type" : "boolean",
            "description" : "Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false",
            "readOnly" : true,
            "x-ballerina-name" : "needsBlockRefresh"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a campaign was sent",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "rss_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RSSOptions3"
            } ],
            "x-ballerina-name" : "rssOpts"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List8"
          },
          "delivery_status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDeliveryStatus"
            } ],
            "x-ballerina-name" : "deliveryStatus"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "schedule", "sending", "sent", "canceled", "canceling", "archived" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignReportSummary2"
            } ],
            "x-ballerina-name" : "reportSummary"
          },
          "resend_shortcut_eligibility" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResendShortcutEligibility"
            } ],
            "x-ballerina-name" : "resendShortcutEligibility"
          }
        },
        "description" : "A summary of an individual campaign's settings and content"
      },
      "BatchUpdateListMembers" : {
        "title" : "Batch update List members",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "new_members" : {
            "title" : "New members",
            "type" : "array",
            "description" : "An array of objects, each representing a new member that was added to the list",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers5"
            },
            "x-ballerina-name" : "newMembers"
          },
          "updated_members" : {
            "title" : "Updated Members",
            "type" : "array",
            "description" : "An array of objects, each representing an existing list member whose subscription status was updated",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers5"
            },
            "x-ballerina-name" : "updatedMembers"
          },
          "total_created" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "totalCreated"
          },
          "error_count" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "errorCount"
          },
          "errors" : {
            "title" : "Errors",
            "type" : "array",
            "description" : "An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details",
            "items" : {
              "$ref" : "#/components/schemas/BatchUpdateListMembersErrors"
            }
          },
          "total_updated" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "totalUpdated"
          }
        },
        "description" : "Batch update list members"
      },
      "MemberTag" : {
        "title" : "Member Tag",
        "required" : [ "name", "status" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Tag Name",
            "type" : "string",
            "description" : "The name of the tag"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The status for the tag on the member, pass in active to add a tag or inactive to remove it",
            "enum" : [ "inactive", "active" ]
          }
        },
        "description" : "Add or remove tags on a member by declaring a tag either active or inactive on a member"
      },
      "AbuseComplaint2" : {
        "title" : "Abuse Complaint",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "date" : {
            "title" : "Date",
            "type" : "string",
            "description" : "Date for the abuse report",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "id" : {
            "title" : "Abuse Report ID",
            "type" : "integer",
            "description" : "The id for the abuse report",
            "readOnly" : true
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program"
      },
      "AbuseComplaint1" : {
        "title" : "Abuse Complaint",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "date" : {
            "title" : "Date",
            "type" : "string",
            "description" : "Date for the abuse report",
            "format" : "date-time",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id of the list for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "id" : {
            "title" : "Abuse Report ID",
            "type" : "integer",
            "description" : "The id for the abuse report",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program"
      },
      "BatchDelivery" : {
        "title" : "Batch Delivery",
        "required" : [ "batch_count", "batch_delay" ],
        "type" : "object",
        "properties" : {
          "batch_delay" : {
            "title" : "Batch Delay",
            "type" : "integer",
            "description" : "The delay, in minutes, between batches",
            "x-ballerina-name" : "batchDelay"
          },
          "batch_count" : {
            "title" : "Batch Count",
            "type" : "integer",
            "description" : "The number of batches for the campaign send",
            "x-ballerina-name" : "batchCount"
          }
        },
        "description" : "Choose whether the campaign should use [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). Cannot be set to `true` for campaigns using [Timewarp](https://mailchimp.com/help/use-timewarp/)"
      },
      "AbuseComplaint3" : {
        "title" : "Abuse Complaint",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "date" : {
            "title" : "Date",
            "type" : "string",
            "description" : "Date for the abuse report",
            "format" : "date-time",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id of the list for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "id" : {
            "title" : "Abuse Report ID",
            "type" : "integer",
            "description" : "The id for the abuse report",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program"
      },
      "ShippingAddress" : {
        "title" : "Shipping Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The country in the shipping address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the shipping address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the order's shipping address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The shipping address for the order",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the shipping address location",
            "example" : 45.427408
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province or state in the shipping address",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the shipping address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the order's shipping address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the order's shipping address",
            "example" : "8675309"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with an order's shipping address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with the shipping address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the shipping address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the shipping address location",
            "example" : -75.68903
          }
        },
        "description" : "The shipping address for the order"
      },
      "CampaignA" : {
        "title" : "Campaign A",
        "type" : "object",
        "properties" : {
          "forwards" : {
            "title" : "Forwards",
            "type" : "integer",
            "description" : "Forwards for Campaign A"
          },
          "unsubs" : {
            "title" : "Unsubscribes",
            "type" : "integer",
            "description" : "Unsubscribes for Campaign A"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "integer",
            "description" : "Opens for Campaign A"
          },
          "bounces" : {
            "title" : "Bounces",
            "type" : "integer",
            "description" : "Bounces for Campaign A"
          },
          "recipient_clicks" : {
            "title" : "Recipient Clicks",
            "type" : "integer",
            "description" : "Recipient Clicks for Campaign A",
            "x-ballerina-name" : "recipientClicks"
          },
          "forwards_opens" : {
            "title" : "Forward Opens",
            "type" : "integer",
            "description" : "Opens from forwards for Campaign A",
            "x-ballerina-name" : "forwardsOpens"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The last open for Campaign A",
            "x-ballerina-name" : "lastOpen"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "integer",
            "description" : "Abuse reports for Campaign A",
            "x-ballerina-name" : "abuseReports"
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "Unique opens for Campaign A",
            "x-ballerina-name" : "uniqueOpens"
          }
        },
        "description" : "Stats for Campaign A"
      },
      "GrowthHistory2" : {
        "title" : "Growth History",
        "type" : "object",
        "properties" : {
          "imports" : {
            "title" : "Imports",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id for the growth activity report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "pending" : {
            "title" : "Pending",
            "type" : "integer",
            "description" : "Pending members on the list for a specific month",
            "readOnly" : true
          },
          "reconfirm" : {
            "title" : "Reconfirm",
            "type" : "integer",
            "description" : "Newly reconfirmed members on the list for a specific month",
            "readOnly" : true
          },
          "existing" : {
            "title" : "Existing",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "optins" : {
            "title" : "Opt-in",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "subscribed" : {
            "title" : "Subscribed",
            "type" : "integer",
            "description" : "Total subscribed members on the list at the end of the month",
            "readOnly" : true
          },
          "unsubscribed" : {
            "title" : "Unsubscribed",
            "type" : "integer",
            "description" : "Newly unsubscribed members on the list for a specific month",
            "readOnly" : true
          },
          "deleted" : {
            "title" : "Deleted",
            "type" : "integer",
            "description" : "Newly deleted members on the list for a specific month",
            "readOnly" : true
          },
          "month" : {
            "title" : "Month",
            "type" : "string",
            "description" : "The month that the growth history is describing",
            "readOnly" : true
          },
          "cleaned" : {
            "title" : "Cleaned",
            "type" : "integer",
            "description" : "Newly cleaned (hard-bounced) members on the list for a specific month",
            "readOnly" : true
          },
          "transactional" : {
            "title" : "Transactional",
            "type" : "integer",
            "description" : "Subscribers that have been sent transactional emails via Mandrill",
            "readOnly" : true
          }
        },
        "description" : "A summary of a specific list's growth activity for a specific month and year"
      },
      "GrowthHistory1" : {
        "title" : "Growth History",
        "type" : "object",
        "properties" : {
          "imports" : {
            "title" : "Imports",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id for the growth activity report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "pending" : {
            "title" : "Pending",
            "type" : "integer",
            "description" : "Pending members on the list for a specific month",
            "readOnly" : true
          },
          "reconfirm" : {
            "title" : "Reconfirm",
            "type" : "integer",
            "description" : "Newly reconfirmed members on the list for a specific month",
            "readOnly" : true
          },
          "existing" : {
            "title" : "Existing",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "optins" : {
            "title" : "Opt-in",
            "type" : "integer",
            "description" : "(deprecated)",
            "readOnly" : true
          },
          "subscribed" : {
            "title" : "Subscribed",
            "type" : "integer",
            "description" : "Total subscribed members on the list at the end of the month",
            "readOnly" : true
          },
          "unsubscribed" : {
            "title" : "Unsubscribed",
            "type" : "integer",
            "description" : "Newly unsubscribed members on the list for a specific month",
            "readOnly" : true
          },
          "deleted" : {
            "title" : "Deleted",
            "type" : "integer",
            "description" : "Newly deleted members on the list for a specific month",
            "readOnly" : true
          },
          "month" : {
            "title" : "Month",
            "type" : "string",
            "description" : "The month that the growth history is describing",
            "readOnly" : true
          },
          "cleaned" : {
            "title" : "Cleaned",
            "type" : "integer",
            "description" : "Newly cleaned (hard-bounced) members on the list for a specific month",
            "readOnly" : true
          },
          "transactional" : {
            "title" : "Transactional",
            "type" : "integer",
            "description" : "Subscribers that have been sent transactional emails via Mandrill",
            "readOnly" : true
          }
        },
        "description" : "A summary of a specific list's growth activity for a specific month and year"
      },
      "CampaignB" : {
        "title" : "Campaign B",
        "type" : "object",
        "properties" : {
          "forwards" : {
            "title" : "Forwards",
            "type" : "integer",
            "description" : "Forwards for Campaign B"
          },
          "unsubs" : {
            "title" : "Unsubscribes",
            "type" : "integer",
            "description" : "Unsubscribes for Campaign B"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "integer",
            "description" : "Opens for Campaign B"
          },
          "bounces" : {
            "title" : "Bounces",
            "type" : "integer",
            "description" : "Bounces for Campaign B"
          },
          "recipient_clicks" : {
            "title" : "Recipient Clicks",
            "type" : "integer",
            "description" : "Recipients clicks for Campaign B",
            "x-ballerina-name" : "recipientClicks"
          },
          "forwards_opens" : {
            "title" : "Forward Opens",
            "type" : "integer",
            "description" : "Opens for forwards from Campaign B",
            "x-ballerina-name" : "forwardsOpens"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The last open for Campaign B",
            "x-ballerina-name" : "lastOpen"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "integer",
            "description" : "Abuse reports for Campaign B",
            "x-ballerina-name" : "abuseReports"
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "Unique opens for Campaign B",
            "x-ballerina-name" : "uniqueOpens"
          }
        },
        "description" : "Stats for Campaign B"
      },
      "AbandonedBrowseAutomation" : {
        "title" : "Abandoned Browse Automation",
        "type" : "object",
        "properties" : {
          "is_supported" : {
            "title" : "Is Supported",
            "type" : "boolean",
            "description" : "Whether this store supports the abandonedBrowse automation",
            "readOnly" : true,
            "example" : false,
            "x-ballerina-name" : "isSupported"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of automation parent campaign",
            "readOnly" : true,
            "example" : "355a72bfc3"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Status of the abandonedBrowse automation",
            "readOnly" : true,
            "example" : "sending",
            "enum" : [ "save", "sending", "paused" ]
          }
        },
        "description" : "abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web",
        "readOnly" : true
      },
      "BatchOperations" : {
        "title" : "Batch Operations",
        "type" : "object",
        "properties" : {
          "batches" : {
            "title" : "Batches",
            "type" : "array",
            "description" : "An array of objects representing batch calls",
            "items" : {
              "$ref" : "#/components/schemas/Batch1"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A summary of batch requests that have been made"
      },
      "SurveyQuestionReportOptions" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "title" : "Response Count",
            "type" : "integer",
            "description" : "The count of responses that selected this survey question option"
          },
          "label" : {
            "title" : "Option Label",
            "type" : "string",
            "description" : "The label for this survey question option"
          },
          "id" : {
            "title" : "Option ID",
            "type" : "string",
            "description" : "The ID for this survey question option"
          }
        }
      },
      "CollectionOfElementStyleForListSignupForms" : {
        "title" : "Collection of Element style for List Signup Forms",
        "type" : "object",
        "properties" : {
          "options" : {
            "title" : "Options",
            "type" : "array",
            "description" : "A collection of options for a selector",
            "items" : {
              "$ref" : "#/components/schemas/AnOptionForSignupFormStyles"
            }
          },
          "selector" : {
            "title" : "Selector",
            "type" : "string",
            "description" : "A string that identifies the element selector",
            "example" : "page_background",
            "enum" : [ "page_background", "page_header", "page_outer_wrapper", "body_background", "body_link_style", "forms_buttons", "forms_buttons_hovered", "forms_field_label", "forms_field_text", "forms_required", "forms_required_legend", "forms_help_text", "forms_errors", "monkey_rewards_badge" ]
          }
        },
        "description" : "Collection of Element style for List Signup Forms"
      },
      "ECommerceOrderLineItem" : {
        "title" : "E-commerce Order Line Item",
        "required" : [ "id", "price", "product_id", "product_variant_id", "quantity" ],
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ECommerceProduct"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of an order line item"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of an order line item"
          },
          "product_id" : {
            "title" : "Order Line Item Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the order line item",
            "x-ballerina-name" : "productId"
          },
          "discount" : {
            "title" : "Discount",
            "type" : "number",
            "description" : "The total discount amount applied to this line item"
          },
          "id" : {
            "title" : "Order Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order line item"
          },
          "product_variant_id" : {
            "title" : "Order Line Item Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the order line item",
            "x-ballerina-name" : "productVariantId"
          }
        },
        "description" : "Information about a specific order line"
      },
      "OpenLocations" : {
        "title" : "Open Locations",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "locations" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a top location for opens",
            "items" : {
              "$ref" : "#/components/schemas/OpenLocationsLocations"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Top open locations for a specific campaign"
      },
      "AutomationWorkflowRuntimeSettings" : {
        "title" : "Automation Workflow Runtime Settings",
        "type" : "object",
        "properties" : {
          "hours" : {
            "$ref" : "#/components/schemas/Hours"
          },
          "days" : {
            "title" : "Days",
            "type" : "array",
            "description" : "The days an Automation workflow can send",
            "items" : {
              "type" : "string",
              "enum" : [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ]
            }
          }
        },
        "description" : "A workflow's runtime settings for an Automation"
      },
      "ECommerceOrder" : {
        "title" : "E-commerce Order",
        "required" : [ "currency_code", "customer", "id", "lines", "order_total" ],
        "type" : "object",
        "properties" : {
          "discount_total" : {
            "title" : "Discount Total",
            "type" : "number",
            "description" : "The total amount of the discounts to be applied to the price of the order",
            "x-ballerina-name" : "discountTotal"
          },
          "fulfillment_status" : {
            "title" : "Fulfillment Status",
            "type" : "string",
            "description" : "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "fulfillmentStatus"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The tax total for the order",
            "x-ballerina-name" : "taxTotal"
          },
          "shipping_total" : {
            "title" : "Shipping Total",
            "type" : "number",
            "description" : "The shipping total for the order",
            "x-ballerina-name" : "shippingTotal"
          },
          "outreach" : {
            "$ref" : "#/components/schemas/Outreach"
          },
          "processed_at_foreign" : {
            "title" : "Foreign Processed Time",
            "type" : "string",
            "description" : "The date and time the order was processed in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "processedAtForeign"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress"
            } ],
            "x-ballerina-name" : "billingAddress"
          },
          "tracking_code" : {
            "title" : "Tracking Code",
            "type" : "string",
            "description" : "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs",
            "enum" : [ "prec" ],
            "x-ballerina-name" : "trackingCode"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "x-ballerina-name" : "currencyCode"
          },
          "landing_site" : {
            "title" : "Landing Site",
            "type" : "string",
            "description" : "The URL for the page where the buyer landed when entering the shop",
            "example" : "http://www.example.com?source=abc",
            "x-ballerina-name" : "landingSite"
          },
          "order_url" : {
            "title" : "Order URL",
            "type" : "string",
            "description" : "The URL for the order",
            "x-ballerina-name" : "orderUrl"
          },
          "tracking_carrier" : {
            "title" : "Tracking carrier",
            "type" : "string",
            "description" : "The tracking carrier associated with the order",
            "x-ballerina-name" : "trackingCarrier"
          },
          "financial_status" : {
            "title" : "Financial Status",
            "type" : "string",
            "description" : "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "financialStatus"
          },
          "tracking_number" : {
            "title" : "Tracking number",
            "type" : "string",
            "description" : "The tracking number associated with the order",
            "x-ballerina-name" : "trackingNumber"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The total for the order",
            "x-ballerina-name" : "orderTotal"
          },
          "id" : {
            "title" : "Order Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order"
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShippingAddress"
            } ],
            "x-ballerina-name" : "shippingAddress"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the order was updated in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "lines" : {
            "title" : "Order Line Items",
            "type" : "array",
            "description" : "An array of the order's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem"
            }
          },
          "promos" : {
            "title" : "Promos",
            "type" : "array",
            "description" : "The promo codes applied on the order",
            "items" : {
              "$ref" : "#/components/schemas/EcommercestoresstoreIdordersPromos"
            }
          },
          "tracking_url" : {
            "title" : "Tracking URL",
            "type" : "string",
            "description" : "The tracking URL associated with the order",
            "x-ballerina-name" : "trackingUrl"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign for an order",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer"
          },
          "cancelled_at_foreign" : {
            "title" : "Foreign Cancel Time",
            "type" : "string",
            "description" : "The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "cancelledAtForeign"
          }
        },
        "description" : "Information about a specific order"
      },
      "AddListMembers1" : {
        "title" : "Add List Members",
        "required" : [ "email_address", "status" ],
        "type" : "object",
        "properties" : {
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "array",
            "description" : "The marketing permissions for the subscriber",
            "items" : {
              "$ref" : "#/components/schemas/MarketingPermission"
            },
            "x-ballerina-name" : "marketingPermissions"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampOpt"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampSignup"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "x-ballerina-name" : "ipSignup"
          },
          "tags" : {
            "title" : "Tags on a member",
            "type" : "array",
            "description" : "The tags that are associated with a member",
            "items" : {
              "type" : "string",
              "description" : "The name of the tag that will be associated with this member."
            }
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "TemplateFolder1" : {
        "title" : "Template Folder",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "count" : {
            "title" : "Template Count",
            "type" : "integer",
            "description" : "The number of templates in the folder",
            "readOnly" : true
          },
          "id" : {
            "title" : "Folder Id",
            "type" : "string",
            "description" : "A string that uniquely identifies this template folder",
            "readOnly" : true
          }
        },
        "description" : "A folder used to organize templates"
      },
      "ECommerceCustomer6" : {
        "title" : "E-commerce Customer",
        "type" : "object",
        "properties" : {
          "total_spent" : {
            "title" : "Total Spent",
            "type" : "number",
            "description" : "The total amount the customer has spent",
            "readOnly" : true,
            "example" : 100.0,
            "x-ballerina-name" : "totalSpent"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the customer was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "orders_count" : {
            "title" : "Orders Count",
            "type" : "integer",
            "description" : "The customer's total order count",
            "readOnly" : true,
            "example" : 4,
            "x-ballerina-name" : "ordersCount"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the customer was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the customer",
            "readOnly" : true
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer"
      },
      "TemplateFolder2" : {
        "title" : "Template Folder",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "count" : {
            "title" : "Template Count",
            "type" : "integer",
            "description" : "The number of templates in the folder",
            "readOnly" : true
          },
          "id" : {
            "title" : "Folder Id",
            "type" : "string",
            "description" : "A string that uniquely identifies this template folder",
            "readOnly" : true
          }
        },
        "description" : "A folder used to organize templates"
      },
      "InlineResponse20011Content" : {
        "type" : "object",
        "properties" : {
          "attachments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20011ContentAttachments"
            }
          },
          "call_to_action" : {
            "type" : "string",
            "x-ballerina-name" : "callToAction"
          },
          "image_url" : {
            "type" : "string",
            "x-ballerina-name" : "imageUrl"
          },
          "link_url" : {
            "type" : "string",
            "x-ballerina-name" : "linkUrl"
          },
          "description" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "InlineResponse20011AudienceTargetingSpecsInterests" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "ECommerceCustomer1" : {
        "title" : "E-commerce Customer",
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body"
      },
      "ECommerceCustomer3" : {
        "title" : "E-commerce Customer",
        "type" : "object",
        "properties" : {
          "total_spent" : {
            "title" : "Total Spent",
            "type" : "number",
            "description" : "The total amount the customer has spent",
            "readOnly" : true,
            "example" : 100.0,
            "x-ballerina-name" : "totalSpent"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the customer was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "orders_count" : {
            "title" : "Orders Count",
            "type" : "integer",
            "description" : "The customer's total order count",
            "readOnly" : true,
            "example" : 4,
            "x-ballerina-name" : "ordersCount"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the customer was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the customer",
            "readOnly" : true
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer"
      },
      "OpenActivity1" : {
        "title" : "Open Activity",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "opens_count" : {
            "title" : "Opens count",
            "type" : "integer",
            "description" : "The total number of times the this campaign was opened by the list member",
            "readOnly" : true,
            "x-ballerina-name" : "opensCount"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "opens" : {
            "title" : "Time series data of opens activity",
            "type" : "array",
            "description" : "An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event",
            "items" : {
              "$ref" : "#/components/schemas/MemberActivity2"
            }
          },
          "contact_status" : {
            "title" : "Member Status",
            "type" : "string",
            "description" : "The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation",
            "readOnly" : true,
            "x-ballerina-name" : "contactStatus"
          },
          "proxy_excluded_opens_count" : {
            "title" : "Proxy Excluded Opens count",
            "type" : "integer",
            "description" : "The total number of times the this campaign was opened by the list member excluding opens from email clients that use proxies ",
            "readOnly" : true,
            "x-ballerina-name" : "proxyExcludedOpensCount"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of a member's opens activity in a specific campaign"
      },
      "ECommerceCustomer2" : {
        "title" : "E-commerce Customer",
        "required" : [ "id", "opt_in_status" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "maxLength" : 50,
            "type" : "string",
            "description" : "A unique identifier for the customer. Limited to 50 characters"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer"
      },
      "AddListMembers2" : {
        "title" : "Add List Members",
        "required" : [ "email_address", "status_if_new" ],
        "type" : "object",
        "properties" : {
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "array",
            "description" : "The marketing permissions for the subscriber",
            "items" : {
              "$ref" : "#/components/schemas/MarketingPermission"
            },
            "x-ballerina-name" : "marketingPermissions"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampOpt"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampSignup"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "x-ballerina-name" : "ipSignup"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber. This value is required only if the email address is not already present on the list",
            "x-ballerina-name" : "emailAddress"
          },
          "status_if_new" : {
            "title" : "New Member Status",
            "type" : "string",
            "description" : "Subscriber's status. This value is required only if the email address is not already present on the list",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ],
            "x-ballerina-name" : "statusIfNew"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ECommerceCustomer5" : {
        "title" : "E-commerce Customer",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address2"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "maxLength" : 50,
            "type" : "string",
            "description" : "A unique identifier for the customer. Limited to 50 characters"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body"
      },
      "CampaignFolder" : {
        "title" : "Campaign Folder",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "Name to associate with the folder"
          }
        },
        "description" : "A folder used to organize campaigns"
      },
      "AddListMembers3" : {
        "title" : "Add List Members",
        "type" : "object",
        "properties" : {
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "array",
            "description" : "The marketing permissions for the subscriber",
            "items" : {
              "$ref" : "#/components/schemas/MarketingPermission"
            },
            "x-ballerina-name" : "marketingPermissions"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampOpt"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampSignup"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "x-ballerina-name" : "ipSignup"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending" ]
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ECommerceCustomer4" : {
        "title" : "E-commerce Customer",
        "required" : [ "id", "opt_in_status" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "maxLength" : 50,
            "type" : "string",
            "description" : "A unique identifier for the customer. Limited to 50 characters"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body"
      },
      "InlineResponse20012FacebookAdsAllOf5" : {
        "type" : "object",
        "properties" : {
          "report_summary" : {
            "type" : "object",
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummary"
            }, {
              "$ref" : "#/components/schemas/ReportSummary"
            }, {
              "type" : "object",
              "properties" : {
                "reach" : {
                  "type" : "integer"
                },
                "click_rate" : {
                  "type" : "number",
                  "x-ballerina-name" : "clickRate"
                },
                "impressions" : {
                  "type" : "number"
                },
                "ecommerce" : {
                  "$ref" : "#/components/schemas/ReportSummaryEcommerce"
                },
                "clicks" : {
                  "type" : "integer"
                }
              }
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "ECommerceProductImage1" : {
        "title" : "E-commerce Product Image",
        "type" : "object",
        "properties" : {
          "variant_ids" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "The list of product variants using the image",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "variantIds"
          },
          "id" : {
            "title" : "Image Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product image"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product image"
          }
        },
        "description" : "Information about a specific product image"
      },
      "ECommerceProductImage3" : {
        "title" : "E-commerce Product Image",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "variant_ids" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "The list of product variants using the image",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "variantIds"
          },
          "id" : {
            "title" : "Image Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product image"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product image"
          }
        },
        "description" : "Information about a specific product image"
      },
      "ECommerceProductImage2" : {
        "title" : "E-commerce Product Image",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "variant_ids" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "The list of product variants using the image",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "variantIds"
          },
          "id" : {
            "title" : "Image Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product image"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product image"
          }
        },
        "description" : "Information about a specific product image"
      },
      "Orders" : {
        "title" : "Orders",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "orders" : {
            "title" : "Orders",
            "type" : "array",
            "description" : "An array of objects, each representing an order resource",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrder4"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of orders in an account"
      },
      "SignupForm" : {
        "title" : "Signup Form",
        "type" : "object",
        "properties" : {
          "contents" : {
            "title" : "Signup form body content",
            "type" : "array",
            "description" : "The signup form body content",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfContentForListSignupForms"
            }
          },
          "header" : {
            "$ref" : "#/components/schemas/SignupFormHeaderOptions"
          },
          "styles" : {
            "title" : "Signup Form element style",
            "type" : "array",
            "description" : "An array of objects, each representing an element style for the signup form",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfElementStyleForListSignupForms"
            }
          }
        },
        "description" : "List signup form"
      },
      "FileManagerFolders" : {
        "title" : "File Manager Folders",
        "type" : "object",
        "properties" : {
          "folders" : {
            "title" : "File Manager Folders",
            "type" : "array",
            "description" : "A list of all folders in the File Manager",
            "items" : {
              "$ref" : "#/components/schemas/GalleryFolder2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of all folders in the File Manager"
      },
      "MergeFieldOptions" : {
        "title" : "Merge Field Options",
        "type" : "object",
        "properties" : {
          "size" : {
            "title" : "Text Field Size",
            "type" : "integer",
            "description" : "In a text field, the default length of the text field"
          },
          "date_format" : {
            "title" : "Date Type",
            "type" : "string",
            "description" : "In a date or birthday field, the format of the date",
            "x-ballerina-name" : "dateFormat"
          },
          "choices" : {
            "title" : "Choices",
            "type" : "array",
            "description" : "In a radio or dropdown non-group field, the available options for contacts to pick from",
            "example" : [ "First Choice", "Second Choice", "Third Choice" ],
            "items" : {
              "type" : "string"
            }
          },
          "default_country" : {
            "title" : "Default Country",
            "type" : "integer",
            "description" : "In an address field, the default country code if none supplied",
            "x-ballerina-name" : "defaultCountry"
          },
          "phone_format" : {
            "title" : "Phone Type",
            "type" : "string",
            "description" : "In a phone field, the phone number type: US or International",
            "x-ballerina-name" : "phoneFormat"
          }
        },
        "description" : "Extra options for some merge field types"
      },
      "DailyClicksAndVisitsDataUniqueVisits" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "title" : "Date",
            "type" : "string",
            "readOnly" : true,
            "example" : "2018-04-25"
          },
          "val" : {
            "title" : "Value",
            "type" : "integer",
            "readOnly" : true,
            "example" : 1
          }
        }
      },
      "FacebookAdsFacebookAdsFacebookAdsAllOf123" : {
        "type" : "object",
        "properties" : {
          "is_connected" : {
            "type" : "boolean",
            "description" : "Check if this ad is connected to a facebook page",
            "x-ballerina-name" : "isConnected"
          },
          "feedback" : {
            "$ref" : "#/components/schemas/InlineResponse20011Feedback"
          },
          "site" : {
            "$ref" : "#/components/schemas/InlineResponse20011Site"
          },
          "audience" : {
            "$ref" : "#/components/schemas/InlineResponse20011Audience"
          },
          "has_audience" : {
            "type" : "boolean",
            "description" : "Check if this ad has audience setup",
            "x-ballerina-name" : "hasAudience"
          },
          "has_content" : {
            "type" : "boolean",
            "description" : "Check if this ad has content",
            "x-ballerina-name" : "hasContent"
          },
          "channel" : {
            "$ref" : "#/components/schemas/InlineResponse20011Channel"
          },
          "content" : {
            "$ref" : "#/components/schemas/InlineResponse20011Content"
          },
          "budget" : {
            "$ref" : "#/components/schemas/InlineResponse20011Budget"
          }
        },
        "description" : "A facebook ad"
      },
      "ABTestOptions" : {
        "title" : "A/B Test Options",
        "required" : [ "winner_criteria" ],
        "type" : "object",
        "properties" : {
          "send_times" : {
            "title" : "Send Times",
            "type" : "array",
            "description" : "The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored",
            "items" : {
              "type" : "string",
              "format" : "date-time"
            },
            "x-ballerina-name" : "sendTimes"
          },
          "wait_time" : {
            "title" : "Wait Time",
            "type" : "integer",
            "description" : "The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes",
            "x-ballerina-name" : "waitTime"
          },
          "subject_lines" : {
            "title" : "Subject Lines",
            "type" : "array",
            "description" : "The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "subjectLines"
          },
          "test_size" : {
            "title" : "Test Size",
            "type" : "integer",
            "description" : "The percentage of recipients to send the test combinations to, must be a value between 10 and 100",
            "x-ballerina-name" : "testSize"
          },
          "reply_to_addresses" : {
            "title" : "Reply To Addresses",
            "type" : "array",
            "description" : "The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "replyToAddresses"
          },
          "winner_criteria" : {
            "title" : "Winning Criteria",
            "type" : "string",
            "description" : "The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application",
            "enum" : [ "opens", "clicks", "manual", "total_revenue" ],
            "x-ballerina-name" : "winnerCriteria"
          },
          "from_names" : {
            "title" : "From Names",
            "type" : "array",
            "description" : "The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "fromNames"
          }
        },
        "description" : "The settings specific to A/B test campaigns"
      },
      "Outreach1" : {
        "title" : "Outreach",
        "type" : "object",
        "properties" : {
          "published_time" : {
            "title" : "Outreach published time",
            "type" : "string",
            "description" : "The date and time the Outreach was published in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-06-06T13:56:12Z",
            "x-ballerina-name" : "publishedTime"
          },
          "name" : {
            "title" : "Outreach name",
            "type" : "string",
            "description" : "The name for the outreach",
            "readOnly" : true,
            "example" : "Freddie's Jokes"
          },
          "id" : {
            "title" : "Outreach ID",
            "type" : "string",
            "description" : "A unique identifier for the outreach. Can be an email campaign ID",
            "example" : "839488a60b"
          },
          "type" : {
            "title" : "Outreach type",
            "type" : "string",
            "description" : "The type of the outreach",
            "readOnly" : true,
            "example" : "regular"
          }
        },
        "description" : "The outreach associated with this order. For example, an email campaign or Facebook ad"
      },
      "SegmentIdMembersBody" : {
        "required" : [ "email_address" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          }
        }
      },
      "ListActivity" : {
        "title" : "List Activity",
        "type" : "object",
        "properties" : {
          "activity" : {
            "title" : "List Activity",
            "type" : "array",
            "description" : "Recent list activity",
            "items" : {
              "$ref" : "#/components/schemas/DailyListActivity"
            }
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Up to the previous 180 days of daily detailed aggregated activity stats for a specific list. Does not include AutoResponder or Automation activity"
      },
      "GroupA" : {
        "title" : "Group A",
        "type" : "object",
        "properties" : {
          "click_percentage_a" : {
            "title" : "Click Percentage Group A",
            "type" : "number",
            "description" : "The percentage of total clicks for Group A",
            "readOnly" : true,
            "x-ballerina-name" : "clickPercentageA"
          },
          "unique_clicks_a" : {
            "title" : "Unique Clicks Group A",
            "type" : "integer",
            "description" : "The number of unique clicks for Group A",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClicksA"
          },
          "total_clicks_a" : {
            "title" : "Total Clicks Group A",
            "type" : "integer",
            "description" : "The total number of clicks for Group A",
            "readOnly" : true,
            "x-ballerina-name" : "totalClicksA"
          },
          "unique_click_percentage_a" : {
            "title" : "Unique Click Percentage Group A",
            "type" : "number",
            "description" : "The percentage of unique clicks for Group A",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClickPercentageA"
          }
        },
        "description" : "Stats for Group A"
      },
      "GroupB" : {
        "title" : "Group B",
        "type" : "object",
        "properties" : {
          "click_percentage_b" : {
            "title" : "Click Percentage Group B",
            "type" : "number",
            "description" : "The percentage of total clicks for Group B",
            "readOnly" : true,
            "x-ballerina-name" : "clickPercentageB"
          },
          "unique_clicks_b" : {
            "title" : "Unique Clicks Group B",
            "type" : "integer",
            "description" : "The number of unique clicks for Group B",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClicksB"
          },
          "total_clicks_b" : {
            "title" : "Total Clicks Group B",
            "type" : "integer",
            "description" : "The total number of clicks for Group B",
            "readOnly" : true,
            "x-ballerina-name" : "totalClicksB"
          },
          "unique_click_percentage_b" : {
            "title" : "Unique Click Percentage Group B",
            "type" : "number",
            "description" : "The percentage of unique clicks for Group B",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClickPercentageB"
          }
        },
        "description" : "Stats for Group B"
      },
      "ListContact2" : {
        "title" : "List Contact",
        "type" : "object",
        "properties" : {
          "zip" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code for the list contact"
          },
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "A two-character ISO3166 country code. Defaults to US if invalid"
          },
          "address2" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "city" : {
            "title" : "City",
            "type" : "string",
            "description" : "The city for the list contact"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the list contact"
          },
          "address1" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "company" : {
            "title" : "Company Name",
            "type" : "string",
            "description" : "The company name for the list"
          },
          "state" : {
            "title" : "State",
            "type" : "string",
            "description" : "The state for the list contact"
          }
        },
        "description" : "[Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws"
      },
      "TemplateFolders" : {
        "title" : "Template Folders",
        "type" : "object",
        "properties" : {
          "folders" : {
            "title" : "Template Folders",
            "type" : "array",
            "description" : "An array of objects representing template folders",
            "items" : {
              "$ref" : "#/components/schemas/TemplateFolder2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of template folders"
      },
      "IndustryStats" : {
        "title" : "Industry Stats",
        "type" : "object",
        "properties" : {
          "unopen_rate" : {
            "title" : "Unopened Rate",
            "type" : "number",
            "description" : "The industry unopened rate",
            "x-ballerina-name" : "unopenRate"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The industry click rate",
            "x-ballerina-name" : "clickRate"
          },
          "bounce_rate" : {
            "title" : "Bounce Rate",
            "type" : "number",
            "description" : "The industry bounce rate",
            "x-ballerina-name" : "bounceRate"
          },
          "unsub_rate" : {
            "title" : "Unsubscribe Rate",
            "type" : "number",
            "description" : "The industry unsubscribe rate",
            "x-ballerina-name" : "unsubRate"
          },
          "type" : {
            "title" : "Industry Type",
            "type" : "string",
            "description" : "The type of business industry associated with your account. For example: retail, education, etc"
          },
          "abuse_rate" : {
            "title" : "Abuse Rate",
            "type" : "number",
            "description" : "The industry abuse rate",
            "x-ballerina-name" : "abuseRate"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The industry open rate",
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "The average campaign statistics for your industry"
      },
      "ECommerceCartLineItem2" : {
        "title" : "E-commerce Cart Line Item",
        "type" : "object",
        "properties" : {
          "product_variant_title" : {
            "title" : "Cart Line Product Variant Title",
            "type" : "string",
            "description" : "The name of the product variant for the cart line item",
            "readOnly" : true,
            "x-ballerina-name" : "productVariantTitle"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of a cart line item"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a cart line item"
          },
          "product_id" : {
            "title" : "Cart Line Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the cart line item",
            "x-ballerina-name" : "productId"
          },
          "id" : {
            "title" : "Cart Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart line item",
            "readOnly" : true
          },
          "product_variant_id" : {
            "title" : "Cart Line Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the cart line item",
            "x-ballerina-name" : "productVariantId"
          },
          "product_title" : {
            "title" : "Cart Line Product Title",
            "type" : "string",
            "description" : "The name of the product for the cart line item",
            "readOnly" : true,
            "x-ballerina-name" : "productTitle"
          }
        },
        "description" : "Information about a specific cart line item"
      },
      "SegmentOptions2" : {
        "title" : "Segment Options",
        "type" : "object",
        "properties" : {
          "match" : {
            "title" : "Match Type",
            "type" : "string",
            "description" : "Segment match type",
            "enum" : [ "any", "all" ]
          },
          "saved_segment_id" : {
            "title" : "Saved Segment ID",
            "type" : "integer",
            "description" : "The id for an existing saved segment",
            "x-ballerina-name" : "savedSegmentId"
          },
          "conditions" : {
            "title" : "Segment Type",
            "type" : "array",
            "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)",
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Aim Segment",
                "description" : "Segment by interaction with a specific campaign.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Aim",
                    "enum" : [ "Aim" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "aim" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a specific campaign.",
                    "example" : "aim"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                    "example" : "open"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Automation Segment",
                "description" : "Segment by interaction with an Automation workflow.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Automation",
                    "enum" : [ "Automation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "automation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with an Automation workflow.",
                    "example" : "automation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id for the automation workflow to segment against.",
                    "example" : "2135217"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Poll Activity Segment",
                "description" : "Segment by poll activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "CampaignPoll",
                    "enum" : [ "CampaignPoll" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "poll" ],
                    "title" : "Segment Field",
                    "description" : "Segment by poll activity.",
                    "example" : "poll"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the poll.",
                    "example" : 409
                  }
                }
              }, {
                "type" : "object",
                "title" : "Conversation Segment",
                "description" : "Segment by interaction with a campaign via Conversations.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Conversation",
                    "enum" : [ "Conversation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "conversation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a campaign via Conversations.",
                    "example" : "conversation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Segment",
                "description" : "Segment by a specific date field.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Date",
                    "enum" : [ "Date" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                    "title" : "Segment Field",
                    "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                    "example" : "timestamp_opt"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                    "title" : "Segment Operator",
                    "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                    "example" : "date"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra Value",
                    "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                    "example" : "2015-01-30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Client Segment",
                "description" : "Segment by use of a particular email client.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailClient",
                    "enum" : [ "EmailClient" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "email_client" ],
                    "title" : "Segment Field",
                    "description" : "Segment by use of a particular email client.",
                    "example" : "email_client"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "client_is", "client_not" ],
                    "title" : "Segment Operator",
                    "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                    "example" : "client_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The name of the email client.",
                    "example" : "Gmail"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Language Segment",
                "description" : "Segment by language.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Language",
                    "enum" : [ "Language" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "language" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's language.",
                    "example" : "language"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's language is or is not set to a specific language.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "A two-letter language identifier.",
                    "example" : "en"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Member Rating Segment",
                "description" : "Segment by member rating.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "MemberRating",
                    "enum" : [ "MemberRating" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "rating" ],
                    "title" : "Segment Field",
                    "description" : "Segment by member rating.",
                    "example" : "rating"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The star rating number to segment against.",
                    "example" : 4
                  }
                }
              }, {
                "type" : "object",
                "title" : "Signup Source Segment",
                "description" : "Segment by signup source.",
                "required" : [ "field", "condition_type", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "enum" : [ "SignupSource" ],
                    "x-value" : "SignupSource",
                    "title" : "Type"
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "source" ],
                    "title" : "Segment Field",
                    "example" : "source"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "source_is", "source_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's signup source was/was not a particular value.",
                    "example" : "source_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The signup source.",
                    "example" : "List Import"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey Monkey Segment",
                "description" : "Segment by interaction with a SurveyMonkey survey.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SurveyMonkey",
                    "enum" : [ "SurveyMonkey" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "survey_monkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a SurveyMonkey survey.",
                    "example" : "survey_monkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The unique ID of the survey monkey survey.",
                    "example" : "32179586"
                  }
                }
              }, {
                "type" : "object",
                "title" : "VIP Segment",
                "description" : "Segment by VIP status.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "VIP",
                    "enum" : [ "VIP" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "gmonkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by VIP status.",
                    "example" : "gmonkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is or is not marked as VIP.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Interests Segment",
                "description" : "Segment by an interest group merge field.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Interests",
                    "enum" : [ "Interests" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                    "example" : "interests-123"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is a part of one, all, or none of the groups.",
                    "example" : "interestcontains"
                  },
                  "value" : {
                    "type" : "array",
                    "title" : "Segment Value",
                    "description" : "An array containing strings, each representing a group id.",
                    "items" : {
                      "type" : "string",
                      "example" : [ "44401", "44405", "44409" ]
                    }
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Category Segment",
                "description" : "Segment by purchases in specific items or categories.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommCategory",
                    "enum" : [ "EcommCategory" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_cat", "ecomm_prod" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases in specific items or categories.",
                    "example" : "ecomm_cat"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The ecommerce category/item information.",
                    "example" : "Product"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Number Segment",
                "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommNumber",
                    "enum" : [ "EcommNumber" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                    "title" : "Segment Field",
                    "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                    "example" : "ecomm_orders"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Segment",
                "description" : "Segment by whether someone has purchased anything.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommPurchased",
                    "enum" : [ "EcommPurchased" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_purchased" ],
                    "title" : "Segment Field",
                    "description" : "Segment by whether someone has purchased anything.",
                    "example" : "ecomm_purchased"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Spent Segment",
                "description" : "Segment by amount spent on a single order or across all orders.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommSpent",
                    "enum" : [ "EcommSpent" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                    "title" : "Segment Field",
                    "description" : "Segment by amount spent on a single order or across all orders.",
                    "example" : "ecomm_spent_one"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent 'more' or 'less' than then specified value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The total amount a member spent.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Store Segment",
                "description" : "Segment by purchases from a specific store.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommStore",
                    "enum" : [ "EcommStore" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_store" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases from a specific store.",
                    "example" : "ecomm_store"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have or have not purchased from a specific store.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Operator",
                    "description" : "The store id to segment against.",
                    "example" : "289"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Activity Segment",
                "description" : "Segment by Goal activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalActivity",
                    "enum" : [ "GoalActivity" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal" ],
                    "title" : "Segment Field",
                    "description" : "Segment by Goal activity.",
                    "example" : "goal"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The URL to check Goal activity against."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Timestamp Segment",
                "description" : "Segment by most recent interaction with a website.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalTimestamp",
                    "enum" : [ "GoalTimestamp" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal_last_visited" ],
                    "title" : "Segment Field",
                    "description" : "Segment by most recent interaction with a website.",
                    "example" : "goal_last_visited"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The date to check Goal activity against.",
                    "example" : "2015-07-20 19:45:21"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Similar Subscribers Segment Member Segment",
                "description" : "Segment by similar subscribers.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "FuzzySegment",
                    "enum" : [ "FuzzySegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by similar subscribers.",
                    "example" : "fuzzy_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_is", "fuzzy_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                    "example" : "fuzzy_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the 'similar subscribers' segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Static Segment Member Segment",
                "description" : "Segment by a given static segment.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "StaticSegment",
                    "enum" : [ "StaticSegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "static_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by a given static segment.",
                    "example" : "static_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "static_is", "static_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a static segment.",
                    "example" : "static_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the static segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Location-Based Segment",
                "description" : "Segment by a specific country or US state.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoCountryState",
                    "enum" : [ "IPGeoCountryState" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific country or US state.",
                    "example" : "ipgeocountry"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The two-letter country code or US state abbreviation.",
                    "example" : "US"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Geolocation Segment",
                "description" : "Segment by a specific geographic region.",
                "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoIn",
                    "enum" : [ "IPGeoIn" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoin", "ipgeonotin" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific geographic region.",
                    "example" : "ipgeoin"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 42
                  },
                  "addr" : {
                    "type" : "string",
                    "title" : "Segment Location Address",
                    "description" : "The address of the target location.",
                    "example" : "Atlanta, GA, USA"
                  },
                  "lat" : {
                    "type" : "string",
                    "title" : "Segment Location Latitude",
                    "description" : "The latitude of the target location.",
                    "example" : "33.7489954"
                  },
                  "lng" : {
                    "type" : "string",
                    "title" : "Segment Location Longitude",
                    "description" : "The longitude of the target location.",
                    "example" : "-84.3879824"
                  }
                }
              }, {
                "type" : "object",
                "title" : "US Zip Code Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoInZip",
                    "enum" : [ "IPGeoInZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoinzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific US zip code.",
                    "example" : "ipgeoinzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 25
                  },
                  "extra" : {
                    "type" : "integer",
                    "title" : "Extra Data",
                    "description" : "The zip code to segment against.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Unknown Location-Based Segment",
                "description" : "Segment members whose location information is unknown.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoUnknown",
                    "enum" : [ "IPGeoUnknown" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeounknown" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members for which location information is unknown.",
                    "example" : "ipgeounknown"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Zip Code Location-Based Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoZip",
                    "enum" : [ "IPGeoZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are/are not within a specific US zip code.",
                    "example" : "ipgeonotzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The 5-digit zip code.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Age Segment",
                "description" : "Segment by age ranges in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialAge",
                    "enum" : [ "SocialAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_age" ],
                    "title" : "Segment Field",
                    "description" : "Segment by age ranges in Social Profiles data.",
                    "example" : "social_age"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                    "title" : "Segment Operator",
                    "description" : "The age range to segment.",
                    "example" : "35-54"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Gender Segment",
                "description" : "Segment by listed gender in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialGender",
                    "enum" : [ "SocialGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by listed gender in Social Profiles data.",
                    "example" : "social_gender"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Influence Segment",
                "description" : "Segment by influence rating in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialInfluence",
                    "enum" : [ "SocialInfluence" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_influence" ],
                    "title" : "Segment Field",
                    "description" : "Segment by influence rating in Social Profiles data.",
                    "example" : "social_influence"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles influence rating to segment.",
                    "example" : 2
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkMember",
                    "enum" : [ "SocialNetworkMember" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not on a given social network.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Follow Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkFollow",
                    "enum" : [ "SocialNetworkFollow" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "follow", "notfollow" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not following a linked account on a given social network.",
                    "example" : "follow"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter_follow" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter_follow"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address Merge Field Segment",
                "description" : "Segment by an address-type merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "AddressMerge",
                    "enum" : [ "AddressMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address-type merge field to segment.",
                    "example" : "MMERGE3"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Atlanta"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address/Zip Merge Field Segment",
                "description" : "Segment by an address-type merge field within a given distance.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "ZipMerge",
                    "enum" : [ "ZipMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address or zip-type merge field to segment.",
                    "example" : "MMERGE2"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "geoin" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                    "example" : "geoin"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The distance from the city/zip.",
                    "example" : "25"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra",
                    "description" : "The city or the zip being used to segment against.",
                    "example" : "30318"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Birthday Merge Field Segment",
                "description" : "Segment by a contact's birthday.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "BirthdayMerge",
                    "enum" : [ "BirthdayMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE4"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against (mm/dd).",
                    "example" : "01/30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Merge Field Segment",
                "description" : "Segment by a given date merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "DateMerge",
                    "enum" : [ "DateMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE5"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against.",
                    "example" : "01/30/2015"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Dropdown/Radio Merge Field Segment",
                "description" : "An individual segment condition",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SelectMerge",
                    "enum" : [ "SelectMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A merge field to segment.",
                    "example" : "MMERGE6"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Second Choice"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Text or Number Merge Field Segment",
                "description" : "Segment by a given text or number merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "TextMerge",
                    "enum" : [ "TextMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A text or number merge field to segment.",
                    "example" : "MMERGE7"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text or number merge field with.",
                    "example" : "Freddie's Jokes"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Segment",
                "description" : "Segment by email address.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailAddress",
                    "enum" : [ "EmailAddress" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "merge0", "EMAIL" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's email address.",
                    "example" : "EMAIL"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to compare the email against.",
                    "example" : "urist.mcvankab@freddiesjokes.com"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Gender Segment",
                "description" : "Segment by predicted gender.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedGender",
                    "enum" : [ "PredictedGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted gender."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Age Segment",
                "description" : "Segment by predicted age.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedAge",
                    "enum" : [ "PredictedAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_age_range" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted age."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted age to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "New Subscribers Prebuilt Segment",
                "description" : "Segment by when people subscribed.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "NewSubscribers",
                    "enum" : [ "NewSubscribers" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt" ],
                    "title" : "Segment Field",
                    "description" : "Segment by when people subscribed."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "date_within" ],
                    "title" : "Segment Operator",
                    "description" : "Whe the event took place, namely within a time frame."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                  }
                }
              } ],
              "x-discriminator" : {
                "type" : "string",
                "propertyName" : "condition_type"
              }
            }
          }
        },
        "description" : "An object representing all segmentation options"
      },
      "ECommerceCartLineItem1" : {
        "title" : "E-commerce Cart Line Item",
        "type" : "object",
        "properties" : {
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of a cart line item"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a cart line item"
          },
          "product_id" : {
            "title" : "Cart Line Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the cart line item",
            "x-ballerina-name" : "productId"
          },
          "product_variant_id" : {
            "title" : "Cart Line Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the cart line item",
            "x-ballerina-name" : "productVariantId"
          }
        },
        "description" : "Information about a specific cart line item"
      },
      "SegmentOptions1" : {
        "title" : "Segment Options",
        "type" : "object",
        "properties" : {
          "prebuilt_segment_id" : {
            "title" : "Prebuilt Segment Id",
            "type" : "string",
            "description" : "The prebuilt segment id, if a prebuilt segment has been designated for this campaign",
            "example" : "subscribers-female",
            "x-ballerina-name" : "prebuiltSegmentId"
          },
          "match" : {
            "title" : "Match Type",
            "type" : "string",
            "description" : "Segment match type",
            "enum" : [ "any", "all" ]
          },
          "saved_segment_id" : {
            "title" : "Saved Segment ID",
            "type" : "integer",
            "description" : "The id for an existing saved segment",
            "x-ballerina-name" : "savedSegmentId"
          },
          "conditions" : {
            "title" : "Segment Type",
            "type" : "array",
            "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)",
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Aim Segment",
                "description" : "Segment by interaction with a specific campaign.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Aim",
                    "enum" : [ "Aim" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "aim" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a specific campaign.",
                    "example" : "aim"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                    "example" : "open"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Automation Segment",
                "description" : "Segment by interaction with an Automation workflow.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Automation",
                    "enum" : [ "Automation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "automation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with an Automation workflow.",
                    "example" : "automation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id for the automation workflow to segment against.",
                    "example" : "2135217"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Poll Activity Segment",
                "description" : "Segment by poll activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "CampaignPoll",
                    "enum" : [ "CampaignPoll" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "poll" ],
                    "title" : "Segment Field",
                    "description" : "Segment by poll activity.",
                    "example" : "poll"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the poll.",
                    "example" : 409
                  }
                }
              }, {
                "type" : "object",
                "title" : "Conversation Segment",
                "description" : "Segment by interaction with a campaign via Conversations.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Conversation",
                    "enum" : [ "Conversation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "conversation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a campaign via Conversations.",
                    "example" : "conversation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Segment",
                "description" : "Segment by a specific date field.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Date",
                    "enum" : [ "Date" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                    "title" : "Segment Field",
                    "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                    "example" : "timestamp_opt"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                    "title" : "Segment Operator",
                    "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                    "example" : "date"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra Value",
                    "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                    "example" : "2015-01-30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Client Segment",
                "description" : "Segment by use of a particular email client.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailClient",
                    "enum" : [ "EmailClient" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "email_client" ],
                    "title" : "Segment Field",
                    "description" : "Segment by use of a particular email client.",
                    "example" : "email_client"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "client_is", "client_not" ],
                    "title" : "Segment Operator",
                    "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                    "example" : "client_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The name of the email client.",
                    "example" : "Gmail"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Language Segment",
                "description" : "Segment by language.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Language",
                    "enum" : [ "Language" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "language" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's language.",
                    "example" : "language"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's language is or is not set to a specific language.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "A two-letter language identifier.",
                    "example" : "en"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Member Rating Segment",
                "description" : "Segment by member rating.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "MemberRating",
                    "enum" : [ "MemberRating" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "rating" ],
                    "title" : "Segment Field",
                    "description" : "Segment by member rating.",
                    "example" : "rating"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The star rating number to segment against.",
                    "example" : 4
                  }
                }
              }, {
                "type" : "object",
                "title" : "Signup Source Segment",
                "description" : "Segment by signup source.",
                "required" : [ "field", "condition_type", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "enum" : [ "SignupSource" ],
                    "x-value" : "SignupSource",
                    "title" : "Type"
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "source" ],
                    "title" : "Segment Field",
                    "example" : "source"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "source_is", "source_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's signup source was/was not a particular value.",
                    "example" : "source_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The signup source.",
                    "example" : "List Import"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey Monkey Segment",
                "description" : "Segment by interaction with a SurveyMonkey survey.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SurveyMonkey",
                    "enum" : [ "SurveyMonkey" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "survey_monkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a SurveyMonkey survey.",
                    "example" : "survey_monkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The unique ID of the survey monkey survey.",
                    "example" : "32179586"
                  }
                }
              }, {
                "type" : "object",
                "title" : "VIP Segment",
                "description" : "Segment by VIP status.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "VIP",
                    "enum" : [ "VIP" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "gmonkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by VIP status.",
                    "example" : "gmonkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is or is not marked as VIP.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Interests Segment",
                "description" : "Segment by an interest group merge field.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Interests",
                    "enum" : [ "Interests" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                    "example" : "interests-123"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is a part of one, all, or none of the groups.",
                    "example" : "interestcontains"
                  },
                  "value" : {
                    "type" : "array",
                    "title" : "Segment Value",
                    "description" : "An array containing strings, each representing a group id.",
                    "items" : {
                      "type" : "string",
                      "example" : [ "44401", "44405", "44409" ]
                    }
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Category Segment",
                "description" : "Segment by purchases in specific items or categories.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommCategory",
                    "enum" : [ "EcommCategory" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_cat", "ecomm_prod" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases in specific items or categories.",
                    "example" : "ecomm_cat"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The ecommerce category/item information.",
                    "example" : "Product"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Number Segment",
                "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommNumber",
                    "enum" : [ "EcommNumber" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                    "title" : "Segment Field",
                    "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                    "example" : "ecomm_orders"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Segment",
                "description" : "Segment by whether someone has purchased anything.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommPurchased",
                    "enum" : [ "EcommPurchased" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_purchased" ],
                    "title" : "Segment Field",
                    "description" : "Segment by whether someone has purchased anything.",
                    "example" : "ecomm_purchased"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Spent Segment",
                "description" : "Segment by amount spent on a single order or across all orders.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommSpent",
                    "enum" : [ "EcommSpent" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                    "title" : "Segment Field",
                    "description" : "Segment by amount spent on a single order or across all orders.",
                    "example" : "ecomm_spent_one"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent 'more' or 'less' than then specified value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The total amount a member spent.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Store Segment",
                "description" : "Segment by purchases from a specific store.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommStore",
                    "enum" : [ "EcommStore" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_store" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases from a specific store.",
                    "example" : "ecomm_store"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have or have not purchased from a specific store.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Operator",
                    "description" : "The store id to segment against.",
                    "example" : "289"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Activity Segment",
                "description" : "Segment by Goal activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalActivity",
                    "enum" : [ "GoalActivity" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal" ],
                    "title" : "Segment Field",
                    "description" : "Segment by Goal activity.",
                    "example" : "goal"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The URL to check Goal activity against."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Timestamp Segment",
                "description" : "Segment by most recent interaction with a website.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalTimestamp",
                    "enum" : [ "GoalTimestamp" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal_last_visited" ],
                    "title" : "Segment Field",
                    "description" : "Segment by most recent interaction with a website.",
                    "example" : "goal_last_visited"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The date to check Goal activity against.",
                    "example" : "2015-07-20 19:45:21"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Similar Subscribers Segment Member Segment",
                "description" : "Segment by similar subscribers.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "FuzzySegment",
                    "enum" : [ "FuzzySegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by similar subscribers.",
                    "example" : "fuzzy_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_is", "fuzzy_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                    "example" : "fuzzy_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the 'similar subscribers' segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Static Segment Member Segment",
                "description" : "Segment by a given static segment.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "StaticSegment",
                    "enum" : [ "StaticSegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "static_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by a given static segment.",
                    "example" : "static_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "static_is", "static_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a static segment.",
                    "example" : "static_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the static segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Location-Based Segment",
                "description" : "Segment by a specific country or US state.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoCountryState",
                    "enum" : [ "IPGeoCountryState" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific country or US state.",
                    "example" : "ipgeocountry"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The two-letter country code or US state abbreviation.",
                    "example" : "US"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Geolocation Segment",
                "description" : "Segment by a specific geographic region.",
                "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoIn",
                    "enum" : [ "IPGeoIn" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoin", "ipgeonotin" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific geographic region.",
                    "example" : "ipgeoin"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 42
                  },
                  "addr" : {
                    "type" : "string",
                    "title" : "Segment Location Address",
                    "description" : "The address of the target location.",
                    "example" : "Atlanta, GA, USA"
                  },
                  "lat" : {
                    "type" : "string",
                    "title" : "Segment Location Latitude",
                    "description" : "The latitude of the target location.",
                    "example" : "33.7489954"
                  },
                  "lng" : {
                    "type" : "string",
                    "title" : "Segment Location Longitude",
                    "description" : "The longitude of the target location.",
                    "example" : "-84.3879824"
                  }
                }
              }, {
                "type" : "object",
                "title" : "US Zip Code Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoInZip",
                    "enum" : [ "IPGeoInZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoinzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific US zip code.",
                    "example" : "ipgeoinzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 25
                  },
                  "extra" : {
                    "type" : "integer",
                    "title" : "Extra Data",
                    "description" : "The zip code to segment against.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Unknown Location-Based Segment",
                "description" : "Segment members whose location information is unknown.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoUnknown",
                    "enum" : [ "IPGeoUnknown" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeounknown" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members for which location information is unknown.",
                    "example" : "ipgeounknown"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Zip Code Location-Based Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoZip",
                    "enum" : [ "IPGeoZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are/are not within a specific US zip code.",
                    "example" : "ipgeonotzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The 5-digit zip code.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Age Segment",
                "description" : "Segment by age ranges in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialAge",
                    "enum" : [ "SocialAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_age" ],
                    "title" : "Segment Field",
                    "description" : "Segment by age ranges in Social Profiles data.",
                    "example" : "social_age"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                    "title" : "Segment Operator",
                    "description" : "The age range to segment.",
                    "example" : "35-54"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Gender Segment",
                "description" : "Segment by listed gender in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialGender",
                    "enum" : [ "SocialGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by listed gender in Social Profiles data.",
                    "example" : "social_gender"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Influence Segment",
                "description" : "Segment by influence rating in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialInfluence",
                    "enum" : [ "SocialInfluence" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_influence" ],
                    "title" : "Segment Field",
                    "description" : "Segment by influence rating in Social Profiles data.",
                    "example" : "social_influence"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles influence rating to segment.",
                    "example" : 2
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkMember",
                    "enum" : [ "SocialNetworkMember" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not on a given social network.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Follow Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkFollow",
                    "enum" : [ "SocialNetworkFollow" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "follow", "notfollow" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not following a linked account on a given social network.",
                    "example" : "follow"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter_follow" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter_follow"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address Merge Field Segment",
                "description" : "Segment by an address-type merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "AddressMerge",
                    "enum" : [ "AddressMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address-type merge field to segment.",
                    "example" : "MMERGE3"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Atlanta"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address/Zip Merge Field Segment",
                "description" : "Segment by an address-type merge field within a given distance.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "ZipMerge",
                    "enum" : [ "ZipMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address or zip-type merge field to segment.",
                    "example" : "MMERGE2"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "geoin" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                    "example" : "geoin"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The distance from the city/zip.",
                    "example" : "25"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra",
                    "description" : "The city or the zip being used to segment against.",
                    "example" : "30318"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Birthday Merge Field Segment",
                "description" : "Segment by a contact's birthday.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "BirthdayMerge",
                    "enum" : [ "BirthdayMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE4"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against (mm/dd).",
                    "example" : "01/30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Merge Field Segment",
                "description" : "Segment by a given date merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "DateMerge",
                    "enum" : [ "DateMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE5"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against.",
                    "example" : "01/30/2015"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Dropdown/Radio Merge Field Segment",
                "description" : "An individual segment condition",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SelectMerge",
                    "enum" : [ "SelectMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A merge field to segment.",
                    "example" : "MMERGE6"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Second Choice"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Text or Number Merge Field Segment",
                "description" : "Segment by a given text or number merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "TextMerge",
                    "enum" : [ "TextMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A text or number merge field to segment.",
                    "example" : "MMERGE7"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text or number merge field with.",
                    "example" : "Freddie's Jokes"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Segment",
                "description" : "Segment by email address.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailAddress",
                    "enum" : [ "EmailAddress" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "merge0", "EMAIL" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's email address.",
                    "example" : "EMAIL"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to compare the email against.",
                    "example" : "urist.mcvankab@freddiesjokes.com"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Gender Segment",
                "description" : "Segment by predicted gender.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedGender",
                    "enum" : [ "PredictedGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted gender."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Age Segment",
                "description" : "Segment by predicted age.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedAge",
                    "enum" : [ "PredictedAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_age_range" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted age."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted age to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "New Subscribers Prebuilt Segment",
                "description" : "Segment by when people subscribed.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "NewSubscribers",
                    "enum" : [ "NewSubscribers" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt" ],
                    "title" : "Segment Field",
                    "description" : "Segment by when people subscribed."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "date_within" ],
                    "title" : "Segment Operator",
                    "description" : "Whe the event took place, namely within a time frame."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                  }
                }
              } ],
              "x-discriminator" : {
                "type" : "string",
                "propertyName" : "condition_type"
              }
            }
          }
        },
        "description" : "An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options"
      },
      "ECommerceCartLineItem3" : {
        "title" : "E-commerce Cart Line Item",
        "type" : "object",
        "properties" : {
          "product_variant_title" : {
            "title" : "Cart Line Product Variant Title",
            "type" : "string",
            "description" : "The name of the product variant for the cart line item",
            "readOnly" : true,
            "x-ballerina-name" : "productVariantTitle"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of a cart line item"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a cart line item"
          },
          "product_id" : {
            "title" : "Cart Line Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the cart line item",
            "x-ballerina-name" : "productId"
          },
          "id" : {
            "title" : "Cart Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart line item",
            "readOnly" : true
          },
          "product_variant_id" : {
            "title" : "Cart Line Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the cart line item",
            "x-ballerina-name" : "productVariantId"
          },
          "product_title" : {
            "title" : "Cart Line Product Title",
            "type" : "string",
            "description" : "The name of the product for the cart line item",
            "readOnly" : true,
            "x-ballerina-name" : "productTitle"
          }
        },
        "description" : "Information about a specific cart line item"
      },
      "ListWebhooks2" : {
        "title" : "List Webhooks",
        "type" : "object",
        "properties" : {
          "sources" : {
            "$ref" : "#/components/schemas/Sources1"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "example" : "4ca5becb8d",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Unique ID",
            "type" : "string",
            "description" : "An string that uniquely identifies this webhook",
            "readOnly" : true,
            "example" : "5d9a5e3f7b"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "readOnly" : true,
            "example" : "http://yourdomain.com/webhook"
          },
          "events" : {
            "$ref" : "#/components/schemas/Events2"
          }
        },
        "description" : "Webhook configured for the given list"
      },
      "Event" : {
        "title" : "Event",
        "type" : "object",
        "properties" : {
          "occurred_at" : {
            "title" : "Occurred Time",
            "type" : "string",
            "description" : "The date and time the event occurred in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "occurredAt"
          },
          "name" : {
            "title" : "Event Name",
            "type" : "string",
            "description" : "The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length"
          },
          "properties" : {
            "title" : "Properties",
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "An optional list of properties"
          }
        },
        "description" : "A specific event for a contact"
      },
      "Batch1" : {
        "title" : "Batch",
        "type" : "object",
        "properties" : {
          "finished_operations" : {
            "title" : "Finished Operations",
            "type" : "integer",
            "description" : "The number of completed operations. This includes operations that returned an error",
            "readOnly" : true,
            "x-ballerina-name" : "finishedOperations"
          },
          "completed_at" : {
            "title" : "Completed At",
            "type" : "string",
            "description" : "The date and time when all operations in the batch request completed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "completedAt"
          },
          "submitted_at" : {
            "title" : "Submitted At",
            "type" : "string",
            "description" : "The date and time when the server received the batch request in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "submittedAt"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_operations" : {
            "title" : "Total Operations",
            "type" : "integer",
            "description" : "The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation",
            "readOnly" : true,
            "x-ballerina-name" : "totalOperations"
          },
          "errored_operations" : {
            "title" : "Error Operations",
            "type" : "integer",
            "description" : "The number of completed operations that returned an error",
            "readOnly" : true,
            "x-ballerina-name" : "erroredOperations"
          },
          "id" : {
            "title" : "Batch ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this batch request",
            "readOnly" : true
          },
          "response_body_url" : {
            "title" : "Response Body URL",
            "type" : "string",
            "description" : "The URL of the gzipped archive of the results of all the operations",
            "readOnly" : true,
            "x-ballerina-name" : "responseBodyUrl"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status",
            "readOnly" : true,
            "enum" : [ "pending", "preprocessing", "started", "finalizing", "finished" ]
          }
        },
        "description" : "The status of a batch request"
      },
      "ClickDetailReport2" : {
        "title" : "Click Detail Report",
        "type" : "object",
        "properties" : {
          "unique_click_percentage" : {
            "title" : "Unique Click Percentage",
            "type" : "number",
            "description" : "The percentage of unique clicks a link generated for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClickPercentage"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "unique_clicks" : {
            "title" : "Unique Clicks",
            "type" : "integer",
            "description" : "Number of unique clicks for a link",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClicks"
          },
          "ab_split" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABSplit"
            } ],
            "x-ballerina-name" : "abSplit"
          },
          "click_percentage" : {
            "title" : "Click Percentage",
            "type" : "number",
            "description" : "The percentage of total clicks a link generated for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "clickPercentage"
          },
          "total_clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The number of total clicks for a link",
            "readOnly" : true,
            "x-ballerina-name" : "totalClicks"
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The date and time for the last recorded click for a link in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastClick"
          },
          "id" : {
            "title" : "URL ID",
            "type" : "string",
            "description" : "The unique id for the link",
            "readOnly" : true
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for the link in the campaign",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A report of links clicked in a specific campaign"
      },
      "ClickDetailReport1" : {
        "title" : "Click Detail Report",
        "type" : "object",
        "properties" : {
          "unique_click_percentage" : {
            "title" : "Unique Click Percentage",
            "type" : "number",
            "description" : "The percentage of unique clicks a link generated for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClickPercentage"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "unique_clicks" : {
            "title" : "Unique Clicks",
            "type" : "integer",
            "description" : "Number of unique clicks for a link",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueClicks"
          },
          "ab_split" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABSplit"
            } ],
            "x-ballerina-name" : "abSplit"
          },
          "click_percentage" : {
            "title" : "Click Percentage",
            "type" : "number",
            "description" : "The percentage of total clicks a link generated for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "clickPercentage"
          },
          "total_clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The number of total clicks for a link",
            "readOnly" : true,
            "x-ballerina-name" : "totalClicks"
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The date and time for the last recorded click for a link in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastClick"
          },
          "id" : {
            "title" : "URL ID",
            "type" : "string",
            "description" : "The unique id for the link",
            "readOnly" : true
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for the link in the campaign",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A report of links clicked in a specific campaign"
      },
      "ListContact1" : {
        "title" : "List Contact",
        "required" : [ "address1", "city", "company", "country", "state", "zip" ],
        "type" : "object",
        "properties" : {
          "zip" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code for the list contact"
          },
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "A two-character ISO3166 country code. Defaults to US if invalid"
          },
          "address2" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "city" : {
            "title" : "City",
            "type" : "string",
            "description" : "The city for the list contact"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the list contact"
          },
          "address1" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "company" : {
            "title" : "Company Name",
            "type" : "string",
            "description" : "The company name for the list"
          },
          "state" : {
            "title" : "State",
            "type" : "string",
            "description" : "The state for the list contact"
          }
        },
        "description" : "[Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws"
      },
      "ListWebhooks1" : {
        "title" : "List Webhooks",
        "type" : "object",
        "properties" : {
          "sources" : {
            "$ref" : "#/components/schemas/Sources1"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "example" : "4ca5becb8d",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Unique ID",
            "type" : "string",
            "description" : "An string that uniquely identifies this webhook",
            "readOnly" : true,
            "example" : "5d9a5e3f7b"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "readOnly" : true,
            "example" : "http://yourdomain.com/webhook"
          },
          "events" : {
            "$ref" : "#/components/schemas/Events2"
          }
        },
        "description" : "Webhook configured for the given list"
      },
      "APIHealthStatus" : {
        "title" : "API health status",
        "type" : "object",
        "properties" : {
          "health_status" : {
            "title" : "API health status",
            "type" : "string",
            "description" : "This will return a constant string value if the request is successful. Ex. \"Everything's Chimpy!\"",
            "readOnly" : true,
            "example" : "\"Everything's Chimpy!\"",
            "x-ballerina-name" : "healthStatus"
          }
        },
        "description" : "API health status"
      },
      "InlineResponse20013ReportSummaryEcommerce" : {
        "type" : "object",
        "properties" : {
          "total_revenue" : {
            "type" : "number",
            "x-ballerina-name" : "totalRevenue"
          },
          "currency_code" : {
            "type" : "string",
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "SurveyQuestionReport" : {
        "title" : "Survey Question Report",
        "type" : "object",
        "properties" : {
          "range_low_label" : {
            "title" : "Range Low Label",
            "type" : "string",
            "description" : "Label for the low end of the range",
            "readOnly" : true,
            "x-ballerina-name" : "rangeLowLabel"
          },
          "query" : {
            "title" : "Query Text",
            "type" : "string",
            "description" : "The query of the survey question",
            "readOnly" : true
          },
          "average_rating" : {
            "title" : "Average Rating for a Range Question",
            "type" : "number",
            "description" : "The average rating for this range question",
            "format" : "float",
            "readOnly" : true,
            "example" : 2.5,
            "x-ballerina-name" : "averageRating"
          },
          "subscribe_checkbox_label" : {
            "title" : "Subscribe Checkbox Label",
            "type" : "string",
            "description" : "Label used for the subscribe checkbox for this email question",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeCheckboxLabel"
          },
          "type" : {
            "title" : "Response Type",
            "type" : "string",
            "description" : "The response type of the survey question",
            "readOnly" : true,
            "enum" : [ "pickOne", "pickMany", "range", "text", "email" ]
          },
          "range_high_label" : {
            "title" : "Range High Label",
            "type" : "string",
            "description" : "Label for the high end of the range",
            "readOnly" : true,
            "x-ballerina-name" : "rangeHighLabel"
          },
          "subscribe_checkbox_enabled" : {
            "title" : "Is Subscribe Checkbox Enabled",
            "type" : "boolean",
            "description" : "Whether the subscribe checkbox is shown for this email question",
            "readOnly" : true,
            "x-ballerina-name" : "subscribeCheckboxEnabled"
          },
          "survey_id" : {
            "title" : "Survey ID",
            "type" : "string",
            "description" : "The unique ID of the survey",
            "readOnly" : true,
            "x-ballerina-name" : "surveyId"
          },
          "has_other" : {
            "title" : "Has Other Option",
            "type" : "boolean",
            "description" : "Whether this survey question has an 'other' option",
            "readOnly" : true,
            "x-ballerina-name" : "hasOther"
          },
          "placeholder_label" : {
            "title" : "Placeholder Label",
            "type" : "string",
            "description" : "Placeholder text for this survey question's answer box",
            "readOnly" : true,
            "x-ballerina-name" : "placeholderLabel"
          },
          "other_label" : {
            "title" : "Other Option Label",
            "type" : "string",
            "description" : "Label used for the 'other' option of this survey question",
            "readOnly" : true,
            "x-ballerina-name" : "otherLabel"
          },
          "contact_counts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ContactCounts"
            } ],
            "x-ballerina-name" : "contactCounts"
          },
          "is_required" : {
            "title" : "Is Required",
            "type" : "boolean",
            "description" : "Whether this survey question is required to answer",
            "readOnly" : true,
            "x-ballerina-name" : "isRequired"
          },
          "options" : {
            "title" : "Options",
            "type" : "array",
            "description" : "The answer choices for this question",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/SurveyQuestionReportOptions"
            }
          },
          "total_responses" : {
            "title" : "Total Responses",
            "type" : "integer",
            "description" : "The total number of responses to this question",
            "readOnly" : true,
            "example" : 810,
            "x-ballerina-name" : "totalResponses"
          },
          "id" : {
            "title" : "Survey Question ID",
            "type" : "string",
            "description" : "The ID of the survey question",
            "readOnly" : true
          },
          "merge_field" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/MergeField4"
            } ],
            "x-ballerina-name" : "mergeField"
          }
        },
        "description" : "The details of a survey question's report"
      },
      "SendChecklistItems" : {
        "type" : "object",
        "properties" : {
          "heading" : {
            "title" : "Heading",
            "type" : "string",
            "description" : "The heading for the specific item"
          },
          "details" : {
            "title" : "Details",
            "type" : "string",
            "description" : "Details about the specific feedback item"
          },
          "id" : {
            "title" : "ID",
            "type" : "integer",
            "description" : "The ID for the specific item"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The item type",
            "enum" : [ "success", "warning", "error" ]
          }
        }
      },
      "PartialMatches" : {
        "title" : "Partial Matches",
        "type" : "object",
        "properties" : {
          "members" : {
            "title" : "Members",
            "type" : "array",
            "description" : "An array of objects, each representing a specific list member",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers4"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Partial matches of the provided search query"
      },
      "CampaignSubReportsTimewarp" : {
        "type" : "object",
        "properties" : {
          "unique_clicks" : {
            "title" : "Unique Clicks",
            "type" : "integer",
            "description" : "The number of unique clicks",
            "x-ballerina-name" : "uniqueClicks"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "integer",
            "description" : "The number of opens"
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The number of clicks"
          },
          "last_click" : {
            "title" : "Last Click",
            "type" : "string",
            "description" : "The date and time of the last click in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastClick"
          },
          "gmt_offset" : {
            "title" : "GMT Offset",
            "type" : "integer",
            "description" : "For campaigns sent with timewarp, the time zone group the member is apart of",
            "x-ballerina-name" : "gmtOffset"
          },
          "bounces" : {
            "title" : "Bounces",
            "type" : "integer",
            "description" : "The number of bounces"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The date and time of the last open in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastOpen"
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "x-ballerina-name" : "uniqueOpens"
          }
        }
      },
      "Orders1" : {
        "title" : "Orders",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "orders" : {
            "title" : "Orders",
            "type" : "array",
            "description" : "An array of objects, each representing an order in a store",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrder4"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of orders in a store"
      },
      "Templates" : {
        "title" : "Templates",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "templates" : {
            "title" : "User Templates",
            "type" : "array",
            "description" : "All of an account's saved or custom templates",
            "items" : {
              "$ref" : "#/components/schemas/TemplateInstance2"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list an account's available templates"
      },
      "SurveyQuestionAnswer" : {
        "title" : "Survey Question Answer",
        "type" : "object",
        "properties" : {
          "submitted_at" : {
            "title" : "Submitted At",
            "type" : "string",
            "description" : "The date and time when the survey response was submitted in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "submittedAt"
          },
          "response_id" : {
            "title" : "Response ID",
            "type" : "string",
            "description" : "The ID of the survey response",
            "readOnly" : true,
            "x-ballerina-name" : "responseId"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "is_new_contact" : {
            "title" : "Is New Contact",
            "type" : "boolean",
            "description" : "If this contact was added to the Mailchimp audience via this survey",
            "x-ballerina-name" : "isNewContact"
          },
          "id" : {
            "title" : "Answer ID",
            "type" : "string",
            "description" : "The ID of the answer",
            "readOnly" : true
          },
          "value" : {
            "title" : "Value",
            "type" : "string",
            "description" : "The raw text answer",
            "readOnly" : true
          }
        },
        "description" : "The details of a survey question's answer"
      },
      "Unsubscribes1" : {
        "title" : "Unsubscribes",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "reason" : {
            "title" : "Unsubscribe Reason",
            "type" : "string",
            "description" : "If available, the reason listed by the member for unsubscribing",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time the member opted-out in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "A member who unsubscribed from a specific campaign"
      },
      "FacebookAdsAllOf1" : {
        "type" : "object",
        "properties" : {
          "has_segment" : {
            "title" : "Has Segment",
            "type" : "boolean",
            "description" : "If this outreach targets a segment of your audience",
            "x-ballerina-name" : "hasSegment"
          },
          "thumbnail" : {
            "title" : "Thumbnail",
            "type" : "string",
            "description" : "The URL of the thumbnail for this outreach"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the outreach was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createTime"
          },
          "canceled_at" : {
            "title" : "Canceled At",
            "type" : "string",
            "description" : "The date and time the outreach was canceled in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "canceledAt"
          },
          "web_id" : {
            "title" : "Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "x-ballerina-name" : "webId"
          },
          "type" : {
            "title" : "Outreach Type",
            "type" : "string",
            "description" : "The type of outreach this object is",
            "enum" : [ "regular", "email-touchpoint", "plaintext", "rss", "reconfirm", "variate", "absplit", "automation", "facebook", "google", "autoresponder", "transactional", "page", "website", "social_post", "survey", "customer_journey", "sms" ]
          },
          "show_report" : {
            "title" : "Show Report",
            "type" : "boolean",
            "description" : "Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context",
            "x-ballerina-name" : "showReport"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the outreach was started in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startTime"
          },
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the outreach was last updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAt"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/Recipients"
          },
          "published_time" : {
            "title" : "Publish Time",
            "type" : "string",
            "description" : "The date and time the outreach was (or will be) published in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "publishedTime"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "Title or name of an Outreach"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of an Outreach"
          },
          "status" : {
            "title" : "Outreach Status",
            "type" : "string",
            "description" : "The status of this outreach",
            "enum" : [ "save", "paused", "schedule", "scheduled", "sending", "sent", "canceled", "canceling", "active", "disconnected", "somepaused", "draft", "completed", "partialRejected", "pending", "rejected", "published", "unpublished" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "CollectionOfNotes" : {
        "title" : "Collection of Notes",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "notes" : {
            "title" : "Notes",
            "type" : "array",
            "description" : "An array of objects, each representing a note resource",
            "items" : {
              "$ref" : "#/components/schemas/MemberNotes2"
            }
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "The last 10 notes for a specific list member, based on date created"
      },
      "Interest" : {
        "title" : "Interest",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Interest Name",
            "type" : "string",
            "description" : "The name of the interest. This can be shown publicly on a subscription form"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The display order for interests",
            "x-ballerina-name" : "displayOrder"
          }
        },
        "description" : "Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application"
      },
      "Unsubscribes2" : {
        "title" : "Unsubscribes",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "reason" : {
            "title" : "Unsubscribe Reason",
            "type" : "string",
            "description" : "If available, the reason listed by the member for unsubscribing",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time the member opted-out in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "A member who unsubscribed from a specific campaign"
      },
      "AbuseComplaint" : {
        "title" : "Abuse Complaint",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "date" : {
            "title" : "Date",
            "type" : "string",
            "description" : "Date for the abuse report",
            "readOnly" : true
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "id" : {
            "title" : "Abuse Report ID",
            "type" : "integer",
            "description" : "The id for the abuse report",
            "readOnly" : true
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id for the abuse report",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program"
      },
      "DailySendingDays" : {
        "title" : "Daily Sending Days",
        "type" : "object",
        "properties" : {
          "sunday" : {
            "title" : "Sunday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Sundays"
          },
          "saturday" : {
            "title" : "Saturday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Saturdays"
          },
          "tuesday" : {
            "title" : "tuesday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Tuesdays"
          },
          "wednesday" : {
            "title" : "Monday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Wednesdays"
          },
          "thursday" : {
            "title" : "Thursday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Thursdays"
          },
          "friday" : {
            "title" : "Friday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Fridays"
          },
          "monday" : {
            "title" : "Monday",
            "type" : "boolean",
            "description" : "Sends the daily RSS Campaign on Mondays"
          }
        },
        "description" : "The days of the week to send a daily RSS Campaign"
      },
      "AccountContact" : {
        "title" : "Account Contact",
        "type" : "object",
        "properties" : {
          "zip" : {
            "title" : "Zip Code",
            "type" : "string",
            "description" : "The zip code for the account contact",
            "readOnly" : true
          },
          "country" : {
            "title" : "Country",
            "type" : "string",
            "description" : "The country for the account contact",
            "readOnly" : true
          },
          "addr2" : {
            "title" : "Address Line 2",
            "type" : "string",
            "description" : "The street address for the account contact",
            "readOnly" : true
          },
          "addr1" : {
            "title" : "Address Line 1",
            "type" : "string",
            "description" : "The street address for the account contact",
            "readOnly" : true
          },
          "city" : {
            "title" : "City",
            "type" : "string",
            "description" : "The city for the account contact",
            "readOnly" : true
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company name for the account",
            "readOnly" : true
          },
          "state" : {
            "title" : "State",
            "type" : "string",
            "description" : "The state for the account contact",
            "readOnly" : true
          }
        },
        "description" : "Information about the account contact",
        "readOnly" : true
      },
      "ListLocations" : {
        "title" : "List Locations",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "locations" : {
            "title" : "Locations",
            "type" : "array",
            "description" : "An array of objects, each representing a list's top subscriber locations",
            "items" : {
              "$ref" : "#/components/schemas/ListLocation"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A summary of List's locations"
      },
      "OriginalCampaign" : {
        "title" : "Original Campaign",
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "ID for the resent campaign",
            "readOnly" : true
          },
          "web_id" : {
            "title" : "Campaign Web ID",
            "type" : "integer",
            "description" : "The ID for the resent campaign used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "shortcut_type" : {
            "title" : "Shortcut Type",
            "type" : "string",
            "description" : "Which campaign resend shortcut was used",
            "readOnly" : true,
            "enum" : [ "non_openers", "new_subscribers", "non_clickers", "non_purchasers" ],
            "x-ballerina-name" : "shortcutType"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of the original campaign",
            "readOnly" : true
          }
        },
        "description" : "The original campaign that was resent",
        "readOnly" : true
      },
      "ECommerceCustomer" : {
        "title" : "E-commerce Customer",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The customer's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address1"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The customer's last name",
            "x-ballerina-name" : "lastName"
          },
          "opt_in_status" : {
            "title" : "Opt-in Status",
            "type" : "boolean",
            "description" : "The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)",
            "x-ballerina-name" : "optInStatus"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The customer's company"
          },
          "id" : {
            "title" : "Customer Foreign ID",
            "maxLength" : 50,
            "type" : "string",
            "description" : "A unique identifier for the customer. Limited to 50 characters"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The customer's first name",
            "x-ballerina-name" : "firstName"
          }
        },
        "description" : "Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body"
      },
      "ECommerceOrder1" : {
        "title" : "E-commerce Order",
        "type" : "object",
        "properties" : {
          "discount_total" : {
            "title" : "Discount Total",
            "type" : "number",
            "description" : "The total amount of the discounts to be applied to the price of the order",
            "x-ballerina-name" : "discountTotal"
          },
          "fulfillment_status" : {
            "title" : "Fulfillment Status",
            "type" : "string",
            "description" : "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "fulfillmentStatus"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The tax total associated with an order",
            "x-ballerina-name" : "taxTotal"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "processed_at_foreign" : {
            "title" : "Foreign Processed Time",
            "type" : "string",
            "description" : "The date and time the order was processed in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "processedAtForeign"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress2"
            } ],
            "x-ballerina-name" : "billingAddress"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "x-ballerina-name" : "currencyCode"
          },
          "landing_site" : {
            "title" : "Landing Site",
            "type" : "string",
            "description" : "The URL for the page where the buyer landed when entering the shop",
            "example" : "http://www.example.com?source=abc",
            "x-ballerina-name" : "landingSite"
          },
          "order_url" : {
            "title" : "Order URL",
            "type" : "string",
            "description" : "The URL for the order",
            "x-ballerina-name" : "orderUrl"
          },
          "tracking_number" : {
            "title" : "Tracking number",
            "type" : "string",
            "description" : "The tracking number associated with the order",
            "x-ballerina-name" : "trackingNumber"
          },
          "id" : {
            "title" : "Order Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order",
            "readOnly" : true
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShippingAddress2"
            } ],
            "x-ballerina-name" : "shippingAddress"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the order was updated in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "lines" : {
            "title" : "Order Line Items",
            "type" : "array",
            "description" : "An array of the order's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem4"
            }
          },
          "promos" : {
            "title" : "Promos",
            "type" : "array",
            "description" : "The promo codes applied on the order",
            "items" : {
              "$ref" : "#/components/schemas/Orders1Promos"
            }
          },
          "tracking_url" : {
            "title" : "Tracking URL",
            "type" : "string",
            "description" : "The tracking URL associated with the order",
            "x-ballerina-name" : "trackingUrl"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with an order",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "cancelled_at_foreign" : {
            "title" : "Foreign Cancel Time",
            "type" : "string",
            "description" : "The date and time the order was cancelled in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "cancelledAtForeign"
          },
          "store_id" : {
            "title" : "Store Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "readOnly" : true,
            "x-ballerina-name" : "storeId"
          },
          "shipping_total" : {
            "title" : "Shipping Total",
            "type" : "number",
            "description" : "The shipping total for the order",
            "x-ballerina-name" : "shippingTotal"
          },
          "outreach" : {
            "$ref" : "#/components/schemas/Outreach1"
          },
          "tracking_code" : {
            "title" : "Tracking Code",
            "type" : "string",
            "description" : "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs",
            "enum" : [ "prec" ],
            "x-ballerina-name" : "trackingCode"
          },
          "tracking_carrier" : {
            "title" : "Tracking carrier",
            "type" : "string",
            "description" : "The tracking carrier associated with the order",
            "x-ballerina-name" : "trackingCarrier"
          },
          "financial_status" : {
            "title" : "Financial Status",
            "type" : "string",
            "description" : "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "financialStatus"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total associated with an order",
            "x-ballerina-name" : "orderTotal"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer6"
          }
        },
        "description" : "Information about a specific order"
      },
      "MembersToAddremoveTofromAStaticSegment" : {
        "title" : "Members to add/remove to/from a static segment",
        "type" : "object",
        "properties" : {
          "members_to_add" : {
            "title" : "Members to add to the static segment",
            "type" : "array",
            "description" : "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "membersToAdd"
          },
          "members_to_remove" : {
            "title" : "Members to remove from the static segment",
            "type" : "array",
            "description" : "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "membersToRemove"
          }
        },
        "description" : "Members to add/remove to/from a static segment"
      },
      "ECommerceOrder4" : {
        "title" : "E-commerce Order",
        "type" : "object",
        "properties" : {
          "discount_total" : {
            "title" : "Discount Total",
            "type" : "number",
            "description" : "The total amount of the discounts to be applied to the price of the order",
            "x-ballerina-name" : "discountTotal"
          },
          "fulfillment_status" : {
            "title" : "Fulfillment Status",
            "type" : "string",
            "description" : "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "fulfillmentStatus"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The tax total associated with an order",
            "x-ballerina-name" : "taxTotal"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "processed_at_foreign" : {
            "title" : "Foreign Processed Time",
            "type" : "string",
            "description" : "The date and time the order was processed in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "processedAtForeign"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress2"
            } ],
            "x-ballerina-name" : "billingAddress"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "x-ballerina-name" : "currencyCode"
          },
          "landing_site" : {
            "title" : "Landing Site",
            "type" : "string",
            "description" : "The URL for the page where the buyer landed when entering the shop",
            "example" : "http://www.example.com?source=abc",
            "x-ballerina-name" : "landingSite"
          },
          "order_url" : {
            "title" : "Order URL",
            "type" : "string",
            "description" : "The URL for the order",
            "x-ballerina-name" : "orderUrl"
          },
          "tracking_number" : {
            "title" : "Tracking number",
            "type" : "string",
            "description" : "The tracking number associated with the order",
            "x-ballerina-name" : "trackingNumber"
          },
          "id" : {
            "title" : "Order Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order",
            "readOnly" : true
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShippingAddress2"
            } ],
            "x-ballerina-name" : "shippingAddress"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the order was updated in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "lines" : {
            "title" : "Order Line Items",
            "type" : "array",
            "description" : "An array of the order's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem4"
            }
          },
          "promos" : {
            "title" : "Promos",
            "type" : "array",
            "description" : "The promo codes applied on the order",
            "items" : {
              "$ref" : "#/components/schemas/Orders1Promos"
            }
          },
          "tracking_url" : {
            "title" : "Tracking URL",
            "type" : "string",
            "description" : "The tracking URL associated with the order",
            "x-ballerina-name" : "trackingUrl"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with an order",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "cancelled_at_foreign" : {
            "title" : "Foreign Cancel Time",
            "type" : "string",
            "description" : "The date and time the order was cancelled in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "cancelledAtForeign"
          },
          "store_id" : {
            "title" : "Store Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "readOnly" : true,
            "x-ballerina-name" : "storeId"
          },
          "shipping_total" : {
            "title" : "Shipping Total",
            "type" : "number",
            "description" : "The shipping total for the order",
            "x-ballerina-name" : "shippingTotal"
          },
          "outreach" : {
            "$ref" : "#/components/schemas/Outreach1"
          },
          "tracking_code" : {
            "title" : "Tracking Code",
            "type" : "string",
            "description" : "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs",
            "enum" : [ "prec" ],
            "x-ballerina-name" : "trackingCode"
          },
          "tracking_carrier" : {
            "title" : "Tracking carrier",
            "type" : "string",
            "description" : "The tracking carrier associated with the order",
            "x-ballerina-name" : "trackingCarrier"
          },
          "financial_status" : {
            "title" : "Financial Status",
            "type" : "string",
            "description" : "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "financialStatus"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total associated with an order",
            "x-ballerina-name" : "orderTotal"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer6"
          }
        },
        "description" : "Information about a specific order"
      },
      "ECommerceOrder3" : {
        "title" : "E-commerce Order",
        "type" : "object",
        "properties" : {
          "discount_total" : {
            "title" : "Discount Total",
            "type" : "number",
            "description" : "The total amount of the discounts to be applied to the price of the order",
            "x-ballerina-name" : "discountTotal"
          },
          "fulfillment_status" : {
            "title" : "Fulfillment Status",
            "type" : "string",
            "description" : "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "fulfillmentStatus"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The tax total associated with an order",
            "x-ballerina-name" : "taxTotal"
          },
          "shipping_total" : {
            "title" : "Shipping Total",
            "type" : "number",
            "description" : "The shipping total for the order",
            "x-ballerina-name" : "shippingTotal"
          },
          "outreach" : {
            "$ref" : "#/components/schemas/Outreach"
          },
          "processed_at_foreign" : {
            "title" : "Foreign Processed Time",
            "type" : "string",
            "description" : "The date and time the order was processed in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "processedAtForeign"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress2"
            } ],
            "x-ballerina-name" : "billingAddress"
          },
          "tracking_code" : {
            "title" : "Tracking Code",
            "type" : "string",
            "description" : "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs",
            "enum" : [ "prec" ],
            "x-ballerina-name" : "trackingCode"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "x-ballerina-name" : "currencyCode"
          },
          "landing_site" : {
            "title" : "Landing Site",
            "type" : "string",
            "description" : "The URL for the page where the buyer landed when entering the shop",
            "example" : "http://www.example.com?source=abc",
            "x-ballerina-name" : "landingSite"
          },
          "order_url" : {
            "title" : "Order URL",
            "type" : "string",
            "description" : "The URL for the order",
            "x-ballerina-name" : "orderUrl"
          },
          "tracking_carrier" : {
            "title" : "Tracking carrier",
            "type" : "string",
            "description" : "The tracking carrier associated with the order",
            "x-ballerina-name" : "trackingCarrier"
          },
          "financial_status" : {
            "title" : "Financial Status",
            "type" : "string",
            "description" : "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "financialStatus"
          },
          "tracking_number" : {
            "title" : "Tracking number",
            "type" : "string",
            "description" : "The tracking number associated with the order",
            "x-ballerina-name" : "trackingNumber"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The order total associated with an order",
            "x-ballerina-name" : "orderTotal"
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShippingAddress2"
            } ],
            "x-ballerina-name" : "shippingAddress"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the order was updated in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "lines" : {
            "title" : "Order Line Items",
            "type" : "array",
            "description" : "An array of the order's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem2"
            }
          },
          "promos" : {
            "title" : "Promos",
            "type" : "array",
            "description" : "The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided",
            "items" : {
              "$ref" : "#/components/schemas/EcommercestoresstoreIdordersPromos"
            }
          },
          "tracking_url" : {
            "title" : "Tracking URL",
            "type" : "string",
            "description" : "The tracking URL associated with the order",
            "x-ballerina-name" : "trackingUrl"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign associated with an order",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer1"
          },
          "cancelled_at_foreign" : {
            "title" : "Foreign Cancel Time",
            "type" : "string",
            "description" : "The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "cancelledAtForeign"
          }
        },
        "description" : "Information about a specific order"
      },
      "OrderLines" : {
        "title" : "Order Lines",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "lines" : {
            "title" : "Ecommerce Order Lines",
            "type" : "array",
            "description" : "An array of objects, each representing an order's line item",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem4"
            }
          },
          "order_id" : {
            "title" : "Order ID",
            "type" : "string",
            "description" : "The order id",
            "x-ballerina-name" : "orderId"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of an order's line items"
      },
      "ECommerceOrder2" : {
        "title" : "E-commerce Order",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "discount_total" : {
            "title" : "Discount Total",
            "type" : "number",
            "description" : "The total amount of the discounts to be applied to the price of the order",
            "x-ballerina-name" : "discountTotal"
          },
          "fulfillment_status" : {
            "title" : "Fulfillment Status",
            "type" : "string",
            "description" : "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "fulfillmentStatus"
          },
          "tax_total" : {
            "title" : "Tax Total",
            "type" : "number",
            "description" : "The tax total for the order",
            "x-ballerina-name" : "taxTotal"
          },
          "shipping_total" : {
            "title" : "Shipping Total",
            "type" : "number",
            "description" : "The shipping total for the order",
            "x-ballerina-name" : "shippingTotal"
          },
          "outreach" : {
            "$ref" : "#/components/schemas/Outreach"
          },
          "processed_at_foreign" : {
            "title" : "Foreign Processed Time",
            "type" : "string",
            "description" : "The date and time the order was processed in ISO 8601 format",
            "format" : "date-time",
            "example" : "2024-09-10T17:27:43Z",
            "x-ballerina-name" : "processedAtForeign"
          },
          "billing_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BillingAddress1"
            } ],
            "x-ballerina-name" : "billingAddress"
          },
          "tracking_code" : {
            "title" : "Tracking Code",
            "type" : "string",
            "description" : "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs",
            "enum" : [ "prec" ],
            "x-ballerina-name" : "trackingCode"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "x-ballerina-name" : "currencyCode"
          },
          "landing_site" : {
            "title" : "Landing Site",
            "type" : "string",
            "description" : "The URL for the page where the buyer landed when entering the shop",
            "example" : "http://www.example.com?source=abc",
            "x-ballerina-name" : "landingSite"
          },
          "order_url" : {
            "title" : "Order URL",
            "type" : "string",
            "description" : "The URL for the order",
            "x-ballerina-name" : "orderUrl"
          },
          "tracking_carrier" : {
            "title" : "Tracking carrier",
            "type" : "string",
            "description" : "The tracking carrier associated with the order",
            "x-ballerina-name" : "trackingCarrier"
          },
          "financial_status" : {
            "title" : "Financial Status",
            "type" : "string",
            "description" : "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)",
            "x-ballerina-name" : "financialStatus"
          },
          "tracking_number" : {
            "title" : "Tracking number",
            "type" : "string",
            "description" : "The tracking number associated with the order",
            "x-ballerina-name" : "trackingNumber"
          },
          "order_total" : {
            "title" : "Order Total",
            "type" : "number",
            "description" : "The total for the order",
            "x-ballerina-name" : "orderTotal"
          },
          "id" : {
            "title" : "Order Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order"
          },
          "shipping_address" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShippingAddress1"
            } ],
            "x-ballerina-name" : "shippingAddress"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the order was updated in ISO 8601 format",
            "format" : "date-time",
            "example" : "2024-09-10T17:27:43Z",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "lines" : {
            "title" : "Order Line Items",
            "type" : "array",
            "description" : "An array of the order's line items",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceOrderLineItem1"
            }
          },
          "promos" : {
            "title" : "Promos",
            "type" : "array",
            "description" : "The promo codes applied on the order",
            "items" : {
              "$ref" : "#/components/schemas/EcommercestoresstoreIdordersPromos"
            }
          },
          "tracking_url" : {
            "title" : "Tracking URL",
            "type" : "string",
            "description" : "The tracking URL associated with the order",
            "x-ballerina-name" : "trackingUrl"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies the campaign for an order",
            "example" : "839488a60b",
            "x-ballerina-name" : "campaignId"
          },
          "customer" : {
            "$ref" : "#/components/schemas/ECommerceCustomer5"
          },
          "cancelled_at_foreign" : {
            "title" : "Foreign Cancel Time",
            "type" : "string",
            "description" : "The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created",
            "format" : "date-time",
            "example" : "2024-09-10T17:27:43Z",
            "x-ballerina-name" : "cancelledAtForeign"
          }
        },
        "description" : "Information about a specific order"
      },
      "CampaignContentVariateContents" : {
        "type" : "object",
        "properties" : {
          "content_label" : {
            "title" : "Content Label",
            "type" : "string",
            "description" : "Label used to identify the content option",
            "example" : "Green header",
            "x-ballerina-name" : "contentLabel"
          },
          "plain_text" : {
            "title" : "Plain Text",
            "type" : "string",
            "description" : "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically",
            "x-ballerina-name" : "plainText"
          },
          "html" : {
            "title" : "Campaign HTML",
            "type" : "string",
            "description" : "The raw HTML for the campaign",
            "example" : "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml><head><meta http-equiv=Content-Type content=\"text/html; charset=UTF-8\"><title>*|MC:SUBJECT|*</title><style type=text/css>body{background-color:#d0e4fe}</style><body leftmargin=0 marginwidth=0 topmargin=0 marginheight=0 offset=0>"
          }
        }
      },
      "Script1" : {
        "title" : "Script",
        "type" : "object",
        "properties" : {
          "fragment" : {
            "title" : "Script Fragment",
            "type" : "string",
            "description" : "A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp",
            "readOnly" : true,
            "example" : "<script id=\"mcjs\">!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/{user-hash}/{site-hash}.js\");</script>"
          },
          "url" : {
            "title" : "Script URL",
            "type" : "string",
            "description" : "The URL used for any integrations that offer built-in support for connected sites",
            "readOnly" : true,
            "example" : "https://chimpstatic.com/mcjs-connected/js/users/{user-hash}/{site-hash}.js"
          }
        },
        "description" : "The script used to connect your site with Mailchimp",
        "readOnly" : true
      },
      "CampaignReport1" : {
        "title" : "Campaign Report",
        "type" : "object",
        "properties" : {
          "forwards" : {
            "$ref" : "#/components/schemas/Forwards"
          },
          "share_report" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ShareReport"
            } ],
            "x-ballerina-name" : "shareReport"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "rss_last_send" : {
            "title" : "RSS Last Send",
            "type" : "string",
            "description" : "For RSS campaigns, the date and time of the last send in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "rssLastSend"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto)"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "industry_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/IndustryStats"
            } ],
            "x-ballerina-name" : "industryStats"
          },
          "list_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ListStats"
            } ],
            "x-ballerina-name" : "listStats"
          },
          "campaign_title" : {
            "title" : "Campaign Title",
            "type" : "string",
            "description" : "The title of the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignTitle"
          },
          "facebook_likes" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/FacebookLikes"
            } ],
            "x-ballerina-name" : "facebookLikes"
          },
          "timeseries" : {
            "title" : "Timeseries",
            "type" : "array",
            "description" : "An hourly breakdown of the performance of the campaign over the first 24 hours",
            "items" : {
              "$ref" : "#/components/schemas/CampaignSubReportsTimeseries"
            }
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent for this campaign",
            "x-ballerina-name" : "emailsSent"
          },
          "ecommerce" : {
            "$ref" : "#/components/schemas/ECommerceReport"
          },
          "id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this campaign"
          },
          "bounces" : {
            "$ref" : "#/components/schemas/Bounces"
          },
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "subjectLine"
          },
          "ab_split" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABSplitStats"
            } ],
            "x-ballerina-name" : "abSplit"
          },
          "timewarp" : {
            "title" : "Timewarp Stats",
            "type" : "array",
            "description" : "An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp",
            "items" : {
              "$ref" : "#/components/schemas/CampaignSubReportsTimewarp"
            }
          },
          "unsubscribed" : {
            "title" : "Unsubscribe Count",
            "type" : "integer",
            "description" : "The total number of unsubscribed members for this campaign",
            "readOnly" : true
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a campaign was sent in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "opens" : {
            "$ref" : "#/components/schemas/Opens"
          },
          "clicks" : {
            "$ref" : "#/components/schemas/Clicks"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "integer",
            "description" : "The number of abuse reports generated for this campaign",
            "x-ballerina-name" : "abuseReports"
          },
          "delivery_status" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDeliveryStatus"
            } ],
            "x-ballerina-name" : "deliveryStatus"
          }
        },
        "description" : "Report details about a sent campaign"
      },
      "AutomationEmails" : {
        "title" : "Automation Emails",
        "type" : "object",
        "properties" : {
          "emails" : {
            "title" : "Emails",
            "type" : "array",
            "description" : "An array of objects, each representing an email in an Automation workflow",
            "items" : {
              "$ref" : "#/components/schemas/AutomationWorkflowEmail1"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A summary of the emails in an Automation workflow"
      },
      "Campaign" : {
        "title" : "Campaign",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "settings" : {
            "$ref" : "#/components/schemas/CampaignSettings1"
          },
          "variate_settings" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ABTestOptions"
            } ],
            "x-ballerina-name" : "variateSettings"
          },
          "rss_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/RSSOptions"
            } ],
            "x-ballerina-name" : "rssOpts"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template",
            "example" : "template",
            "enum" : [ "template", "multichannel" ],
            "x-ballerina-name" : "contentType"
          },
          "social_card" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignSocialCard"
            } ],
            "x-ballerina-name" : "socialCard"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/List1"
          },
          "type" : {
            "title" : "Campaign Type",
            "type" : "string",
            "description" : "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead",
            "enum" : [ "regular", "plaintext", "absplit", "rss", "variate" ]
          },
          "tracking" : {
            "$ref" : "#/components/schemas/CampaignTrackingOptions"
          }
        },
        "description" : "A summary of an individual campaign's settings and content"
      },
      "ListMembers5" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampOpt"
          },
          "last_note" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Notes"
            } ],
            "x-ballerina-name" : "lastNote"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Member Merge Var",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "An individual merge var and value for a member",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampSignup"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "readOnly" : true,
            "x-ballerina-name" : "ipSignup"
          },
          "member_rating" : {
            "title" : "Member Rating",
            "type" : "integer",
            "description" : "Star rating for this member, between 1 and 5",
            "readOnly" : true,
            "x-ballerina-name" : "memberRating"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "A unique ID for the contact record",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "The tags applied to this member",
            "items" : {
              "$ref" : "#/components/schemas/ExactMatchesTags"
            }
          },
          "unique_email_id" : {
            "title" : "Unique Email ID",
            "type" : "string",
            "description" : "An identifier for the address across all of Mailchimp",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueEmailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "email_client" : {
            "title" : "Email Client",
            "type" : "string",
            "description" : "The list member's email client",
            "readOnly" : true,
            "x-ballerina-name" : "emailClient"
          },
          "stats" : {
            "$ref" : "#/components/schemas/SubscriberStats"
          },
          "tags_count" : {
            "title" : "Tags Count",
            "type" : "integer",
            "description" : "The number of tags applied to this member",
            "readOnly" : true,
            "x-ballerina-name" : "tagsCount"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "readOnly" : true,
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location1"
          },
          "id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          },
          "last_changed" : {
            "title" : "Last Changed Date",
            "type" : "string",
            "description" : "The date and time the member's info was last changed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastChanged"
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ListMembers4" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "array",
            "description" : "The marketing permissions for the subscriber",
            "items" : {
              "$ref" : "#/components/schemas/MarketingPermission1"
            },
            "x-ballerina-name" : "marketingPermissions"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "last_note" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Notes"
            } ],
            "x-ballerina-name" : "lastNote"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "readOnly" : true,
            "x-ballerina-name" : "ipSignup"
          },
          "member_rating" : {
            "title" : "Member Rating",
            "type" : "integer",
            "description" : "Star rating for this member, between 1 and 5",
            "readOnly" : true,
            "x-ballerina-name" : "memberRating"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "source" : {
            "title" : "Subscriber Source",
            "type" : "string",
            "description" : "The source from which the subscriber was added to this list",
            "readOnly" : true
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "unsubscribe_reason" : {
            "title" : "Unsubscribe Reason",
            "type" : "string",
            "description" : "A subscriber's reason for unsubscribing",
            "x-ballerina-name" : "unsubscribeReason"
          },
          "email_client" : {
            "title" : "Email Client",
            "type" : "string",
            "description" : "The list member's email client",
            "readOnly" : true,
            "x-ballerina-name" : "emailClient"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "stats" : {
            "$ref" : "#/components/schemas/SubscriberStats1"
          },
          "tags_count" : {
            "title" : "Tags Count",
            "type" : "integer",
            "description" : "The number of tags applied to this member",
            "readOnly" : true,
            "x-ballerina-name" : "tagsCount"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "readOnly" : true,
            "x-ballerina-name" : "ipOpt"
          },
          "id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampOpt"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampSignup"
          },
          "web_id" : {
            "title" : "Member Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "sms_subscription_last_updated" : {
            "title" : "SMS Subscription Last Update",
            "type" : "string",
            "description" : "The datetime when the SMS subscription was last updated",
            "x-ballerina-name" : "smsSubscriptionLastUpdated"
          },
          "sms_subscription_status" : {
            "title" : "SMS Subscription Status",
            "type" : "string",
            "description" : "The status of an SMS subscription",
            "enum" : [ "subscribed", "unsubscribed", "nonsubscribed", "pending" ],
            "x-ballerina-name" : "smsSubscriptionStatus"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/)",
            "items" : {
              "$ref" : "#/components/schemas/ExactMatchesTags"
            }
          },
          "unique_email_id" : {
            "title" : "Unique Email ID",
            "type" : "string",
            "description" : "An identifier for the address across all of Mailchimp",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueEmailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "full_name" : {
            "title" : "Full Name",
            "type" : "string",
            "description" : "The contact's full name",
            "readOnly" : true,
            "x-ballerina-name" : "fullName"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location3"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional", "archived" ]
          },
          "consents_to_one_to_one_messaging" : {
            "title" : "Messaging Consent",
            "type" : "boolean",
            "description" : "Indicates whether a contact consents to 1:1 messaging",
            "readOnly" : true,
            "x-ballerina-name" : "consentsToOneToOneMessaging"
          },
          "last_changed" : {
            "title" : "Last Changed Date",
            "type" : "string",
            "description" : "The date and time the member's info was last changed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastChanged"
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ListMembers3" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampOpt"
          },
          "last_note" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Notes"
            } ],
            "x-ballerina-name" : "lastNote"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampSignup"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "readOnly" : true,
            "x-ballerina-name" : "ipSignup"
          },
          "member_rating" : {
            "title" : "Member Rating",
            "type" : "integer",
            "description" : "Star rating for this member, between 1 and 5",
            "readOnly" : true,
            "x-ballerina-name" : "memberRating"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "unique_email_id" : {
            "title" : "Unique Email ID",
            "type" : "string",
            "description" : "An identifier for the address across all of Mailchimp",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueEmailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "full_name" : {
            "title" : "Full Name",
            "type" : "string",
            "description" : "The contact's full name",
            "readOnly" : true,
            "x-ballerina-name" : "fullName"
          },
          "email_client" : {
            "title" : "Email Client",
            "type" : "string",
            "description" : "The list member's email client",
            "readOnly" : true,
            "x-ballerina-name" : "emailClient"
          },
          "stats" : {
            "$ref" : "#/components/schemas/SubscriberStats"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "readOnly" : true,
            "x-ballerina-name" : "ipOpt"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location1"
          },
          "id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          },
          "last_changed" : {
            "title" : "Last Changed Date",
            "type" : "string",
            "description" : "The date and time the member's info was last changed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastChanged"
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ListMembers2" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "array",
            "description" : "The marketing permissions for the subscriber",
            "items" : {
              "$ref" : "#/components/schemas/MarketingPermission1"
            },
            "x-ballerina-name" : "marketingPermissions"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "last_note" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/Notes"
            } ],
            "x-ballerina-name" : "lastNote"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "readOnly" : true,
            "x-ballerina-name" : "ipSignup"
          },
          "member_rating" : {
            "title" : "Member Rating",
            "type" : "integer",
            "description" : "Star rating for this member, between 1 and 5",
            "readOnly" : true,
            "x-ballerina-name" : "memberRating"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "source" : {
            "title" : "Subscriber Source",
            "type" : "string",
            "description" : "The source from which the subscriber was added to this list",
            "readOnly" : true
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "unsubscribe_reason" : {
            "title" : "Unsubscribe Reason",
            "type" : "string",
            "description" : "A subscriber's reason for unsubscribing",
            "x-ballerina-name" : "unsubscribeReason"
          },
          "email_client" : {
            "title" : "Email Client",
            "type" : "string",
            "description" : "The list member's email client",
            "readOnly" : true,
            "x-ballerina-name" : "emailClient"
          },
          "sms_phone_number" : {
            "title" : "SMS Phone Number",
            "type" : "string",
            "description" : "A US phone number for SMS contact",
            "x-ballerina-name" : "smsPhoneNumber"
          },
          "stats" : {
            "$ref" : "#/components/schemas/SubscriberStats1"
          },
          "tags_count" : {
            "title" : "Tags Count",
            "type" : "integer",
            "description" : "The number of tags applied to this member",
            "readOnly" : true,
            "x-ballerina-name" : "tagsCount"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "readOnly" : true,
            "x-ballerina-name" : "ipOpt"
          },
          "id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampOpt"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "timestampSignup"
          },
          "web_id" : {
            "title" : "Member Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "sms_subscription_last_updated" : {
            "title" : "SMS Subscription Last Update",
            "type" : "string",
            "description" : "The datetime when the SMS subscription was last updated",
            "x-ballerina-name" : "smsSubscriptionLastUpdated"
          },
          "sms_subscription_status" : {
            "title" : "SMS Subscription Status",
            "type" : "string",
            "description" : "The status of an SMS subscription",
            "enum" : [ "subscribed", "unsubscribed", "nonsubscribed", "pending" ],
            "x-ballerina-name" : "smsSubscriptionStatus"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/)",
            "items" : {
              "$ref" : "#/components/schemas/ExactMatchesTags"
            }
          },
          "unique_email_id" : {
            "title" : "Unique Email ID",
            "type" : "string",
            "description" : "An identifier for the address across all of Mailchimp",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueEmailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "full_name" : {
            "title" : "Full Name",
            "type" : "string",
            "description" : "The contact's full name",
            "readOnly" : true,
            "x-ballerina-name" : "fullName"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location3"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional", "archived" ]
          },
          "consents_to_one_to_one_messaging" : {
            "title" : "Messaging Consent",
            "type" : "boolean",
            "description" : "Indicates whether a contact consents to 1:1 messaging",
            "readOnly" : true,
            "x-ballerina-name" : "consentsToOneToOneMessaging"
          },
          "last_changed" : {
            "title" : "Last Changed Date",
            "type" : "string",
            "description" : "The date and time the member's info was last changed in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastChanged"
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "ListMembers1" : {
        "title" : "List Members",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "members" : {
            "title" : "Members",
            "type" : "array",
            "description" : "An array of objects, each representing a specific list member",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers4"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Manage members of a specific Mailchimp list, including currently subscribed, unsubscribed, and bounced members"
      },
      "EcommerceProductVariants" : {
        "title" : "Ecommerce Product Variants",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "product_id" : {
            "title" : "Product ID",
            "type" : "string",
            "description" : "The product id",
            "x-ballerina-name" : "productId"
          },
          "variants" : {
            "title" : "Ecommerce Product Variants",
            "type" : "array",
            "description" : "An array of objects, each representing a product's variants",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant3"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of a product's variants"
      },
      "FacebookAdsAllOf11" : {
        "type" : "object",
        "properties" : {
          "has_segment" : {
            "title" : "Has Segment",
            "type" : "boolean",
            "description" : "If this outreach targets a segment of your audience",
            "x-ballerina-name" : "hasSegment"
          },
          "thumbnail" : {
            "title" : "Thumbnail",
            "type" : "string",
            "description" : "The URL of the thumbnail for this outreach"
          },
          "create_time" : {
            "title" : "Create Time",
            "type" : "string",
            "description" : "The date and time the outreach was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createTime"
          },
          "canceled_at" : {
            "title" : "Canceled At",
            "type" : "string",
            "description" : "The date and time the outreach was canceled in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "canceledAt"
          },
          "web_id" : {
            "title" : "Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "x-ballerina-name" : "webId"
          },
          "type" : {
            "title" : "Outreach Type",
            "type" : "string",
            "description" : "The type of outreach this object is",
            "enum" : [ "regular", "email-touchpoint", "plaintext", "rss", "reconfirm", "variate", "absplit", "automation", "facebook", "google", "autoresponder", "transactional", "page", "website", "social_post", "survey", "customer_journey", "sms" ]
          },
          "show_report" : {
            "title" : "Show Report",
            "type" : "boolean",
            "description" : "Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context",
            "x-ballerina-name" : "showReport"
          },
          "start_time" : {
            "title" : "Start Time",
            "type" : "string",
            "description" : "The date and time the outreach was started in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "startTime"
          },
          "updated_at" : {
            "title" : "Updated At",
            "type" : "string",
            "description" : "The date and time the outreach was last updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAt"
          },
          "recipients" : {
            "$ref" : "#/components/schemas/Recipients"
          },
          "published_time" : {
            "title" : "Publish Time",
            "type" : "string",
            "description" : "The date and time the outreach was (or will be) published in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "publishedTime"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "Title or name of an Outreach"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID of an Outreach"
          },
          "status" : {
            "title" : "Outreach Status",
            "type" : "string",
            "description" : "The status of this outreach",
            "enum" : [ "save", "paused", "schedule", "scheduled", "sending", "sent", "canceled", "canceling", "active", "disconnected", "somepaused", "draft", "completed", "partialRejected", "pending", "rejected", "published", "unpublished" ]
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "CampaignSubReportsTimeseries" : {
        "type" : "object",
        "properties" : {
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The number of emails sent in the timeseries",
            "x-ballerina-name" : "emailsSent"
          },
          "recipients_clicks" : {
            "title" : "Recipient Clicks",
            "type" : "integer",
            "description" : "The number of clicks in the timeseries",
            "x-ballerina-name" : "recipientsClicks"
          },
          "proxy_excluded_unique_opens" : {
            "title" : "Proxy Excluded Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens in the timeseries, excluding opens from email clients that use proxies",
            "x-ballerina-name" : "proxyExcludedUniqueOpens"
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens in the timeseries",
            "x-ballerina-name" : "uniqueOpens"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time for the series in ISO 8601 format",
            "format" : "date-time"
          }
        }
      },
      "Hours" : {
        "title" : "Hours",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "title" : "Email Send Time Settings",
            "type" : "string",
            "description" : "When to send the Automation email",
            "enum" : [ "send_asap", "send_between", "send_at" ]
          }
        },
        "description" : "The hours an Automation workflow can send"
      },
      "Forwards" : {
        "title" : "Forwards",
        "type" : "object",
        "properties" : {
          "forwards_count" : {
            "title" : "Total Forwards",
            "type" : "integer",
            "description" : "How many times the campaign has been forwarded",
            "x-ballerina-name" : "forwardsCount"
          },
          "forwards_opens" : {
            "title" : "Forward Opens",
            "type" : "integer",
            "description" : "How many times the forwarded campaign has been opened",
            "x-ballerina-name" : "forwardsOpens"
          }
        },
        "description" : "An object describing the forwards and forward activity for the campaign"
      },
      "EmailDomain" : {
        "title" : "Email Domain",
        "type" : "object",
        "properties" : {
          "opens_pct" : {
            "title" : "Opens Percent",
            "type" : "number",
            "description" : "The percentage of total opens from this domain",
            "readOnly" : true,
            "x-ballerina-name" : "opensPct"
          },
          "emails_pct" : {
            "title" : "Email Percent",
            "type" : "number",
            "description" : "The percentage of total emails that went to this domain",
            "readOnly" : true,
            "x-ballerina-name" : "emailsPct"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The name of the domain (gmail.com, hotmail.com, yahoo.com)",
            "readOnly" : true
          },
          "emails_sent" : {
            "title" : "Total Sent",
            "type" : "integer",
            "description" : "The number of emails sent to that specific domain",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "unsubs" : {
            "title" : "Unsubscribes",
            "type" : "integer",
            "description" : "The total number of unsubscribes for a domain",
            "readOnly" : true
          },
          "opens" : {
            "title" : "Opens",
            "type" : "integer",
            "description" : "The number of opens for a domain",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "integer",
            "description" : "The number of clicks for a domain",
            "readOnly" : true
          },
          "delivered" : {
            "title" : "Successful Deliveries",
            "type" : "integer",
            "description" : "The number of successful deliveries for a domain",
            "readOnly" : true
          },
          "unsubs_pct" : {
            "title" : "Unsubscribes Percent",
            "type" : "number",
            "description" : "The percentage of total unsubscribes from this domain",
            "readOnly" : true,
            "x-ballerina-name" : "unsubsPct"
          },
          "bounces" : {
            "title" : "Bounces",
            "type" : "integer",
            "description" : "The number of bounces at a domain",
            "readOnly" : true
          },
          "clicks_pct" : {
            "title" : "Clicks Percent",
            "type" : "number",
            "description" : "The percentage of total clicks from this domain",
            "readOnly" : true,
            "x-ballerina-name" : "clicksPct"
          },
          "bounces_pct" : {
            "title" : "Bounces Percent",
            "type" : "number",
            "description" : "The percentage of total bounces from this domain",
            "readOnly" : true,
            "x-ballerina-name" : "bouncesPct"
          }
        },
        "description" : "A single email domain's performance"
      },
      "BatchUpdateListMembersErrors" : {
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Member Email address",
            "type" : "string",
            "description" : "The email address that could not be added or updated",
            "x-ballerina-name" : "emailAddress"
          },
          "field" : {
            "title" : "Field",
            "type" : "string",
            "description" : "If the error is field-related, information about which field is at issue"
          },
          "error_code" : {
            "title" : "Error code",
            "type" : "string",
            "description" : "A unique code that identifies this specifc error",
            "enum" : [ "ERROR_CONTACT_EXISTS", "ERROR_GENERIC" ],
            "x-ballerina-name" : "errorCode"
          },
          "error" : {
            "title" : "Error message",
            "type" : "string",
            "description" : "The error message indicating why the email address could not be added or updated"
          },
          "field_message" : {
            "title" : "Field message",
            "type" : "string",
            "description" : "Message indicating how to resolve a field-related error",
            "x-ballerina-name" : "fieldMessage"
          }
        }
      },
      "AbuseComplaints1" : {
        "title" : "Abuse Complaints",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "abuse_reports" : {
            "title" : "Abuse Reports",
            "type" : "array",
            "description" : "An array of objects, each representing an abuse report resource",
            "items" : {
              "$ref" : "#/components/schemas/AbuseComplaint3"
            },
            "x-ballerina-name" : "abuseReports"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of abuse complaints for a specific list"
      },
      "CampaignContent" : {
        "title" : "Campaign Content",
        "type" : "object",
        "properties" : {
          "archive_html" : {
            "title" : "Campaign Archive HTML",
            "type" : "string",
            "description" : "The Archive HTML for the campaign",
            "example" : "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml><head><meta http-equiv=Content-Type content=\"text/html; charset=UTF-8\"><title>My Subject</title><style type=text/css>body{background-color:#d0e4fe}</style><body leftmargin=0 marginwidth=0 topmargin=0 marginheight=0 offset=0>",
            "x-ballerina-name" : "archiveHtml"
          },
          "plain_text" : {
            "title" : "Plain Text",
            "type" : "string",
            "description" : "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically",
            "x-ballerina-name" : "plainText"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "variate_contents" : {
            "title" : "Variate Contents",
            "type" : "array",
            "description" : "Content options for multivariate campaigns",
            "items" : {
              "$ref" : "#/components/schemas/CampaignContentVariateContents"
            },
            "x-ballerina-name" : "variateContents"
          },
          "html" : {
            "title" : "Campaign HTML",
            "type" : "string",
            "description" : "The raw HTML for the campaign"
          }
        },
        "description" : "The HTML and plain-text content for a campaign"
      },
      "IndustryStats1" : {
        "title" : "Industry Stats",
        "type" : "object",
        "properties" : {
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The average unique click rate for all campaigns in the account's specified industry",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "bounce_rate" : {
            "title" : "Bounce Rate",
            "type" : "number",
            "description" : "The average bounce rate for all campaigns in the account's specified industry",
            "readOnly" : true,
            "x-ballerina-name" : "bounceRate"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The average unique open rate for all campaigns in the account's specified industry",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "The [average campaign statistics](https://mailchimp.com/resources/research/email-marketing-benchmarks/?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs) for all campaigns in the account's specified industry",
        "readOnly" : true
      },
      "TrackingSettings" : {
        "title" : "Tracking Settings",
        "type" : "object",
        "properties" : {
          "track_with_mailchimp" : {
            "title" : "Track with Mailchimp",
            "type" : "boolean",
            "description" : "Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/)",
            "x-ballerina-name" : "trackWithMailchimp"
          },
          "enable_restricted_data_processing" : {
            "title" : "Enable restricted data processing",
            "type" : "boolean",
            "description" : "Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/)",
            "x-ballerina-name" : "enableRestrictedDataProcessing"
          }
        },
        "description" : "The tracking settings applied to this landing page"
      },
      "ClickDetailMember1" : {
        "title" : "Click Detail Member",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of times the subscriber clicked on the link",
            "readOnly" : true
          },
          "contact_status" : {
            "title" : "Member Status",
            "type" : "string",
            "description" : "The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation",
            "readOnly" : true,
            "x-ballerina-name" : "contactStatus"
          },
          "url_id" : {
            "title" : "URL ID",
            "type" : "string",
            "description" : "The id for the tracked URL in the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "urlId"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A subscriber who clicked a specific URL in a specific campaign"
      },
      "CapsuleCRMTracking2" : {
        "title" : "Capsule CRM Tracking",
        "type" : "object",
        "properties" : {
          "notes" : {
            "title" : "Capsule Note",
            "type" : "boolean",
            "description" : "Update contact notes for a campaign based on a subscriber's email addresses"
          }
        },
        "description" : "Deprecated"
      },
      "APIRoot" : {
        "title" : "API Root",
        "type" : "object",
        "properties" : {
          "member_since" : {
            "title" : "Account Creation Date",
            "type" : "string",
            "description" : "The date and time that the account was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2010-01-01T23:59:59Z",
            "x-ballerina-name" : "memberSince"
          },
          "login_id" : {
            "title" : "Login ID",
            "type" : "string",
            "description" : "The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account",
            "readOnly" : true,
            "x-ballerina-name" : "loginId"
          },
          "pro_enabled" : {
            "title" : "Mailchimp Pro",
            "type" : "boolean",
            "description" : "Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/)",
            "readOnly" : true,
            "x-ballerina-name" : "proEnabled"
          },
          "role" : {
            "title" : "Role",
            "type" : "string",
            "description" : "The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account",
            "readOnly" : true
          },
          "first_payment" : {
            "title" : "First Payment",
            "type" : "string",
            "description" : "Date of first payment for monthly plans",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2010-01-01T23:59:59Z",
            "x-ballerina-name" : "firstPayment"
          },
          "pricing_plan_type" : {
            "title" : "Account Pricing Plan",
            "type" : "string",
            "description" : "The type of pricing plan the account is on",
            "readOnly" : true,
            "enum" : [ "monthly", "pay_as_you_go", "forever_free" ],
            "x-ballerina-name" : "pricingPlanType"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "last_login" : {
            "title" : "Last Login Date",
            "type" : "string",
            "description" : "The date and time of the last login for this account in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastLogin"
          },
          "last_name" : {
            "title" : "Last Name",
            "type" : "string",
            "description" : "The last name tied to the account",
            "readOnly" : true,
            "x-ballerina-name" : "lastName"
          },
          "industry_stats" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/IndustryStats1"
            } ],
            "x-ballerina-name" : "industryStats"
          },
          "account_id" : {
            "title" : "Account ID",
            "type" : "string",
            "description" : "The Mailchimp account ID",
            "readOnly" : true,
            "x-ballerina-name" : "accountId"
          },
          "avatar_url" : {
            "title" : "Avatar URL",
            "type" : "string",
            "description" : "URL of the avatar for the user",
            "readOnly" : true,
            "x-ballerina-name" : "avatarUrl"
          },
          "account_name" : {
            "title" : "Account Name",
            "type" : "string",
            "description" : "The name of the account",
            "readOnly" : true,
            "x-ballerina-name" : "accountName"
          },
          "contact" : {
            "$ref" : "#/components/schemas/AccountContact"
          },
          "account_industry" : {
            "title" : "Account Industry",
            "type" : "string",
            "description" : "The user-specified industry associated with the account",
            "readOnly" : true,
            "x-ballerina-name" : "accountIndustry"
          },
          "first_name" : {
            "title" : "First Name",
            "type" : "string",
            "description" : "The first name tied to the account",
            "readOnly" : true,
            "x-ballerina-name" : "firstName"
          },
          "email" : {
            "title" : "Account Email",
            "type" : "string",
            "description" : "The account email address",
            "readOnly" : true
          },
          "account_timezone" : {
            "title" : "Account Timezone",
            "type" : "string",
            "description" : "The timezone currently set for the account",
            "readOnly" : true,
            "x-ballerina-name" : "accountTimezone"
          },
          "total_subscribers" : {
            "title" : "Total Subscribers",
            "type" : "integer",
            "description" : "The total number of subscribers across all lists in the account",
            "readOnly" : true,
            "x-ballerina-name" : "totalSubscribers"
          },
          "username" : {
            "title" : "User Name",
            "type" : "string",
            "description" : "The username tied to the account",
            "readOnly" : true,
            "example" : "freddie2000"
          }
        },
        "description" : "The API root resource links to all other resources available in the API"
      },
      "CapsuleCRMTracking1" : {
        "title" : "Capsule CRM Tracking",
        "type" : "object",
        "properties" : {
          "notes" : {
            "title" : "Capsule Note",
            "type" : "boolean",
            "description" : "Update contact notes for a campaign based on a subscriber's email address"
          }
        },
        "description" : "Deprecated"
      },
      "CampaignsResults" : {
        "type" : "object",
        "properties" : {
          "snippet" : {
            "title" : "Matching snippet",
            "type" : "string"
          },
          "campaign" : {
            "$ref" : "#/components/schemas/Campaign4"
          }
        }
      },
      "Notes" : {
        "title" : "Notes",
        "type" : "object",
        "properties" : {
          "note_id" : {
            "title" : "Note ID",
            "type" : "integer",
            "description" : "The note id",
            "readOnly" : true,
            "x-ballerina-name" : "noteId"
          },
          "note" : {
            "title" : "Note",
            "type" : "string",
            "description" : "The content of the note",
            "readOnly" : true
          },
          "created_at" : {
            "title" : "Created Time",
            "type" : "string",
            "description" : "The date and time the note was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "created_by" : {
            "title" : "Author",
            "type" : "string",
            "description" : "The author of the note",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          }
        },
        "description" : "The most recent Note added about this member",
        "readOnly" : true
      },
      "ResendShortcutUsageShortcutCampaigns" : {
        "type" : "object",
        "properties" : {
          "send_time" : {
            "title" : "Send Time",
            "type" : "string",
            "description" : "The date and time a resent campaign was sent",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "sendTime"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID for the resent campaign",
            "readOnly" : true
          },
          "web_id" : {
            "title" : "Campaign Web ID",
            "type" : "integer",
            "description" : "The ID for the resent campaign used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`",
            "readOnly" : true,
            "x-ballerina-name" : "webId"
          },
          "shortcut_type" : {
            "title" : "Shortcut Type",
            "type" : "string",
            "description" : "Which campaign resend shortcut was used",
            "readOnly" : true,
            "enum" : [ "non_openers", "new_subscribers", "non_clickers", "non_purchasers" ],
            "x-ballerina-name" : "shortcutType"
          },
          "status" : {
            "title" : "Campaign Status",
            "type" : "string",
            "description" : "The current status of the campaign",
            "readOnly" : true,
            "enum" : [ "save", "paused", "schedule", "sending", "sent", "canceled", "canceling", "archived" ]
          }
        }
      },
      "ActionsCreateResendBody" : {
        "type" : "object",
        "properties" : {
          "shortcut_type" : {
            "title" : "Resend Shortcut Type",
            "type" : "string",
            "description" : "Which campaign resend shortcut to use. Default is `to_non_openers`",
            "enum" : [ "to_non_openers", "to_new_subscribers", "to_non_clickers", "to_non_purchasers" ],
            "x-ballerina-name" : "shortcutType"
          }
        }
      },
      "CollectionOfSegments" : {
        "title" : "Collection of Segments",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "segments" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a list segment",
            "items" : {
              "$ref" : "#/components/schemas/List9"
            }
          }
        },
        "description" : "A list of available segments"
      },
      "BillingAddress1" : {
        "title" : "Billing Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country",
            "type" : "string",
            "description" : "The country in the billing address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the billing address"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the billing address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The billing address for the order",
            "example" : "405 N Angier Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the billing address location",
            "example" : 33.768526
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province in the billing address",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the billing address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the billing address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the billing address",
            "example" : "+16155550128"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with the billing address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with the billing address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the billing address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the billing address location",
            "example" : -84.362887
          }
        },
        "description" : "The billing address for the order"
      },
      "ToNonClickers" : {
        "title" : "To Non-Clickers",
        "type" : "object",
        "properties" : {
          "reason" : {
            "title" : "Reason",
            "type" : "string",
            "description" : "The reason the campaign is not eligible to be resent to this segment",
            "readOnly" : true
          },
          "is_eligible" : {
            "title" : "Is Eligible",
            "type" : "boolean",
            "description" : "Determines if the campaign qualifies to be resent to this segment",
            "readOnly" : true,
            "x-ballerina-name" : "isEligible"
          }
        },
        "description" : "Determines if the campaign qualifies to be resent to non-clickers"
      },
      "BillingAddress2" : {
        "title" : "Billing Address",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The country in the billing address",
            "example" : "United States"
          },
          "address2" : {
            "title" : "Address Field 2",
            "type" : "string",
            "description" : "An additional field for the billing address",
            "example" : "Suite 5000"
          },
          "city" : {
            "title" : "City ",
            "type" : "string",
            "description" : "The city in the billing address",
            "example" : "Atlanta"
          },
          "address1" : {
            "title" : "Address Field 1",
            "type" : "string",
            "description" : "The billing address for the order",
            "example" : "675 Ponce de Leon Ave NE"
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The latitude for the billing address location",
            "example" : 45.427408
          },
          "province_code" : {
            "title" : "Province Code",
            "type" : "string",
            "description" : "The two-letter code for the province or state in the billing address",
            "example" : "GA",
            "x-ballerina-name" : "provinceCode"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The two-letter code for the country in the billing address",
            "example" : "US",
            "x-ballerina-name" : "countryCode"
          },
          "province" : {
            "title" : "Province",
            "type" : "string",
            "description" : "The state or normalized province in the billing address",
            "example" : "Georgia"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the billing address",
            "example" : "8675309"
          },
          "name" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The name associated with an order's billing address",
            "example" : "Freddie Chimpenheimer"
          },
          "company" : {
            "title" : "Company",
            "type" : "string",
            "description" : "The company associated with the billing address"
          },
          "postal_code" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code in the billing address",
            "example" : "30308",
            "x-ballerina-name" : "postalCode"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The longitude for the billing address location",
            "example" : -75.68903
          }
        },
        "description" : "The billing address for the order"
      },
      "Location3" : {
        "title" : "Location",
        "type" : "object",
        "properties" : {
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The unique code for the location country",
            "readOnly" : true,
            "x-ballerina-name" : "countryCode"
          },
          "dstoff" : {
            "title" : "DST Offset",
            "type" : "integer",
            "description" : "The offset for timezones where daylight saving time is observed",
            "readOnly" : true
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the location",
            "readOnly" : true
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The location latitude"
          },
          "gmtoff" : {
            "title" : "GMT Offset",
            "type" : "integer",
            "description" : "The time difference in hours from GMT",
            "readOnly" : true
          },
          "region" : {
            "title" : "Region",
            "type" : "string",
            "description" : "The region for the location",
            "readOnly" : true
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The location longitude"
          }
        },
        "description" : "Subscriber location information"
      },
      "DailyClicksAndVisitsData" : {
        "title" : "Daily clicks and visits data",
        "type" : "object",
        "properties" : {
          "unique_visits" : {
            "title" : "Unique Visits",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DailyClicksAndVisitsDataUniqueVisits"
            },
            "x-ballerina-name" : "uniqueVisits"
          },
          "visits" : {
            "title" : "Visits",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DailyClicksAndVisitsDataVisits"
            }
          },
          "clicks" : {
            "title" : "Clicks",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DailyClicksAndVisitsDataClicks"
            }
          }
        },
        "description" : "The clicks and visits data from the last seven days",
        "readOnly" : true
      },
      "Location1" : {
        "title" : "Location",
        "type" : "object",
        "properties" : {
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The unique code for the location country",
            "readOnly" : true,
            "x-ballerina-name" : "countryCode"
          },
          "dstoff" : {
            "title" : "DST Offset",
            "type" : "integer",
            "description" : "The offset for timezones where daylight saving time is observed",
            "readOnly" : true
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the location",
            "readOnly" : true
          },
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The location latitude"
          },
          "gmtoff" : {
            "title" : "GMT Offset",
            "type" : "integer",
            "description" : "The time difference in hours from GMT",
            "readOnly" : true
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The location longitude"
          }
        },
        "description" : "Subscriber location information"
      },
      "Location2" : {
        "title" : "Location",
        "type" : "object",
        "properties" : {
          "country" : {
            "title" : "Country",
            "type" : "string",
            "description" : "The two-digit country code for a recorded click"
          },
          "region" : {
            "title" : "Region",
            "type" : "string",
            "description" : "If available, a specific region where the click was recorded",
            "example" : "NY"
          }
        },
        "description" : "An individual click location"
      },
      "ExactMatches" : {
        "title" : "Exact Matches",
        "type" : "object",
        "properties" : {
          "members" : {
            "title" : "Members",
            "type" : "array",
            "description" : "An array of objects, each representing a specific list member",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers4"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Exact matches of the provided search query"
      },
      "SubscriberInAutomationQueue2" : {
        "title" : "Subscriber in Automation Queue",
        "required" : [ "email_address" ],
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Automation Email ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an email in an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies a list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "next_send" : {
            "title" : "Next Send",
            "type" : "string",
            "description" : "The date and time of the next send for the workflow email in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "nextSend"
          },
          "id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          }
        },
        "description" : "Information about subscribers in an Automation email queue"
      },
      "Carts" : {
        "title" : "Carts",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "carts" : {
            "title" : "E-commerce Store Carts",
            "type" : "array",
            "description" : "An array of objects, each representing a cart",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCart3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of a store's carts"
      },
      "ECommercePromoCode" : {
        "title" : "E-commerce Promo Code",
        "required" : [ "code", "id", "redemption_url" ],
        "type" : "object",
        "properties" : {
          "usage_count" : {
            "title" : "Promo Code Usage Count",
            "type" : "integer",
            "description" : "Number of times promo code has been used",
            "x-ballerina-name" : "usageCount"
          },
          "code" : {
            "title" : "Promo Code",
            "type" : "string",
            "description" : "The discount code. Restricted to UTF-8 characters with max length 50",
            "example" : "summersale"
          },
          "id" : {
            "title" : "Promo Code Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50"
          },
          "created_at_foreign" : {
            "title" : "Foreign Create Time",
            "type" : "string",
            "description" : "The date and time the promotion was created in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "createdAtForeign"
          },
          "updated_at_foreign" : {
            "title" : "Foreign Update Time",
            "type" : "string",
            "description" : "The date and time the promotion was updated in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "updatedAtForeign"
          },
          "redemption_url" : {
            "title" : "Redemption Url",
            "type" : "string",
            "description" : "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000",
            "example" : "A url that applies promo code directly at checkout or a url that points to sale page or store url",
            "x-ballerina-name" : "redemptionUrl"
          },
          "enabled" : {
            "title" : "Enabled",
            "type" : "boolean",
            "description" : "Whether the promo code is currently enabled",
            "example" : true
          }
        },
        "description" : "Information about an Ecommerce Store's specific Promo Code"
      },
      "SubscriberInAutomationQueue1" : {
        "title" : "Subscriber in Automation Queue",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Automation Email ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an email in an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies a list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "next_send" : {
            "title" : "Next Send",
            "type" : "string",
            "description" : "The date and time of the next send for the workflow email in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "nextSend"
          },
          "id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          }
        },
        "description" : "Information about subscribers in an Automation email queue"
      },
      "CampaignReports" : {
        "title" : "Campaign Reports",
        "type" : "object",
        "properties" : {
          "feedback" : {
            "title" : "Campaign Feedback",
            "type" : "array",
            "description" : "A collection of feedback items for a campaign",
            "items" : {
              "$ref" : "#/components/schemas/CampaignFeedback3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A summary of the comment feedback for a specific campaign"
      },
      "FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf1234" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        }
      },
      "AutomationCampaignSettings" : {
        "title" : "Automation Campaign Settings",
        "type" : "object",
        "properties" : {
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the Automation",
            "x-ballerina-name" : "replyTo"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name for the Automation (not an email address)",
            "x-ballerina-name" : "fromName"
          }
        },
        "description" : "The settings for the Automation workflow"
      },
      "ExactMatchesTags" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Tag Name",
            "type" : "string",
            "description" : "The name of the tag",
            "readOnly" : true
          },
          "id" : {
            "title" : "Tag ID",
            "type" : "integer",
            "description" : "The tag id",
            "readOnly" : true
          }
        }
      },
      "Location" : {
        "title" : "Location",
        "type" : "object",
        "properties" : {
          "latitude" : {
            "title" : "Latitude",
            "type" : "number",
            "description" : "The location latitude"
          },
          "longitude" : {
            "title" : "Longitude",
            "type" : "number",
            "description" : "The location longitude"
          }
        },
        "description" : "Subscriber location information"
      },
      "ECommerceOrderLineItem2" : {
        "title" : "E-commerce Order Line Item",
        "type" : "object",
        "properties" : {
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of an order line item"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of an order line item"
          },
          "product_id" : {
            "title" : "Order Line Item Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the order line item",
            "x-ballerina-name" : "productId"
          },
          "discount" : {
            "title" : "Discount",
            "type" : "number",
            "description" : "The total discount amount applied to this line item"
          },
          "product_variant_id" : {
            "title" : "Order Line Item Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the order line item",
            "x-ballerina-name" : "productVariantId"
          }
        },
        "description" : "Information about a specific order line"
      },
      "ECommerceOrderLineItem1" : {
        "title" : "E-commerce Order Line Item",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ECommerceProduct1"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of an order line item"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of an order line item"
          },
          "product_id" : {
            "title" : "Order Line Item Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the order line item",
            "x-ballerina-name" : "productId"
          },
          "discount" : {
            "title" : "Discount",
            "type" : "number",
            "description" : "The total discount amount applied to this line item"
          },
          "id" : {
            "title" : "Order Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the order line item"
          },
          "product_variant_id" : {
            "title" : "Order Line Item Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the order line item",
            "x-ballerina-name" : "productVariantId"
          }
        },
        "description" : "Information about a specific order line"
      },
      "ECommerceOrderLineItem4" : {
        "title" : "E-commerce Order Line Item",
        "type" : "object",
        "properties" : {
          "product_variant_title" : {
            "title" : "Order Line Item Product Variant Title",
            "type" : "string",
            "description" : "The name of the product variant for an order line item",
            "readOnly" : true,
            "x-ballerina-name" : "productVariantTitle"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The order line item quantity"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "readOnly" : true,
            "x-ballerina-name" : "imageUrl"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The order line item price"
          },
          "product_id" : {
            "title" : "Order Line Item Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with an order line item",
            "x-ballerina-name" : "productId"
          },
          "discount" : {
            "title" : "Discount",
            "type" : "number",
            "description" : "The total discount amount applied to a line item"
          },
          "id" : {
            "title" : "Order Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for an order line item",
            "readOnly" : true
          },
          "product_variant_id" : {
            "title" : "Order Line Item Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with an order line item",
            "x-ballerina-name" : "productVariantId"
          },
          "product_title" : {
            "title" : "Order Line Item Product Title",
            "type" : "string",
            "description" : "The name of the product for an order line item",
            "readOnly" : true,
            "x-ballerina-name" : "productTitle"
          }
        },
        "description" : "Information about a specific order line"
      },
      "ECommerceOrderLineItem3" : {
        "title" : "E-commerce Order Line Item",
        "type" : "object",
        "properties" : {
          "product_variant_title" : {
            "title" : "Order Line Item Product Variant Title",
            "type" : "string",
            "description" : "The name of the product variant for an order line item",
            "readOnly" : true,
            "x-ballerina-name" : "productVariantTitle"
          },
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The order line item quantity"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "readOnly" : true,
            "x-ballerina-name" : "imageUrl"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The order line item price"
          },
          "product_id" : {
            "title" : "Order Line Item Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with an order line item",
            "x-ballerina-name" : "productId"
          },
          "discount" : {
            "title" : "Discount",
            "type" : "number",
            "description" : "The total discount amount applied to a line item"
          },
          "id" : {
            "title" : "Order Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for an order line item",
            "readOnly" : true
          },
          "product_variant_id" : {
            "title" : "Order Line Item Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with an order line item",
            "x-ballerina-name" : "productVariantId"
          },
          "product_title" : {
            "title" : "Order Line Item Product Title",
            "type" : "string",
            "description" : "The name of the product for an order line item",
            "readOnly" : true,
            "x-ballerina-name" : "productTitle"
          }
        },
        "description" : "Information about a specific order line"
      },
      "CampaignContent1" : {
        "title" : "Campaign Content",
        "type" : "object",
        "properties" : {
          "template" : {
            "$ref" : "#/components/schemas/TemplateContent"
          },
          "plain_text" : {
            "title" : "Plain Text",
            "type" : "string",
            "description" : "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically",
            "x-ballerina-name" : "plainText"
          },
          "variate_contents" : {
            "title" : "Variate Contents",
            "type" : "array",
            "description" : "Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided",
            "items" : {
              "$ref" : "#/components/schemas/CampaignscampaignIdcontentVariateContents"
            },
            "x-ballerina-name" : "variateContents"
          },
          "html" : {
            "title" : "Campaign HTML",
            "type" : "string",
            "description" : "The raw HTML for the campaign"
          },
          "archive" : {
            "$ref" : "#/components/schemas/UploadArchive"
          },
          "url" : {
            "title" : "Campaign URL",
            "type" : "string",
            "description" : "When importing a campaign, the URL where the HTML lives"
          }
        },
        "description" : "The HTML and plain-text content for a campaign"
      },
      "GalleryFolder1" : {
        "title" : "Gallery Folder",
        "type" : "object",
        "properties" : {
          "file_count" : {
            "title" : "File Count",
            "type" : "integer",
            "description" : "The number of files in the folder",
            "readOnly" : true,
            "x-ballerina-name" : "fileCount"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "created_at" : {
            "title" : "Created Date",
            "type" : "string",
            "description" : "The date and time a file was added to the File Manager in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The unique id for the folder",
            "readOnly" : true
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The username of the profile that created the folder",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          }
        },
        "description" : "An individual folder listed in the File Manager"
      },
      "GalleryFolder2" : {
        "title" : "Gallery Folder",
        "type" : "object",
        "properties" : {
          "file_count" : {
            "title" : "File Count",
            "type" : "integer",
            "description" : "The number of files in the folder",
            "readOnly" : true,
            "x-ballerina-name" : "fileCount"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Folder Name",
            "type" : "string",
            "description" : "The name of the folder"
          },
          "created_at" : {
            "title" : "Created Date",
            "type" : "string",
            "description" : "The date and time a file was added to the File Manager in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The unique id for the folder",
            "readOnly" : true
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The username of the profile that created the folder",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          }
        },
        "description" : "An individual folder listed in the File Manager"
      },
      "CampaignTrackingOptions" : {
        "title" : "Campaign Tracking Options",
        "type" : "object",
        "properties" : {
          "salesforce" : {
            "$ref" : "#/components/schemas/SalesforceCRMTracking"
          },
          "goal_tracking" : {
            "title" : "Mailchimp Goal Tracking",
            "type" : "boolean",
            "description" : "Deprecated",
            "x-ballerina-name" : "goalTracking"
          },
          "capsule" : {
            "$ref" : "#/components/schemas/CapsuleCRMTracking"
          },
          "clicktale" : {
            "title" : "ClickTale Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)"
          },
          "text_clicks" : {
            "title" : "Plain-Text Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns",
            "x-ballerina-name" : "textClicks"
          },
          "ecomm360" : {
            "title" : "E-commerce Tracking",
            "type" : "boolean",
            "description" : "Whether to enable e-commerce tracking"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "boolean",
            "description" : "Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns"
          },
          "google_analytics" : {
            "title" : "Google Analytics Tracking",
            "type" : "string",
            "description" : "The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)",
            "x-ballerina-name" : "googleAnalytics"
          },
          "html_clicks" : {
            "title" : "HTML Click Tracking",
            "type" : "boolean",
            "description" : "Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns",
            "x-ballerina-name" : "htmlClicks"
          }
        },
        "description" : "The tracking options for a campaign"
      },
      "ConversationMessage" : {
        "title" : "Conversation Message",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "From Email",
            "type" : "string",
            "description" : "A label representing the email of the sender of this message",
            "x-ballerina-name" : "fromEmail"
          },
          "read" : {
            "title" : "Read",
            "type" : "boolean",
            "description" : "Whether this message has been marked as read"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "integer",
            "description" : "The list's web ID",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "conversation_id" : {
            "title" : "Conversation ID",
            "type" : "string",
            "description" : "A string that identifies this message's conversation",
            "readOnly" : true,
            "x-ballerina-name" : "conversationId"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The subject of this message"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this message",
            "readOnly" : true
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The plain-text content of the message"
          },
          "from_label" : {
            "title" : "From Label",
            "type" : "string",
            "description" : "A label representing the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromLabel"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time the message was either sent or received in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account"
      },
      "Interests" : {
        "title" : "Interests",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id that the interests belong to",
            "x-ballerina-name" : "listId"
          },
          "category_id" : {
            "title" : "Interest Category ID",
            "type" : "string",
            "description" : "The id for the interest category",
            "x-ballerina-name" : "categoryId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "interests" : {
            "title" : "Interests",
            "type" : "array",
            "description" : "An array of this category's interests",
            "items" : {
              "$ref" : "#/components/schemas/Interest2"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A list of this category's interests"
      },
      "CreateAnAccountExport" : {
        "title" : "Create an account export",
        "required" : [ "include_stages" ],
        "type" : "object",
        "properties" : {
          "since_timestamp" : {
            "title" : "Since Timestamp",
            "type" : "string",
            "description" : "An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit",
            "format" : "date-time",
            "example" : "2021-08-23T14:15:09Z",
            "x-ballerina-name" : "sinceTimestamp"
          },
          "include_stages" : {
            "title" : "Include Stages",
            "type" : "array",
            "description" : "The stages of an account export to include",
            "example" : "[\"audiences\", \"gallery_files\"]",
            "items" : {
              "type" : "string",
              "enum" : [ "audiences", "campaigns", "events", "gallery_files", "reports", "templates" ]
            },
            "x-ballerina-name" : "includeStages"
          }
        },
        "description" : "Creates an account export with the given parameters"
      },
      "MemberTags" : {
        "title" : "Member Tags",
        "required" : [ "tags" ],
        "type" : "object",
        "properties" : {
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "When is_syncing is true, automations based on the tags in the request will not fire",
            "x-ballerina-name" : "isSyncing"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "A list of tags assigned to the list member",
            "items" : {
              "$ref" : "#/components/schemas/MemberTag"
            }
          }
        },
        "description" : "A list of tags assigned to a list member"
      },
      "Goal" : {
        "title" : "Goal",
        "type" : "object",
        "properties" : {
          "goal_id" : {
            "title" : "Goal ID",
            "type" : "integer",
            "description" : "The id for a Goal event",
            "x-ballerina-name" : "goalId"
          },
          "data" : {
            "title" : "Additional Data",
            "type" : "string",
            "description" : "Any extra data passed with the Goal event"
          },
          "last_visited_at" : {
            "title" : "Last Visit Date",
            "type" : "string",
            "description" : "The date and time the user last triggered the Goal event in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastVisitedAt"
          },
          "event" : {
            "title" : "Event Name",
            "type" : "string",
            "description" : "The name/type of Goal event triggered"
          }
        },
        "description" : "A single instance of a goal activity"
      },
      "PromoCodes" : {
        "title" : "Promo Codes",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "promo_codes" : {
            "title" : "Promo Codes",
            "type" : "array",
            "description" : "An array of objects, each representing promo codes defined for a store",
            "items" : {
              "$ref" : "#/components/schemas/ECommercePromoCode3"
            },
            "x-ballerina-name" : "promoCodes"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of the store's promo codes"
      },
      "Outreach" : {
        "title" : "Outreach",
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "Outreach ID",
            "type" : "string",
            "description" : "A unique identifier for the outreach. Can be an email campaign ID",
            "example" : "839488a60b"
          }
        },
        "description" : "The outreach associated with this order. For example, an email campaign or Facebook ad"
      },
      "ClickDetailMember" : {
        "title" : "Click Detail Member",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of times the subscriber clicked on the link",
            "readOnly" : true
          },
          "contact_status" : {
            "title" : "Member Status",
            "type" : "string",
            "description" : "The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation",
            "readOnly" : true,
            "x-ballerina-name" : "contactStatus"
          },
          "url_id" : {
            "title" : "URL ID",
            "type" : "string",
            "description" : "The id for the tracked URL in the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "urlId"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A subscriber who clicked a specific URL in a specific campaign"
      },
      "Operations" : {
        "title" : "Operations",
        "required" : [ "method", "path" ],
        "type" : "object",
        "properties" : {
          "path" : {
            "title" : "Path",
            "type" : "string",
            "description" : "The relative path to use for the operation",
            "example" : "/lists"
          },
          "method" : {
            "title" : "HTTP Method",
            "type" : "string",
            "description" : "The HTTP method to use for the operation",
            "example" : "POST",
            "enum" : [ "GET", "POST", "PUT", "PATCH", "DELETE" ]
          },
          "operation_id" : {
            "title" : "Operation ID",
            "type" : "string",
            "description" : "An optional client-supplied id returned with the operation results",
            "example" : "my-id-123",
            "x-ballerina-name" : "operationId"
          },
          "params" : {
            "title" : "Query Parameters",
            "type" : "object",
            "properties" : { },
            "description" : "Any request query parameters. Example parameters: {\"count\":10, \"offset\":0}",
            "example" : "{\"count\":10,\"offset\":0}"
          },
          "body" : {
            "title" : "Body",
            "type" : "string",
            "description" : "A string containing the JSON body to use with the request",
            "example" : "{\"title\":\"Test\"}"
          }
        }
      },
      "TwitterStatus" : {
        "title" : "Twitter Status",
        "type" : "object",
        "properties" : {
          "datetime" : {
            "title" : "Datetime",
            "type" : "string",
            "description" : "A timestamp for the tweet",
            "format" : "date-time",
            "readOnly" : true
          },
          "status_id" : {
            "title" : "Status ID",
            "type" : "string",
            "description" : "The individual id for the tweet",
            "readOnly" : true,
            "x-ballerina-name" : "statusId"
          },
          "screen_name" : {
            "title" : "Screen Name",
            "type" : "string",
            "description" : "The Twitter handle for the author of the tweet",
            "readOnly" : true,
            "x-ballerina-name" : "screenName"
          },
          "is_retweet" : {
            "title" : "Is Retweet",
            "type" : "boolean",
            "description" : "A 'true' or 'false' status of whether the tweet is a retweet",
            "readOnly" : true,
            "x-ballerina-name" : "isRetweet"
          },
          "status" : {
            "title" : "Status Body",
            "type" : "string",
            "description" : "The body of the tweet",
            "readOnly" : true
          }
        },
        "description" : "An individual tweet"
      },
      "VerifyADomainForSending" : {
        "title" : "Verify a domain for sending.",
        "required" : [ "code" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "title" : "Verification Code",
            "type" : "string",
            "description" : "The code that was sent to the email address provided when adding a new domain to verify"
          }
        },
        "description" : "Submit a response to the verification challenge and verify a domain for sending"
      },
      "CollectionOfMemberActivityEvents" : {
        "title" : "Collection of Member Activity Events",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "goals" : {
            "title" : "Goal Activity",
            "type" : "array",
            "description" : "The last 50 Goal events triggered by a member",
            "items" : {
              "$ref" : "#/components/schemas/Goal"
            }
          }
        },
        "description" : "The last 50 Goal events for a member on a specific list"
      },
      "TagSearchResultsTags" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Tag Name",
            "type" : "string",
            "description" : "The name of the tag"
          },
          "id" : {
            "title" : "Tag ID",
            "type" : "integer",
            "description" : "The unique id for the tag",
            "readOnly" : true
          }
        }
      },
      "ECommerceProduct3" : {
        "title" : "E-commerce Product",
        "type" : "object",
        "properties" : {
          "images" : {
            "title" : "Product Images",
            "type" : "array",
            "description" : "An array of the product's images",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage1"
            }
          },
          "vendor" : {
            "title" : "Vendor",
            "type" : "string",
            "description" : "The vendor for a product"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a product",
            "example" : "This is a cat hat."
          },
          "handle" : {
            "title" : "Handle",
            "type" : "string",
            "description" : "The handle of a product",
            "example" : "cat-hat"
          },
          "published_at_foreign" : {
            "title" : "Foreign Publish Time",
            "type" : "string",
            "description" : "The date and time the product was published in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "publishedAtForeign"
          },
          "variants" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant1"
            }
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product",
            "example" : "Cat Hat"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of product",
            "example" : "Accessories"
          },
          "url" : {
            "title" : "Product URL",
            "type" : "string",
            "description" : "The URL for a product"
          }
        },
        "description" : "Information about a specific product"
      },
      "ECommerceProduct4" : {
        "title" : "E-commerce Product",
        "type" : "object",
        "properties" : {
          "images" : {
            "title" : "Product Images",
            "type" : "array",
            "description" : "An array of the product's images",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a product",
            "example" : "This is a cat hat."
          },
          "handle" : {
            "title" : "Handle",
            "type" : "string",
            "description" : "The handle of a product",
            "example" : "cat-hat"
          },
          "variants" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/)",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant3"
            }
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product",
            "example" : "Cat Hat"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of product",
            "example" : "Accessories"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The currency code",
            "readOnly" : true,
            "x-ballerina-name" : "currencyCode"
          },
          "url" : {
            "title" : "Product URL",
            "type" : "string",
            "description" : "The URL for a product"
          },
          "vendor" : {
            "title" : "Vendor",
            "type" : "string",
            "description" : "The vendor for a product"
          },
          "published_at_foreign" : {
            "title" : "Foreign Publish Time",
            "type" : "string",
            "description" : "The date and time the product was published in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "publishedAtForeign"
          },
          "id" : {
            "title" : "Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product",
            "readOnly" : true
          }
        },
        "description" : "Information about a specific product"
      },
      "DailyClicksAndVisitsDataClicks" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "title" : "Date",
            "type" : "string",
            "readOnly" : true,
            "example" : "2018-04-25"
          },
          "val" : {
            "title" : "Value",
            "type" : "integer",
            "readOnly" : true,
            "example" : 13
          }
        }
      },
      "ECommerceProduct1" : {
        "title" : "E-commerce Product",
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "images" : {
            "title" : "Product Images",
            "type" : "array",
            "description" : "An array of the product's images",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage"
            }
          },
          "vendor" : {
            "title" : "Vendor",
            "type" : "string",
            "description" : "The vendor for a product"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a product",
            "example" : "This is a cat hat."
          },
          "handle" : {
            "title" : "Handle",
            "type" : "string",
            "description" : "The handle of a product",
            "example" : "cat-hat"
          },
          "published_at_foreign" : {
            "title" : "Foreign Publish Time",
            "type" : "string",
            "description" : "The date and time the product was published",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "publishedAtForeign"
          },
          "id" : {
            "title" : "Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product"
          },
          "variants" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant"
            }
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product",
            "example" : "Cat Hat"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of product",
            "example" : "Accessories"
          },
          "url" : {
            "title" : "Product URL",
            "type" : "string",
            "description" : "The URL for a product"
          }
        },
        "description" : "Information about a specific product"
      },
      "ECommerceProduct2" : {
        "title" : "E-commerce Product",
        "type" : "object",
        "properties" : {
          "images" : {
            "title" : "Product Images",
            "type" : "array",
            "description" : "An array of the product's images",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductImage3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "image_url" : {
            "title" : "Product Image URL",
            "type" : "string",
            "description" : "The image URL for a product",
            "x-ballerina-name" : "imageUrl"
          },
          "description" : {
            "title" : "Description",
            "type" : "string",
            "description" : "The description of a product",
            "example" : "This is a cat hat."
          },
          "handle" : {
            "title" : "Handle",
            "type" : "string",
            "description" : "The handle of a product",
            "example" : "cat-hat"
          },
          "variants" : {
            "title" : "Product Variants",
            "type" : "array",
            "description" : "Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/)",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceProductVariant3"
            }
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product",
            "example" : "Cat Hat"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of product",
            "example" : "Accessories"
          },
          "currency_code" : {
            "title" : "Currency Code",
            "type" : "string",
            "description" : "The currency code",
            "readOnly" : true,
            "x-ballerina-name" : "currencyCode"
          },
          "url" : {
            "title" : "Product URL",
            "type" : "string",
            "description" : "The URL for a product"
          },
          "vendor" : {
            "title" : "Vendor",
            "type" : "string",
            "description" : "The vendor for a product"
          },
          "published_at_foreign" : {
            "title" : "Foreign Publish Time",
            "type" : "string",
            "description" : "The date and time the product was published in ISO 8601 format",
            "format" : "date-time",
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "publishedAtForeign"
          },
          "id" : {
            "title" : "Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product",
            "readOnly" : true
          }
        },
        "description" : "Information about a specific product"
      },
      "AddListMembers" : {
        "title" : "Add List Members",
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "x-ballerina-name" : "emailAddress"
          },
          "email_type" : {
            "title" : "Email Type",
            "type" : "string",
            "description" : "Type of email this member asked to get ('html' or 'text')",
            "x-ballerina-name" : "emailType"
          },
          "timestamp_opt" : {
            "title" : "Opt-in Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber confirmed their opt-in status in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampOpt"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "timestamp_signup" : {
            "title" : "Signup Timestamp",
            "type" : "string",
            "description" : "The date and time the subscriber signed up for the list in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "timestampSignup"
          },
          "ip_opt" : {
            "title" : "Opt-in IP",
            "type" : "string",
            "description" : "The IP address the subscriber used to confirm their opt-in status",
            "x-ballerina-name" : "ipOpt"
          },
          "language" : {
            "title" : "Language",
            "type" : "string",
            "description" : "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)"
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "ip_signup" : {
            "title" : "Signup IP",
            "type" : "string",
            "description" : "IP address the subscriber signed up from",
            "x-ballerina-name" : "ipSignup"
          },
          "interests" : {
            "title" : "Subscriber Interests",
            "type" : "object",
            "additionalProperties" : {
              "title" : "Interest Value",
              "type" : "boolean",
              "description" : "Keys are interest IDs, values are booleans that describe whether the list member is in that group or not."
            },
            "description" : "The key of this object's properties is the ID of the interest in question"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber"
          },
          "status" : {
            "title" : "Status",
            "type" : "string",
            "description" : "Subscriber's current status",
            "enum" : [ "subscribed", "unsubscribed", "cleaned", "pending", "transactional" ]
          }
        },
        "description" : "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed"
      },
      "SurveyRespondents" : {
        "title" : "Survey Respondents",
        "type" : "object",
        "properties" : {
          "submitted_at" : {
            "title" : "Submitted At",
            "type" : "string",
            "description" : "The date and time when the survey response was submitted in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "submittedAt"
          },
          "response_id" : {
            "title" : "Response ID",
            "type" : "string",
            "description" : "The ID for the survey response",
            "readOnly" : true,
            "x-ballerina-name" : "responseId"
          },
          "contact" : {
            "$ref" : "#/components/schemas/Contact"
          },
          "is_new_contact" : {
            "title" : "Is New Contact",
            "type" : "boolean",
            "description" : "If this contact was added to the Mailchimp audience via this survey",
            "x-ballerina-name" : "isNewContact"
          }
        },
        "description" : "Survey respondent details"
      },
      "AddWebhook" : {
        "title" : "Add Webhook",
        "type" : "object",
        "properties" : {
          "sources" : {
            "$ref" : "#/components/schemas/Sources"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "A valid URL for the Webhook",
            "example" : "http://yourdomain.com/webhook"
          },
          "events" : {
            "$ref" : "#/components/schemas/Events1"
          }
        },
        "description" : "Configure a webhook for the given list"
      },
      "ListSignupForms" : {
        "title" : "List Signup Forms",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "signup_forms" : {
            "title" : "List Signup Form",
            "type" : "array",
            "description" : "List signup form",
            "items" : {
              "$ref" : "#/components/schemas/SignupForm2"
            },
            "x-ballerina-name" : "signupForms"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "List Signup Forms"
      },
      "Events1" : {
        "title" : "Events",
        "type" : "object",
        "properties" : {
          "subscribe" : {
            "title" : "Subscribed",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a list subscriber is added",
            "example" : true
          },
          "unsubscribe" : {
            "title" : "Unsubscribed",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a list member unsubscribes",
            "example" : true
          },
          "profile" : {
            "title" : "Profile Updated",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's profile is updated",
            "example" : true
          },
          "cleaned" : {
            "title" : "Cleaned",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's email address is cleaned from the list",
            "example" : true
          },
          "campaign" : {
            "title" : "Campaign Sent",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a campaign is sent or cancelled",
            "example" : true
          },
          "upemail" : {
            "title" : "Email Address Updated",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's email address is changed",
            "example" : true
          }
        },
        "description" : "The events that can trigger the webhook and whether they are enabled"
      },
      "AutomationTrigger" : {
        "title" : "Automation Trigger",
        "required" : [ "workflow_type" ],
        "type" : "object",
        "properties" : {
          "workflow_type" : {
            "title" : "Workflow Type",
            "type" : "string",
            "description" : "The type of Automation workflow. Currently only supports 'abandonedCart'",
            "x-ballerina-name" : "workflowType"
          }
        },
        "description" : "Trigger settings for the Automation"
      },
      "InlineResponse20013AudienceActivityClicks" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string"
          },
          "clicks" : {
            "type" : "integer"
          }
        }
      },
      "Conditions1" : {
        "title" : "Conditions",
        "type" : "object",
        "properties" : {
          "match" : {
            "title" : "Match",
            "type" : "string",
            "description" : "Match type",
            "enum" : [ "any", "all" ]
          },
          "conditions" : {
            "title" : "Segment Conditions",
            "type" : "array",
            "description" : "An array of segment conditions",
            "items" : {
              "title" : "Segment Type",
              "type" : "array",
              "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas).",
              "items" : {
                "type" : "object",
                "x-oneOf" : [ {
                  "type" : "object",
                  "title" : "Aim Segment",
                  "description" : "Segment by interaction with a specific campaign.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Aim",
                      "enum" : [ "Aim" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "aim" ],
                      "title" : "Segment Field",
                      "description" : "Segment by interaction with a specific campaign.",
                      "example" : "aim"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                      "title" : "Segment Operator",
                      "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                      "example" : "open"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                      "example" : "any"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Automation Segment",
                  "description" : "Segment by interaction with an Automation workflow.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Automation",
                      "enum" : [ "Automation" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "automation" ],
                      "title" : "Segment Field",
                      "description" : "Segment by interaction with an Automation workflow.",
                      "example" : "automation"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "started", "completed", "not_started", "not_completed" ],
                      "title" : "Segment Operator",
                      "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                      "example" : "started"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The web id for the automation workflow to segment against.",
                      "example" : "2135217"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Poll Activity Segment",
                  "description" : "Segment by poll activity.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "CampaignPoll",
                      "enum" : [ "CampaignPoll" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "poll" ],
                      "title" : "Segment Field",
                      "description" : "Segment by poll activity.",
                      "example" : "poll"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "member", "notmember" ],
                      "title" : "Segment Operator",
                      "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                      "example" : "member"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "The id for the poll.",
                      "example" : 409
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Conversation Segment",
                  "description" : "Segment by interaction with a campaign via Conversations.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Conversation",
                      "enum" : [ "Conversation" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "conversation" ],
                      "title" : "Segment Field",
                      "description" : "Segment by interaction with a campaign via Conversations.",
                      "example" : "conversation"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "member", "notmember" ],
                      "title" : "Segment Operator",
                      "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                      "example" : "member"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                      "example" : "any"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Date Segment",
                  "description" : "Segment by a specific date field.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Date",
                      "enum" : [ "Date" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                      "title" : "Segment Field",
                      "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                      "example" : "timestamp_opt"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                      "title" : "Segment Operator",
                      "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                      "example" : "date"
                    },
                    "extra" : {
                      "type" : "string",
                      "title" : "Segment Extra Value",
                      "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                      "example" : "2015-01-30"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Email Client Segment",
                  "description" : "Segment by use of a particular email client.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EmailClient",
                      "enum" : [ "EmailClient" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "email_client" ],
                      "title" : "Segment Field",
                      "description" : "Segment by use of a particular email client.",
                      "example" : "email_client"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "client_is", "client_not" ],
                      "title" : "Segment Operator",
                      "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                      "example" : "client_is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The name of the email client.",
                      "example" : "Gmail"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Language Segment",
                  "description" : "Segment by language.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Language",
                      "enum" : [ "Language" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "language" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting based off of a subscriber's language.",
                      "example" : "language"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's language is or is not set to a specific language.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "A two-letter language identifier.",
                      "example" : "en"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Member Rating Segment",
                  "description" : "Segment by member rating.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "MemberRating",
                      "enum" : [ "MemberRating" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "rating" ],
                      "title" : "Segment Field",
                      "description" : "Segment by member rating.",
                      "example" : "rating"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "greater", "less" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "The star rating number to segment against.",
                      "example" : 4
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Signup Source Segment",
                  "description" : "Segment by signup source.",
                  "required" : [ "field", "condition_type", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "enum" : [ "SignupSource" ],
                      "x-value" : "SignupSource",
                      "title" : "Type"
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "source" ],
                      "title" : "Segment Field",
                      "example" : "source"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "source_is", "source_not" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's signup source was/was not a particular value.",
                      "example" : "source_is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The signup source.",
                      "example" : "List Import"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Survey Monkey Segment",
                  "description" : "Segment by interaction with a SurveyMonkey survey.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SurveyMonkey",
                      "enum" : [ "SurveyMonkey" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "survey_monkey" ],
                      "title" : "Segment Field",
                      "description" : "Segment by interaction with a SurveyMonkey survey.",
                      "example" : "survey_monkey"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "started", "completed", "not_started", "not_completed" ],
                      "title" : "Segment Operator",
                      "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                      "example" : "started"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Survey ID",
                      "description" : "The unique ID of the survey monkey survey.",
                      "example" : "32179586"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "VIP Segment",
                  "description" : "Segment by VIP status.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "VIP",
                      "enum" : [ "VIP" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "gmonkey" ],
                      "title" : "Segment Field",
                      "description" : "Segment by VIP status.",
                      "example" : "gmonkey"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "member", "notmember" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member is or is not marked as VIP.",
                      "example" : "member"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Interests Segment",
                  "description" : "Segment by an interest group merge field.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "Interests",
                      "enum" : [ "Interests" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                      "example" : "interests-123"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member is a part of one, all, or none of the groups.",
                      "example" : "interestcontains"
                    },
                    "value" : {
                      "type" : "array",
                      "title" : "Segment Value",
                      "description" : "An array containing strings, each representing a group id.",
                      "items" : {
                        "type" : "string",
                        "example" : [ "44401", "44405", "44409" ]
                      }
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Ecommerce Category Segment",
                  "description" : "Segment by purchases in specific items or categories.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EcommCategory",
                      "enum" : [ "EcommCategory" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ecomm_cat", "ecomm_prod" ],
                      "title" : "Segment Field",
                      "description" : "Segment by purchases in specific items or categories.",
                      "example" : "ecomm_cat"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                      "title" : "Segment Operator",
                      "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The ecommerce category/item information.",
                      "example" : "Product"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Ecommerce Number Segment",
                  "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EcommNumber",
                      "enum" : [ "EcommNumber" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                      "title" : "Segment Field",
                      "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                      "example" : "ecomm_orders"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "greater", "less" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                      "example" : 42
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Ecommerce Purchased Segment",
                  "description" : "Segment by whether someone has purchased anything.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EcommPurchased",
                      "enum" : [ "EcommPurchased" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ecomm_purchased" ],
                      "title" : "Segment Field",
                      "description" : "Segment by whether someone has purchased anything.",
                      "example" : "ecomm_purchased"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "member", "notmember" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                      "example" : "member"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Ecommerce Spent Segment",
                  "description" : "Segment by amount spent on a single order or across all orders.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EcommSpent",
                      "enum" : [ "EcommSpent" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                      "title" : "Segment Field",
                      "description" : "Segment by amount spent on a single order or across all orders.",
                      "example" : "ecomm_spent_one"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "greater", "less" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have spent 'more' or 'less' than then specified value.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "integer",
                      "title" : "Segment Data",
                      "description" : "The total amount a member spent.",
                      "example" : 42
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Ecommerce Purchased Store Segment",
                  "description" : "Segment by purchases from a specific store.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EcommStore",
                      "enum" : [ "EcommStore" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ecomm_store" ],
                      "title" : "Segment Field",
                      "description" : "Segment by purchases from a specific store.",
                      "example" : "ecomm_store"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have or have not purchased from a specific store.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Operator",
                      "description" : "The store id to segment against.",
                      "example" : "289"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Goal Activity Segment",
                  "description" : "Segment by Goal activity.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "GoalActivity",
                      "enum" : [ "GoalActivity" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "goal" ],
                      "title" : "Segment Field",
                      "description" : "Segment by Goal activity.",
                      "example" : "goal"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The URL to check Goal activity against."
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Goal Timestamp Segment",
                  "description" : "Segment by most recent interaction with a website.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "GoalTimestamp",
                      "enum" : [ "GoalTimestamp" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "goal_last_visited" ],
                      "title" : "Segment Field",
                      "description" : "Segment by most recent interaction with a website.",
                      "example" : "goal_last_visited"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "greater", "less", "is" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The date to check Goal activity against.",
                      "example" : "2015-07-20 19:45:21"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Similar Subscribers Segment Member Segment",
                  "description" : "Segment by similar subscribers.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "FuzzySegment",
                      "enum" : [ "FuzzySegment" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "fuzzy_segment" ],
                      "title" : "Segment Field",
                      "description" : "Segment by similar subscribers.",
                      "example" : "fuzzy_segment"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "fuzzy_is", "fuzzy_not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                      "example" : "fuzzy_is"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "The id for the 'similar subscribers' segment.",
                      "example" : 48433
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Static Segment Member Segment",
                  "description" : "Segment by a given static segment.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "StaticSegment",
                      "enum" : [ "StaticSegment" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "static_segment" ],
                      "title" : "Segment Field",
                      "description" : "Segment by a given static segment.",
                      "example" : "static_segment"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "static_is", "static_not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/are not apart of a static segment.",
                      "example" : "static_is"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "The id for the static segment.",
                      "example" : 48433
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Location-Based Segment",
                  "description" : "Segment by a specific country or US state.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "IPGeoCountryState",
                      "enum" : [ "IPGeoCountryState" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ipgeo" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting subscribers who are within a specific location.",
                      "example" : "ipgeo"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                      "title" : "Segment Operator",
                      "description" : "Segment members who are within a specific country or US state.",
                      "example" : "ipgeocountry"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "The two-letter country code or US state abbreviation.",
                      "example" : "US"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Geolocation Segment",
                  "description" : "Segment by a specific geographic region.",
                  "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "IPGeoIn",
                      "enum" : [ "IPGeoIn" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ipgeo" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting subscribers who are within a specific location.",
                      "example" : "ipgeo"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "ipgeoin", "ipgeonotin" ],
                      "title" : "Segment Operator",
                      "description" : "Segment members who are within a specific geographic region.",
                      "example" : "ipgeoin"
                    },
                    "value" : {
                      "type" : "integer",
                      "title" : "Segment Data",
                      "description" : "The radius of the target location.",
                      "example" : 42
                    },
                    "addr" : {
                      "type" : "string",
                      "title" : "Segment Location Address",
                      "description" : "The address of the target location.",
                      "example" : "Atlanta, GA, USA"
                    },
                    "lat" : {
                      "type" : "string",
                      "title" : "Segment Location Latitude",
                      "description" : "The latitude of the target location.",
                      "example" : "33.7489954"
                    },
                    "lng" : {
                      "type" : "string",
                      "title" : "Segment Location Longitude",
                      "description" : "The longitude of the target location.",
                      "example" : "-84.3879824"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "US Zip Code Segment",
                  "description" : "Segment by a specific US ZIP code.",
                  "required" : [ "field", "op", "value", "extra" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "IPGeoInZip",
                      "enum" : [ "IPGeoInZip" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ipgeo" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting subscribers who are within a specific location.",
                      "example" : "ipgeo"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "ipgeoinzip" ],
                      "title" : "Segment Operator",
                      "description" : "Segment members who are within a specific US zip code.",
                      "example" : "ipgeoinzip"
                    },
                    "value" : {
                      "type" : "integer",
                      "title" : "Segment Data",
                      "description" : "The radius of the target location.",
                      "example" : 25
                    },
                    "extra" : {
                      "type" : "integer",
                      "title" : "Extra Data",
                      "description" : "The zip code to segment against.",
                      "example" : 30318
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Unknown Location-Based Segment",
                  "description" : "Segment members whose location information is unknown.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "IPGeoUnknown",
                      "enum" : [ "IPGeoUnknown" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ipgeo" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting subscribers who are within a specific location.",
                      "example" : "ipgeo"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "ipgeounknown" ],
                      "title" : "Segment Operator",
                      "description" : "Segment members for which location information is unknown.",
                      "example" : "ipgeounknown"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Zip Code Location-Based Segment",
                  "description" : "Segment by a specific US ZIP code.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "IPGeoZip",
                      "enum" : [ "IPGeoZip" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "ipgeo" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting subscribers who are within a specific location.",
                      "example" : "ipgeo"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                      "title" : "Segment Operator",
                      "description" : "Segment members who are/are not within a specific US zip code.",
                      "example" : "ipgeonotzip"
                    },
                    "value" : {
                      "type" : "integer",
                      "title" : "Segment Data",
                      "description" : "The 5-digit zip code.",
                      "example" : 30318
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Social Profiles Age Segment",
                  "description" : "Segment by age ranges in Social Profiles data.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SocialAge",
                      "enum" : [ "SocialAge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "social_age" ],
                      "title" : "Segment Field",
                      "description" : "Segment by age ranges in Social Profiles data.",
                      "example" : "social_age"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not the exact criteria listed.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                      "title" : "Segment Operator",
                      "description" : "The age range to segment.",
                      "example" : "35-54"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Social Profiles Gender Segment",
                  "description" : "Segment by listed gender in Social Profiles data.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SocialGender",
                      "enum" : [ "SocialGender" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "social_gender" ],
                      "title" : "Segment Field",
                      "description" : "Segment by listed gender in Social Profiles data.",
                      "example" : "social_gender"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not the exact criteria listed.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "male", "female" ],
                      "title" : "Segment Operator",
                      "description" : "The Social Profiles gender to segment.",
                      "example" : "female"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Social Profiles Influence Segment",
                  "description" : "Segment by influence rating in Social Profiles data.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SocialInfluence",
                      "enum" : [ "SocialInfluence" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "social_influence" ],
                      "title" : "Segment Field",
                      "description" : "Segment by influence rating in Social Profiles data.",
                      "example" : "social_influence"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "greater", "less" ],
                      "title" : "Segment Operator",
                      "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                      "example" : "greater"
                    },
                    "value" : {
                      "type" : "number",
                      "title" : "Segment Operator",
                      "description" : "The Social Profiles influence rating to segment.",
                      "example" : 2
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Social Profiles Social Network Segment",
                  "description" : "Segment by social network in Social Profiles data.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SocialNetworkMember",
                      "enum" : [ "SocialNetworkMember" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "social_network" ],
                      "title" : "Segment Field",
                      "description" : "Segment by social network in Social Profiles data.",
                      "example" : "social_network"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "member", "notmember" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not on a given social network.",
                      "example" : "member"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                      "title" : "Segment Operator",
                      "description" : "The social network to segment against.",
                      "example" : "twitter"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Social Profiles Social Network Follow Segment",
                  "description" : "Segment by social network in Social Profiles data.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SocialNetworkFollow",
                      "enum" : [ "SocialNetworkFollow" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "social_network" ],
                      "title" : "Segment Field",
                      "description" : "Segment by social network in Social Profiles data.",
                      "example" : "social_network"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "follow", "notfollow" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not following a linked account on a given social network.",
                      "example" : "follow"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "twitter_follow" ],
                      "title" : "Segment Operator",
                      "description" : "The social network to segment against.",
                      "example" : "twitter_follow"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Address Merge Field Segment",
                  "description" : "Segment by an address-type merge field.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "AddressMerge",
                      "enum" : [ "AddressMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "An address-type merge field to segment.",
                      "example" : "MMERGE3"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                      "example" : "contains"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The value to segment a text merge field with.",
                      "example" : "Atlanta"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Address/Zip Merge Field Segment",
                  "description" : "Segment by an address-type merge field within a given distance.",
                  "required" : [ "field", "op", "value", "extra" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "ZipMerge",
                      "enum" : [ "ZipMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "An address or zip-type merge field to segment.",
                      "example" : "MMERGE2"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "geoin" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                      "example" : "geoin"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The distance from the city/zip.",
                      "example" : "25"
                    },
                    "extra" : {
                      "type" : "string",
                      "title" : "Segment Extra",
                      "description" : "The city or the zip being used to segment against.",
                      "example" : "30318"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Birthday Merge Field Segment",
                  "description" : "Segment by a contact's birthday.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "BirthdayMerge",
                      "enum" : [ "BirthdayMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "A date merge field to segment.",
                      "example" : "MMERGE4"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "blank", "blank_not" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "A date to segment against (mm/dd).",
                      "example" : "01/30"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Date Merge Field Segment",
                  "description" : "Segment by a given date merge field.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "DateMerge",
                      "enum" : [ "DateMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "A date merge field to segment.",
                      "example" : "MMERGE5"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "A date to segment against.",
                      "example" : "01/30/2015"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Dropdown/Radio Merge Field Segment",
                  "description" : "An individual segment condition",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "SelectMerge",
                      "enum" : [ "SelectMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "A merge field to segment.",
                      "example" : "MMERGE6"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The value to segment a text merge field with.",
                      "example" : "Second Choice"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Text or Number Merge Field Segment",
                  "description" : "Segment by a given text or number merge field.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "TextMerge",
                      "enum" : [ "TextMerge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "title" : "Segment Field",
                      "description" : "A text or number merge field to segment.",
                      "example" : "MMERGE7"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                      "example" : "contains"
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The value to segment a text or number merge field with.",
                      "example" : "Freddie's Jokes"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Email Segment",
                  "description" : "Segment by email address.",
                  "required" : [ "field", "op" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "EmailAddress",
                      "enum" : [ "EmailAddress" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "merge0", "EMAIL" ],
                      "title" : "Segment Field",
                      "description" : "Segmenting based off of a subscriber's email address.",
                      "example" : "EMAIL"
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                      "title" : "Segment Operator",
                      "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Value",
                      "description" : "The value to compare the email against.",
                      "example" : "urist.mcvankab@freddiesjokes.com"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Predicted Gender Segment",
                  "description" : "Segment by predicted gender.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "PredictedGender",
                      "enum" : [ "PredictedGender" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "predicted_gender" ],
                      "title" : "Segment Field",
                      "description" : "Segment by predicted gender."
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is", "not" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not the exact criteria listed.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "male", "female" ],
                      "title" : "Segment Operator",
                      "description" : "The predicted gender to segment.",
                      "example" : "female"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "Predicted Age Segment",
                  "description" : "Segment by predicted age.",
                  "required" : [ "field", "op", "value" ],
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "PredictedAge",
                      "enum" : [ "PredictedAge" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "predicted_age_range" ],
                      "title" : "Segment Field",
                      "description" : "Segment by predicted age."
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "is" ],
                      "title" : "Segment Operator",
                      "description" : "Members who are/not the exact criteria listed.",
                      "example" : "is"
                    },
                    "value" : {
                      "type" : "string",
                      "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                      "title" : "Segment Operator",
                      "description" : "The predicted age to segment.",
                      "example" : "female"
                    }
                  }
                }, {
                  "type" : "object",
                  "title" : "New Subscribers Prebuilt Segment",
                  "description" : "Segment by when people subscribed.",
                  "properties" : {
                    "condition_type" : {
                      "type" : "string",
                      "x-value" : "NewSubscribers",
                      "enum" : [ "NewSubscribers" ]
                    },
                    "field" : {
                      "type" : "string",
                      "enum" : [ "timestamp_opt" ],
                      "title" : "Segment Field",
                      "description" : "Segment by when people subscribed."
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "date_within" ],
                      "title" : "Segment Operator",
                      "description" : "Whe the event took place, namely within a time frame."
                    },
                    "value" : {
                      "type" : "string",
                      "title" : "Segment Data",
                      "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                    }
                  }
                } ],
                "x-discriminator" : {
                  "type" : "string",
                  "propertyName" : "condition_type"
                }
              }
            }
          }
        },
        "description" : "The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions"
      },
      "Events2" : {
        "title" : "Events",
        "type" : "object",
        "properties" : {
          "subscribe" : {
            "title" : "Subscribed",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a list subscriber is added",
            "example" : true
          },
          "unsubscribe" : {
            "title" : "Unsubscribed",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a list member unsubscribes",
            "example" : true
          },
          "profile" : {
            "title" : "Profile Updated",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's profile is updated",
            "example" : true
          },
          "cleaned" : {
            "title" : "Cleaned",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's email address is cleaned from the list",
            "example" : true
          },
          "campaign" : {
            "title" : "Campaign Sent",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a campaign is sent or cancelled",
            "example" : true
          },
          "upemail" : {
            "title" : "Email Address Updated",
            "type" : "boolean",
            "description" : "Whether the webhook is triggered when a subscriber's email address is changed",
            "example" : true
          }
        },
        "description" : "The events that can trigger the webhook and whether they are enabled",
        "readOnly" : true
      },
      "Conditions2" : {
        "title" : "Conditions",
        "type" : "object",
        "properties" : {
          "match" : {
            "title" : "Match",
            "type" : "string",
            "description" : "Match type",
            "enum" : [ "any", "all" ]
          },
          "conditions" : {
            "title" : "Segment Type",
            "type" : "array",
            "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)",
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Aim Segment",
                "description" : "Segment by interaction with a specific campaign.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Aim",
                    "enum" : [ "Aim" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "aim" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a specific campaign.",
                    "example" : "aim"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                    "example" : "open"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Automation Segment",
                "description" : "Segment by interaction with an Automation workflow.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Automation",
                    "enum" : [ "Automation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "automation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with an Automation workflow.",
                    "example" : "automation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id for the automation workflow to segment against.",
                    "example" : "2135217"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Poll Activity Segment",
                "description" : "Segment by poll activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "CampaignPoll",
                    "enum" : [ "CampaignPoll" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "poll" ],
                    "title" : "Segment Field",
                    "description" : "Segment by poll activity.",
                    "example" : "poll"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the poll.",
                    "example" : 409
                  }
                }
              }, {
                "type" : "object",
                "title" : "Conversation Segment",
                "description" : "Segment by interaction with a campaign via Conversations.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Conversation",
                    "enum" : [ "Conversation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "conversation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a campaign via Conversations.",
                    "example" : "conversation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Segment",
                "description" : "Segment by a specific date field.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Date",
                    "enum" : [ "Date" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                    "title" : "Segment Field",
                    "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                    "example" : "timestamp_opt"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                    "title" : "Segment Operator",
                    "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                    "example" : "date"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra Value",
                    "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                    "example" : "2015-01-30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Client Segment",
                "description" : "Segment by use of a particular email client.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailClient",
                    "enum" : [ "EmailClient" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "email_client" ],
                    "title" : "Segment Field",
                    "description" : "Segment by use of a particular email client.",
                    "example" : "email_client"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "client_is", "client_not" ],
                    "title" : "Segment Operator",
                    "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                    "example" : "client_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The name of the email client.",
                    "example" : "Gmail"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Language Segment",
                "description" : "Segment by language.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Language",
                    "enum" : [ "Language" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "language" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's language.",
                    "example" : "language"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's language is or is not set to a specific language.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "A two-letter language identifier.",
                    "example" : "en"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Member Rating Segment",
                "description" : "Segment by member rating.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "MemberRating",
                    "enum" : [ "MemberRating" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "rating" ],
                    "title" : "Segment Field",
                    "description" : "Segment by member rating.",
                    "example" : "rating"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The star rating number to segment against.",
                    "example" : 4
                  }
                }
              }, {
                "type" : "object",
                "title" : "Signup Source Segment",
                "description" : "Segment by signup source.",
                "required" : [ "field", "condition_type", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "enum" : [ "SignupSource" ],
                    "x-value" : "SignupSource",
                    "title" : "Type"
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "source" ],
                    "title" : "Segment Field",
                    "example" : "source"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "source_is", "source_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's signup source was/was not a particular value.",
                    "example" : "source_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The signup source.",
                    "example" : "List Import"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey Monkey Segment",
                "description" : "Segment by interaction with a SurveyMonkey survey.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SurveyMonkey",
                    "enum" : [ "SurveyMonkey" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "survey_monkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a SurveyMonkey survey.",
                    "example" : "survey_monkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The unique ID of the survey monkey survey.",
                    "example" : "32179586"
                  }
                }
              }, {
                "type" : "object",
                "title" : "VIP Segment",
                "description" : "Segment by VIP status.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "VIP",
                    "enum" : [ "VIP" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "gmonkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by VIP status.",
                    "example" : "gmonkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is or is not marked as VIP.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Interests Segment",
                "description" : "Segment by an interest group merge field.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Interests",
                    "enum" : [ "Interests" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                    "example" : "interests-123"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is a part of one, all, or none of the groups.",
                    "example" : "interestcontains"
                  },
                  "value" : {
                    "type" : "array",
                    "title" : "Segment Value",
                    "description" : "An array containing strings, each representing a group id.",
                    "items" : {
                      "type" : "string",
                      "example" : [ "44401", "44405", "44409" ]
                    }
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Category Segment",
                "description" : "Segment by purchases in specific items or categories.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommCategory",
                    "enum" : [ "EcommCategory" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_cat", "ecomm_prod" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases in specific items or categories.",
                    "example" : "ecomm_cat"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The ecommerce category/item information.",
                    "example" : "Product"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Number Segment",
                "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommNumber",
                    "enum" : [ "EcommNumber" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                    "title" : "Segment Field",
                    "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                    "example" : "ecomm_orders"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Segment",
                "description" : "Segment by whether someone has purchased anything.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommPurchased",
                    "enum" : [ "EcommPurchased" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_purchased" ],
                    "title" : "Segment Field",
                    "description" : "Segment by whether someone has purchased anything.",
                    "example" : "ecomm_purchased"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Spent Segment",
                "description" : "Segment by amount spent on a single order or across all orders.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommSpent",
                    "enum" : [ "EcommSpent" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                    "title" : "Segment Field",
                    "description" : "Segment by amount spent on a single order or across all orders.",
                    "example" : "ecomm_spent_one"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent 'more' or 'less' than then specified value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The total amount a member spent.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Store Segment",
                "description" : "Segment by purchases from a specific store.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommStore",
                    "enum" : [ "EcommStore" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_store" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases from a specific store.",
                    "example" : "ecomm_store"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have or have not purchased from a specific store.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Operator",
                    "description" : "The store id to segment against.",
                    "example" : "289"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Activity Segment",
                "description" : "Segment by Goal activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalActivity",
                    "enum" : [ "GoalActivity" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal" ],
                    "title" : "Segment Field",
                    "description" : "Segment by Goal activity.",
                    "example" : "goal"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The URL to check Goal activity against."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Timestamp Segment",
                "description" : "Segment by most recent interaction with a website.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalTimestamp",
                    "enum" : [ "GoalTimestamp" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal_last_visited" ],
                    "title" : "Segment Field",
                    "description" : "Segment by most recent interaction with a website.",
                    "example" : "goal_last_visited"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The date to check Goal activity against.",
                    "example" : "2015-07-20 19:45:21"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Similar Subscribers Segment Member Segment",
                "description" : "Segment by similar subscribers.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "FuzzySegment",
                    "enum" : [ "FuzzySegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by similar subscribers.",
                    "example" : "fuzzy_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_is", "fuzzy_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                    "example" : "fuzzy_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the 'similar subscribers' segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Static Segment Member Segment",
                "description" : "Segment by a given static segment.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "StaticSegment",
                    "enum" : [ "StaticSegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "static_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by a given static segment.",
                    "example" : "static_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "static_is", "static_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a static segment.",
                    "example" : "static_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the static segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Location-Based Segment",
                "description" : "Segment by a specific country or US state.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoCountryState",
                    "enum" : [ "IPGeoCountryState" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific country or US state.",
                    "example" : "ipgeocountry"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The two-letter country code or US state abbreviation.",
                    "example" : "US"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Geolocation Segment",
                "description" : "Segment by a specific geographic region.",
                "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoIn",
                    "enum" : [ "IPGeoIn" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoin", "ipgeonotin" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific geographic region.",
                    "example" : "ipgeoin"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 42
                  },
                  "addr" : {
                    "type" : "string",
                    "title" : "Segment Location Address",
                    "description" : "The address of the target location.",
                    "example" : "Atlanta, GA, USA"
                  },
                  "lat" : {
                    "type" : "string",
                    "title" : "Segment Location Latitude",
                    "description" : "The latitude of the target location.",
                    "example" : "33.7489954"
                  },
                  "lng" : {
                    "type" : "string",
                    "title" : "Segment Location Longitude",
                    "description" : "The longitude of the target location.",
                    "example" : "-84.3879824"
                  }
                }
              }, {
                "type" : "object",
                "title" : "US Zip Code Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoInZip",
                    "enum" : [ "IPGeoInZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoinzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific US zip code.",
                    "example" : "ipgeoinzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 25
                  },
                  "extra" : {
                    "type" : "integer",
                    "title" : "Extra Data",
                    "description" : "The zip code to segment against.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Unknown Location-Based Segment",
                "description" : "Segment members whose location information is unknown.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoUnknown",
                    "enum" : [ "IPGeoUnknown" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeounknown" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members for which location information is unknown.",
                    "example" : "ipgeounknown"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Zip Code Location-Based Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoZip",
                    "enum" : [ "IPGeoZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are/are not within a specific US zip code.",
                    "example" : "ipgeonotzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The 5-digit zip code.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Age Segment",
                "description" : "Segment by age ranges in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialAge",
                    "enum" : [ "SocialAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_age" ],
                    "title" : "Segment Field",
                    "description" : "Segment by age ranges in Social Profiles data.",
                    "example" : "social_age"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                    "title" : "Segment Operator",
                    "description" : "The age range to segment.",
                    "example" : "35-54"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Gender Segment",
                "description" : "Segment by listed gender in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialGender",
                    "enum" : [ "SocialGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by listed gender in Social Profiles data.",
                    "example" : "social_gender"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Influence Segment",
                "description" : "Segment by influence rating in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialInfluence",
                    "enum" : [ "SocialInfluence" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_influence" ],
                    "title" : "Segment Field",
                    "description" : "Segment by influence rating in Social Profiles data.",
                    "example" : "social_influence"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles influence rating to segment.",
                    "example" : 2
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkMember",
                    "enum" : [ "SocialNetworkMember" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not on a given social network.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Follow Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkFollow",
                    "enum" : [ "SocialNetworkFollow" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "follow", "notfollow" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not following a linked account on a given social network.",
                    "example" : "follow"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter_follow" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter_follow"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address Merge Field Segment",
                "description" : "Segment by an address-type merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "AddressMerge",
                    "enum" : [ "AddressMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address-type merge field to segment.",
                    "example" : "MMERGE3"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Atlanta"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address/Zip Merge Field Segment",
                "description" : "Segment by an address-type merge field within a given distance.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "ZipMerge",
                    "enum" : [ "ZipMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address or zip-type merge field to segment.",
                    "example" : "MMERGE2"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "geoin" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                    "example" : "geoin"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The distance from the city/zip.",
                    "example" : "25"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra",
                    "description" : "The city or the zip being used to segment against.",
                    "example" : "30318"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Birthday Merge Field Segment",
                "description" : "Segment by a contact's birthday.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "BirthdayMerge",
                    "enum" : [ "BirthdayMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE4"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against (mm/dd).",
                    "example" : "01/30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Merge Field Segment",
                "description" : "Segment by a given date merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "DateMerge",
                    "enum" : [ "DateMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE5"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against.",
                    "example" : "01/30/2015"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Dropdown/Radio Merge Field Segment",
                "description" : "An individual segment condition",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SelectMerge",
                    "enum" : [ "SelectMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A merge field to segment.",
                    "example" : "MMERGE6"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Second Choice"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Text or Number Merge Field Segment",
                "description" : "Segment by a given text or number merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "TextMerge",
                    "enum" : [ "TextMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A text or number merge field to segment.",
                    "example" : "MMERGE7"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text or number merge field with.",
                    "example" : "Freddie's Jokes"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Segment",
                "description" : "Segment by email address.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailAddress",
                    "enum" : [ "EmailAddress" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "merge0", "EMAIL" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's email address.",
                    "example" : "EMAIL"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to compare the email against.",
                    "example" : "urist.mcvankab@freddiesjokes.com"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Gender Segment",
                "description" : "Segment by predicted gender.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedGender",
                    "enum" : [ "PredictedGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted gender."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Age Segment",
                "description" : "Segment by predicted age.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedAge",
                    "enum" : [ "PredictedAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_age_range" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted age."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted age to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "New Subscribers Prebuilt Segment",
                "description" : "Segment by when people subscribed.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "NewSubscribers",
                    "enum" : [ "NewSubscribers" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt" ],
                    "title" : "Segment Field",
                    "description" : "Segment by when people subscribed."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "date_within" ],
                    "title" : "Segment Operator",
                    "description" : "Whe the event took place, namely within a time frame."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                  }
                }
              } ],
              "x-discriminator" : {
                "type" : "string",
                "propertyName" : "condition_type"
              }
            }
          }
        },
        "description" : "The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions"
      },
      "SentTo" : {
        "title" : "Sent-To",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "sent_to" : {
            "title" : "Sent To",
            "type" : "array",
            "description" : "An array of objects, each representing a campaign recipient",
            "items" : {
              "$ref" : "#/components/schemas/SentTo2"
            },
            "x-ballerina-name" : "sentTo"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of subscribers who were sent a specific campaign"
      },
      "ListContact" : {
        "title" : "List Contact",
        "required" : [ "address1", "city", "company", "country" ],
        "type" : "object",
        "properties" : {
          "zip" : {
            "title" : "Postal Code",
            "type" : "string",
            "description" : "The postal or zip code for the list contact"
          },
          "country" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "A two-character ISO3166 country code. Defaults to US if invalid"
          },
          "address2" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "city" : {
            "title" : "City",
            "type" : "string",
            "description" : "The city for the list contact"
          },
          "phone" : {
            "title" : "Phone Number",
            "type" : "string",
            "description" : "The phone number for the list contact"
          },
          "address1" : {
            "title" : "Address",
            "type" : "string",
            "description" : "The street address for the list contact"
          },
          "company" : {
            "title" : "Company Name",
            "type" : "string",
            "description" : "The company name for the list"
          },
          "state" : {
            "title" : "State",
            "type" : "string",
            "description" : "The state for the list contact"
          }
        },
        "description" : "[Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws"
      },
      "ClickDetailReport" : {
        "title" : "Click Detail Report",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "urls_clicked" : {
            "title" : "URLs Clicked",
            "type" : "array",
            "description" : "An array of objects, each representing a specific URL contained in the campaign",
            "items" : {
              "$ref" : "#/components/schemas/ClickDetailReport2"
            },
            "x-ballerina-name" : "urlsClicked"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of URLs and unique IDs included in HTML and plain-text versions of a campaign"
      },
      "Members" : {
        "title" : "Members",
        "type" : "object",
        "properties" : {
          "full_search" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PartialMatches"
            } ],
            "x-ballerina-name" : "fullSearch"
          },
          "exact_matches" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExactMatches"
            } ],
            "x-ballerina-name" : "exactMatches"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        },
        "description" : "Members found for given search term"
      },
      "Interest1" : {
        "title" : "Interest",
        "type" : "object",
        "properties" : {
          "category_id" : {
            "title" : "Interest Category ID",
            "type" : "string",
            "description" : "The id for the interest category",
            "readOnly" : true,
            "x-ballerina-name" : "categoryId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID for the list that this interest belongs to",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "subscriber_count" : {
            "title" : "Subscriber Count",
            "type" : "string",
            "description" : "The number of subscribers associated with this interest",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberCount"
          },
          "name" : {
            "title" : "Interest Name",
            "type" : "string",
            "description" : "The name of the interest. This can be shown publicly on a subscription form"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The display order for interests",
            "x-ballerina-name" : "displayOrder"
          },
          "id" : {
            "title" : "Interest ID",
            "type" : "string",
            "description" : "The ID for the interest",
            "readOnly" : true
          }
        },
        "description" : "Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application"
      },
      "SignupFormHeaderOptions" : {
        "title" : "Signup form header options",
        "type" : "object",
        "properties" : {
          "image_height" : {
            "title" : "Image height",
            "type" : "string",
            "description" : "Image height, in pixels",
            "example" : "200",
            "x-ballerina-name" : "imageHeight"
          },
          "image_link" : {
            "title" : "Image Link",
            "type" : "string",
            "description" : "The URL that the header image will link to",
            "example" : "gotothisimage.com",
            "x-ballerina-name" : "imageLink"
          },
          "image_align" : {
            "title" : "Image align",
            "type" : "string",
            "description" : "Image alignment",
            "example" : "center",
            "enum" : [ "none", "left", "center", "right" ],
            "x-ballerina-name" : "imageAlign"
          },
          "image_border_color" : {
            "title" : "Image border color",
            "type" : "string",
            "description" : "Image border color",
            "example" : "#896d6d",
            "x-ballerina-name" : "imageBorderColor"
          },
          "image_url" : {
            "title" : "Header Image URL",
            "type" : "string",
            "description" : "Header image URL",
            "example" : "http://gallery.mailchimp.com/332310cb9a420a9e7fea2858a/images/2491208c-9458-4834-a708-fef4ee736472.png",
            "x-ballerina-name" : "imageUrl"
          },
          "image_border_style" : {
            "title" : "Image border style",
            "type" : "string",
            "description" : "Image border style",
            "example" : "solid",
            "enum" : [ "none", "solid", "dotted", "dashed", "double", "groove", "outset", "inset", "ridge" ],
            "x-ballerina-name" : "imageBorderStyle"
          },
          "image_alt" : {
            "title" : "Image Alt",
            "type" : "string",
            "description" : "Alt text for the image",
            "example" : "This is an image",
            "x-ballerina-name" : "imageAlt"
          },
          "text" : {
            "title" : "Header Text",
            "type" : "string",
            "description" : "Header text",
            "example" : "Header Text goes here"
          },
          "image_width" : {
            "title" : "Image width",
            "type" : "string",
            "description" : "Image width, in pixels",
            "example" : "800",
            "x-ballerina-name" : "imageWidth"
          },
          "image_target" : {
            "title" : "Image target",
            "type" : "string",
            "description" : "Image link target",
            "example" : "_blank",
            "enum" : [ "_blank", "null" ],
            "x-ballerina-name" : "imageTarget"
          },
          "image_border_width" : {
            "title" : "Image border width",
            "type" : "string",
            "description" : "Image border width",
            "example" : "2",
            "x-ballerina-name" : "imageBorderWidth"
          }
        },
        "description" : "Options for customizing your signup form header"
      },
      "EmailClients" : {
        "title" : "Email Clients",
        "type" : "object",
        "properties" : {
          "clients" : {
            "title" : "Email Clients",
            "type" : "array",
            "description" : "An array of top email clients",
            "items" : {
              "$ref" : "#/components/schemas/EmailClient"
            }
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "The top email clients based on user-agent strings"
      },
      "ECommerceStore1" : {
        "title" : "E-commerce Store",
        "type" : "object",
        "properties" : {
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)",
            "x-ballerina-name" : "isSyncing"
          },
          "automations" : {
            "$ref" : "#/components/schemas/Automations"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change",
            "readOnly" : true,
            "example" : "1a2df69511",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the store",
            "example" : "Eastern"
          },
          "primary_locale" : {
            "title" : "Primary Locale",
            "type" : "string",
            "description" : "The primary locale for the store. For example: `en`, `de`, etc",
            "example" : "fr",
            "x-ballerina-name" : "primaryLocale"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the store was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list connected to the store, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "platform" : {
            "title" : "Platform",
            "type" : "string",
            "description" : "The e-commerce platform of the store"
          },
          "currency_code" : {
            "title" : "Currency",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          },
          "money_format" : {
            "title" : "Money Format",
            "type" : "string",
            "description" : "The currency format for the store. For example: `$`, `£`, etc",
            "example" : "$",
            "x-ballerina-name" : "moneyFormat"
          },
          "connected_site" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConnectedSite3"
            } ],
            "x-ballerina-name" : "connectedSite"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The email address for the store",
            "example" : "freddie@mailchimp.com",
            "x-ballerina-name" : "emailAddress"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the store was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "phone" : {
            "title" : "Phone",
            "type" : "string",
            "description" : "The store phone number",
            "example" : "+16155550128"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The store domain.  The store domain must be unique within a user account",
            "example" : "example.com"
          },
          "name" : {
            "title" : "Store Name",
            "type" : "string",
            "description" : "The name of the store",
            "example" : "Freddie's Cat Hat Emporium"
          },
          "id" : {
            "title" : "Store Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "readOnly" : true,
            "example" : "example_store"
          }
        },
        "description" : "An individual store in an account"
      },
      "ECommerceStore2" : {
        "title" : "E-commerce Store",
        "type" : "object",
        "properties" : {
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)",
            "x-ballerina-name" : "isSyncing"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The email address for the store",
            "example" : "freddie@mailchimp.com",
            "x-ballerina-name" : "emailAddress"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "phone" : {
            "title" : "Phone",
            "type" : "string",
            "description" : "The store phone number",
            "example" : "+16155550128"
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the store",
            "example" : "Eastern"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The store domain",
            "example" : "example.com"
          },
          "name" : {
            "title" : "Store Name",
            "type" : "string",
            "description" : "The name of the store",
            "example" : "Freddie's Cat Hat Emporium"
          },
          "primary_locale" : {
            "title" : "Primary Locale",
            "type" : "string",
            "description" : "The primary locale for the store. For example: `en`, `de`, etc",
            "example" : "fr",
            "x-ballerina-name" : "primaryLocale"
          },
          "platform" : {
            "title" : "Platform",
            "type" : "string",
            "description" : "The e-commerce platform of the store"
          },
          "currency_code" : {
            "title" : "Currency",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          },
          "money_format" : {
            "title" : "Money Format",
            "type" : "string",
            "description" : "The currency format for the store. For example: `$`, `£`, etc",
            "example" : "$",
            "x-ballerina-name" : "moneyFormat"
          }
        },
        "description" : "An individual store in an account"
      },
      "ECommerceStore3" : {
        "title" : "E-commerce Store",
        "type" : "object",
        "properties" : {
          "is_syncing" : {
            "title" : "Is Syncing",
            "type" : "boolean",
            "description" : "Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)",
            "x-ballerina-name" : "isSyncing"
          },
          "automations" : {
            "$ref" : "#/components/schemas/Automations"
          },
          "address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change",
            "readOnly" : true,
            "example" : "1a2df69511",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "timezone" : {
            "title" : "Timezone",
            "type" : "string",
            "description" : "The timezone for the store",
            "example" : "Eastern"
          },
          "primary_locale" : {
            "title" : "Primary Locale",
            "type" : "string",
            "description" : "The primary locale for the store. For example: `en`, `de`, etc",
            "example" : "fr",
            "x-ballerina-name" : "primaryLocale"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the store was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list connected to the store, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "platform" : {
            "title" : "Platform",
            "type" : "string",
            "description" : "The e-commerce platform of the store"
          },
          "currency_code" : {
            "title" : "Currency",
            "type" : "string",
            "description" : "The three-letter ISO 4217 code for the currency that the store accepts",
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          },
          "money_format" : {
            "title" : "Money Format",
            "type" : "string",
            "description" : "The currency format for the store. For example: `$`, `£`, etc",
            "example" : "$",
            "x-ballerina-name" : "moneyFormat"
          },
          "connected_site" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConnectedSite3"
            } ],
            "x-ballerina-name" : "connectedSite"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The email address for the store",
            "example" : "freddie@mailchimp.com",
            "x-ballerina-name" : "emailAddress"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the store was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "phone" : {
            "title" : "Phone",
            "type" : "string",
            "description" : "The store phone number",
            "example" : "+16155550128"
          },
          "domain" : {
            "title" : "Domain",
            "type" : "string",
            "description" : "The store domain.  The store domain must be unique within a user account",
            "example" : "example.com"
          },
          "name" : {
            "title" : "Store Name",
            "type" : "string",
            "description" : "The name of the store",
            "example" : "Freddie's Cat Hat Emporium"
          },
          "id" : {
            "title" : "Store Foreign ID",
            "type" : "string",
            "description" : "The unique identifier for the store",
            "readOnly" : true,
            "example" : "example_store"
          }
        },
        "description" : "An individual store in an account"
      },
      "RemovedSubscribers" : {
        "title" : "Removed Subscribers",
        "type" : "object",
        "properties" : {
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "subscribers" : {
            "title" : "Trigger",
            "type" : "array",
            "description" : "An array of objects, each representing a subscriber who was removed from an Automation workflow",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/SubscriberRemovedFromAutomationWorkflow1"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A summary of the subscribers who were removed from an Automation workflow"
      },
      "Interest2" : {
        "title" : "Interest",
        "type" : "object",
        "properties" : {
          "category_id" : {
            "title" : "Interest Category ID",
            "type" : "string",
            "description" : "The id for the interest category",
            "readOnly" : true,
            "x-ballerina-name" : "categoryId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The ID for the list that this interest belongs to",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "subscriber_count" : {
            "title" : "Subscriber Count",
            "type" : "string",
            "description" : "The number of subscribers associated with this interest",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberCount"
          },
          "name" : {
            "title" : "Interest Name",
            "type" : "string",
            "description" : "The name of the interest. This can be shown publicly on a subscription form"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The display order for interests",
            "x-ballerina-name" : "displayOrder"
          },
          "id" : {
            "title" : "Interest ID",
            "type" : "string",
            "description" : "The ID for the interest",
            "readOnly" : true
          }
        },
        "description" : "Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application"
      },
      "ECommerceProductVariant3" : {
        "title" : "E-commerce Product Variant",
        "type" : "object",
        "properties" : {
          "inventory_quantity" : {
            "title" : "Inventory Quantity",
            "type" : "integer",
            "description" : "The inventory quantity of a product variant",
            "x-ballerina-name" : "inventoryQuantity"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "The visibility of a product variant"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the product was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "backorders" : {
            "title" : "Backorders",
            "type" : "string",
            "description" : "The backorders of a product variant"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a product variant"
          },
          "image_url" : {
            "title" : "Image URL",
            "type" : "string",
            "description" : "The image URL for a product variant",
            "x-ballerina-name" : "imageUrl"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the product was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant",
            "readOnly" : true
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product variant",
            "example" : "Cat Hat"
          },
          "sku" : {
            "title" : "SKU",
            "type" : "string",
            "description" : "The stock keeping unit (SKU) of a product variant"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product variant"
          }
        },
        "description" : "Information about a specific product variant"
      },
      "WeeklyClicksAndVisitsDataClicks" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "title" : "Date",
            "type" : "string",
            "readOnly" : true,
            "example" : "2018-04-25"
          },
          "val" : {
            "title" : "Value",
            "type" : "integer",
            "readOnly" : true,
            "example" : 23
          }
        }
      },
      "ECommerceProductVariant2" : {
        "title" : "E-commerce Product Variant",
        "type" : "object",
        "properties" : {
          "inventory_quantity" : {
            "title" : "Inventory Quantity",
            "type" : "integer",
            "description" : "The inventory quantity of a product variant",
            "x-ballerina-name" : "inventoryQuantity"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "The visibility of a product variant"
          },
          "updated_at" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time the product was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "updatedAt"
          },
          "backorders" : {
            "title" : "Backorders",
            "type" : "string",
            "description" : "The backorders of a product variant"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a product variant"
          },
          "image_url" : {
            "title" : "Image URL",
            "type" : "string",
            "description" : "The image URL for a product variant",
            "x-ballerina-name" : "imageUrl"
          },
          "created_at" : {
            "title" : "Creation Time",
            "type" : "string",
            "description" : "The date and time the product was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2015-07-15T19:28:00Z",
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant",
            "readOnly" : true
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product variant",
            "example" : "Cat Hat"
          },
          "sku" : {
            "title" : "SKU",
            "type" : "string",
            "description" : "The stock keeping unit (SKU) of a product variant"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product variant"
          }
        },
        "description" : "Information about a specific product variant"
      },
      "ListStats" : {
        "title" : "List Stats",
        "type" : "object",
        "properties" : {
          "sub_rate" : {
            "title" : "Average Subscription Rate",
            "type" : "number",
            "description" : "The average number of subscriptions per month for the list",
            "readOnly" : true,
            "x-ballerina-name" : "subRate"
          },
          "proxy_excluded_open_rate" : {
            "title" : "Proxy Excluded Open Rate",
            "type" : "number",
            "description" : "The average unique open rate (a percentage represented as a number between 0 and 100) per campaign for the list, excluding opens from email clients that use proxies",
            "readOnly" : true,
            "x-ballerina-name" : "proxyExcludedOpenRate"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "unsub_rate" : {
            "title" : "Average Unsubscription Rate",
            "type" : "number",
            "description" : "The average number of unsubscriptions per month for the list",
            "readOnly" : true,
            "x-ballerina-name" : "unsubRate"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The average unique open rate (a percentage represented as a number between 0 and 100) per campaign for the list",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list"
      },
      "List1" : {
        "title" : "List",
        "required" : [ "list_id" ],
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          }
        },
        "description" : "List settings for the campaign"
      },
      "ECommerceProductVariant1" : {
        "title" : "E-commerce Product Variant",
        "type" : "object",
        "properties" : {
          "inventory_quantity" : {
            "title" : "Inventory Quantity",
            "type" : "integer",
            "description" : "The inventory quantity of a product variant",
            "x-ballerina-name" : "inventoryQuantity"
          },
          "visibility" : {
            "title" : "Visibility",
            "type" : "string",
            "description" : "The visibility of a product variant"
          },
          "backorders" : {
            "title" : "Backorders",
            "type" : "string",
            "description" : "The backorders of a product variant"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a product variant"
          },
          "image_url" : {
            "title" : "Image URL",
            "type" : "string",
            "description" : "The image URL for a product variant",
            "x-ballerina-name" : "imageUrl"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "description" : "The title of a product variant",
            "example" : "Cat Hat"
          },
          "sku" : {
            "title" : "SKU",
            "type" : "string",
            "description" : "The stock keeping unit (SKU) of a product variant"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "The URL for a product variant"
          }
        },
        "description" : "Information about a specific product variant"
      },
      "List2" : {
        "title" : "List",
        "required" : [ "list_id" ],
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions1"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          }
        },
        "description" : "List settings for the campaign"
      },
      "List3" : {
        "title" : "List",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Segment Name",
            "type" : "string",
            "description" : "The name of the segment"
          },
          "options" : {
            "$ref" : "#/components/schemas/Conditions"
          },
          "static_segment" : {
            "title" : "Static Segment",
            "type" : "array",
            "description" : "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "staticSegment"
          }
        },
        "description" : "Information about a specific list segment"
      },
      "ConversationMessage1" : {
        "title" : "Conversation Message",
        "type" : "object",
        "properties" : {
          "from_email" : {
            "title" : "From Email",
            "type" : "string",
            "description" : "A label representing the email of the sender of this message",
            "x-ballerina-name" : "fromEmail"
          },
          "read" : {
            "title" : "Read",
            "type" : "boolean",
            "description" : "Whether this message has been marked as read"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "integer",
            "description" : "The list's web ID",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "conversation_id" : {
            "title" : "Conversation ID",
            "type" : "string",
            "description" : "A string that identifies this message's conversation",
            "readOnly" : true,
            "x-ballerina-name" : "conversationId"
          },
          "subject" : {
            "title" : "Subject",
            "type" : "string",
            "description" : "The subject of this message"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this message",
            "readOnly" : true
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "description" : "The plain-text content of the message"
          },
          "from_label" : {
            "title" : "From Label",
            "type" : "string",
            "description" : "A label representing the sender of this message",
            "readOnly" : true,
            "x-ballerina-name" : "fromLabel"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time the message was either sent or received in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account"
      },
      "List4" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "updated_at" : {
            "title" : "Date Updated",
            "type" : "string",
            "description" : "The date and time the segment was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Segment Name",
            "type" : "string",
            "description" : "The name of the segment"
          },
          "options" : {
            "$ref" : "#/components/schemas/Conditions2"
          },
          "created_at" : {
            "title" : "Date Created",
            "type" : "string",
            "description" : "The date and time the segment was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Segment ID",
            "type" : "integer",
            "description" : "The unique id for the segment",
            "readOnly" : true
          },
          "member_count" : {
            "title" : "Member Count",
            "type" : "integer",
            "description" : "The number of active subscribers currently included in the segment",
            "readOnly" : true,
            "x-ballerina-name" : "memberCount"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs)",
            "readOnly" : true,
            "enum" : [ "saved", "static", "fuzzy" ]
          }
        },
        "description" : "Information about a specific segment"
      },
      "List5" : {
        "title" : "List",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "Segment Name",
            "type" : "string",
            "description" : "The name of the segment"
          },
          "options" : {
            "$ref" : "#/components/schemas/Conditions1"
          },
          "static_segment" : {
            "title" : "Static Segment",
            "type" : "array",
            "description" : "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the `options` field",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "staticSegment"
          }
        },
        "description" : "Information about a specific list segment"
      },
      "List6" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions1"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          },
          "segment_text" : {
            "title" : "Segment Text",
            "type" : "string",
            "description" : "A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML",
            "readOnly" : true,
            "x-ballerina-name" : "segmentText"
          },
          "recipient_count" : {
            "title" : "Recipient Count",
            "type" : "integer",
            "description" : "Count of the recipients on the associated list. Formatted as an integer",
            "readOnly" : true,
            "x-ballerina-name" : "recipientCount"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          }
        },
        "description" : "List settings for the campaign"
      },
      "List7" : {
        "title" : "List",
        "required" : [ "list_id" ],
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions1"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          },
          "segment_text" : {
            "title" : "Segment Text",
            "type" : "string",
            "description" : "A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML",
            "readOnly" : true,
            "x-ballerina-name" : "segmentText"
          },
          "recipient_count" : {
            "title" : "Recipient Count",
            "type" : "integer",
            "description" : "Count of the recipients on the associated list. Formatted as an integer",
            "readOnly" : true,
            "x-ballerina-name" : "recipientCount"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          }
        },
        "description" : "List settings for the campaign"
      },
      "List8" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions1"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          },
          "segment_text" : {
            "title" : "Segment Text",
            "type" : "string",
            "description" : "A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML",
            "readOnly" : true,
            "x-ballerina-name" : "segmentText"
          },
          "recipient_count" : {
            "title" : "Recipient Count",
            "type" : "integer",
            "description" : "Count of the recipients on the associated list. Formatted as an integer",
            "readOnly" : true,
            "x-ballerina-name" : "recipientCount"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          }
        },
        "description" : "List settings for the campaign"
      },
      "List9" : {
        "title" : "List",
        "type" : "object",
        "properties" : {
          "updated_at" : {
            "title" : "Date Updated",
            "type" : "string",
            "description" : "The date and time the segment was last updated in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Segment Name",
            "type" : "string",
            "description" : "The name of the segment"
          },
          "options" : {
            "$ref" : "#/components/schemas/Conditions2"
          },
          "created_at" : {
            "title" : "Date Created",
            "type" : "string",
            "description" : "The date and time the segment was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "Segment ID",
            "type" : "integer",
            "description" : "The unique id for the segment",
            "readOnly" : true
          },
          "member_count" : {
            "title" : "Member Count",
            "type" : "integer",
            "description" : "The number of active subscribers currently included in the segment",
            "readOnly" : true,
            "x-ballerina-name" : "memberCount"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs)",
            "readOnly" : true,
            "enum" : [ "saved", "static", "fuzzy" ]
          }
        },
        "description" : "Information about a specific segment"
      },
      "FacebookLikes" : {
        "title" : "Facebook Likes",
        "type" : "object",
        "properties" : {
          "facebook_likes" : {
            "title" : "Facebook Likes",
            "type" : "integer",
            "description" : "The number of Facebook likes for the campaign",
            "x-ballerina-name" : "facebookLikes"
          },
          "unique_likes" : {
            "title" : "Unique Likes",
            "type" : "integer",
            "description" : "The number of unique likes",
            "x-ballerina-name" : "uniqueLikes"
          },
          "recipient_likes" : {
            "title" : "Recipient Likes",
            "type" : "integer",
            "description" : "The number of recipients who liked the campaign on Facebook",
            "x-ballerina-name" : "recipientLikes"
          }
        },
        "description" : "An object describing campaign engagement on Facebook"
      },
      "MergeFieldOptions1" : {
        "title" : "Merge Field Options",
        "type" : "object",
        "properties" : {
          "date_format" : {
            "title" : "Date Type",
            "type" : "string",
            "description" : "In a date or birthday field, the format of the date",
            "x-ballerina-name" : "dateFormat"
          },
          "choices" : {
            "title" : "Choices",
            "type" : "array",
            "description" : "In a radio or dropdown non-group field, the available options for members to pick from",
            "example" : [ "First Choice", "Second Choice", "Third Choice" ],
            "items" : {
              "type" : "string"
            }
          },
          "default_country" : {
            "title" : "Default Country",
            "type" : "integer",
            "description" : "In an address field, the default country code if none supplied",
            "x-ballerina-name" : "defaultCountry"
          },
          "phone_format" : {
            "title" : "Phone Type",
            "type" : "string",
            "description" : "In a phone field, the phone number type: US or International",
            "x-ballerina-name" : "phoneFormat"
          }
        },
        "description" : "Extra options for some merge field types"
      },
      "MergeFieldOptions2" : {
        "title" : "Merge Field Options",
        "type" : "object",
        "properties" : {
          "size" : {
            "title" : "Text Field Size",
            "type" : "integer",
            "description" : "In a text field, the default length of the text field",
            "readOnly" : true
          },
          "date_format" : {
            "title" : "Date Type",
            "type" : "string",
            "description" : "In a date or birthday field, the format of the date",
            "x-ballerina-name" : "dateFormat"
          },
          "choices" : {
            "title" : "Choices",
            "type" : "array",
            "description" : "In a radio or dropdown non-group field, the available options for contacts to pick from",
            "example" : [ "First Choice", "Second Choice", "Third Choice" ],
            "items" : {
              "type" : "string"
            }
          },
          "default_country" : {
            "title" : "Default Country",
            "type" : "integer",
            "description" : "In an address field, the default country code if none supplied",
            "x-ballerina-name" : "defaultCountry"
          },
          "phone_format" : {
            "title" : "Phone Type",
            "type" : "string",
            "description" : "In a phone field, the phone number type: US or International",
            "x-ballerina-name" : "phoneFormat"
          }
        },
        "description" : "Extra options for some merge field types"
      },
      "SignupForm1" : {
        "title" : "Signup Form",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The signup form's list id",
            "readOnly" : true,
            "example" : "4ca5becb8d",
            "x-ballerina-name" : "listId"
          },
          "contents" : {
            "title" : "Signup form body content",
            "type" : "array",
            "description" : "The signup form body content",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfContentForListSignupForms"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "header" : {
            "$ref" : "#/components/schemas/SignupFormHeaderOptions"
          },
          "signup_form_url" : {
            "title" : "Signup form URL",
            "type" : "string",
            "description" : "Signup form URL",
            "x-ballerina-name" : "signupFormUrl"
          },
          "styles" : {
            "title" : "Signup Form element style",
            "type" : "array",
            "description" : "An array of objects, each representing an element style for the signup form",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfElementStyleForListSignupForms"
            }
          }
        },
        "description" : "List signup form"
      },
      "SignupForm2" : {
        "title" : "Signup Form",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The signup form's list id",
            "readOnly" : true,
            "example" : "4ca5becb8d",
            "x-ballerina-name" : "listId"
          },
          "contents" : {
            "title" : "Signup form body content",
            "type" : "array",
            "description" : "The signup form body content",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfContentForListSignupForms"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "header" : {
            "$ref" : "#/components/schemas/SignupFormHeaderOptions"
          },
          "signup_form_url" : {
            "title" : "Signup form URL",
            "type" : "string",
            "description" : "Signup form URL",
            "x-ballerina-name" : "signupFormUrl"
          },
          "styles" : {
            "title" : "Signup Form element style",
            "type" : "array",
            "description" : "An array of objects, each representing an element style for the signup form",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfElementStyleForListSignupForms"
            }
          }
        },
        "description" : "List signup form"
      },
      "InlineResponse20011InlineResponse20011InlineResponse20011InlineResponse20011AllOf1234" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        }
      },
      "BatchWebhooks" : {
        "title" : "Batch Webhooks",
        "type" : "object",
        "properties" : {
          "webhooks" : {
            "title" : "Webhooks",
            "type" : "array",
            "description" : "An array of objects, each representing a Batch Webhook",
            "items" : {
              "$ref" : "#/components/schemas/BatchWebhook3"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Manage webhooks for batch requests"
      },
      "ClickDetailMembers" : {
        "title" : "Click Detail Members",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "members" : {
            "title" : "Lists",
            "type" : "array",
            "description" : "An array of objects, each representing a member who clicked a specific link within a campaign",
            "items" : {
              "$ref" : "#/components/schemas/ClickDetailMember1"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A collection of members who clicked on a specific link within a campaign"
      },
      "BatchAddremoveListMembersTofromStaticSegmentErrors" : {
        "type" : "object",
        "properties" : {
          "email_addresses" : {
            "title" : "Email addresses added to the static segment or removed",
            "type" : "array",
            "description" : "Email addresses added to the static segment or removed",
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "emailAddresses"
          },
          "error" : {
            "title" : "Error message",
            "type" : "string",
            "description" : "The error message indicating why the email addresses could not be added or updated"
          }
        }
      },
      "UploadArchive" : {
        "title" : "Upload Archive",
        "required" : [ "archive_content" ],
        "type" : "object",
        "properties" : {
          "archive_content" : {
            "title" : "Archive Content",
            "type" : "string",
            "description" : "The base64-encoded representation of the archive file",
            "x-ballerina-name" : "archiveContent"
          },
          "archive_type" : {
            "title" : "Archive Type",
            "type" : "string",
            "description" : "The type of encoded file. Defaults to zip",
            "enum" : [ "zip", "tar.gz", "tar.bz2", "tar", "tgz", "tbz" ],
            "x-ballerina-name" : "archiveType"
          }
        },
        "description" : "Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/)"
      },
      "ABTestOptions1Combinations" : {
        "type" : "object",
        "properties" : {
          "subject_line" : {
            "title" : "Subject Line",
            "type" : "integer",
            "description" : "The index of `variate_settings.subject_lines` used",
            "x-ballerina-name" : "subjectLine"
          },
          "send_time" : {
            "title" : "Send Time",
            "type" : "integer",
            "description" : "The index of `variate_settings.send_times` used",
            "x-ballerina-name" : "sendTime"
          },
          "reply_to" : {
            "title" : "Reply To",
            "type" : "integer",
            "description" : "The index of `variate_settings.reply_to_addresses` used",
            "x-ballerina-name" : "replyTo"
          },
          "recipients" : {
            "title" : "Recipients",
            "type" : "integer",
            "description" : "The number of recipients for this combination"
          },
          "id" : {
            "title" : "ID",
            "type" : "string",
            "description" : "Unique ID for the combination"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "integer",
            "description" : "The index of `variate_settings.from_names` used",
            "x-ballerina-name" : "fromName"
          },
          "content_description" : {
            "title" : "Content Description",
            "type" : "integer",
            "description" : "The index of `variate_settings.contents` used",
            "x-ballerina-name" : "contentDescription"
          }
        }
      },
      "InlineResponse20011AudienceEmailSource" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Email source name"
          },
          "segment_type" : {
            "type" : "string",
            "description" : "Segment type if this source is tied to a segment",
            "x-ballerina-name" : "segmentType"
          },
          "list_name" : {
            "type" : "string",
            "description" : "Associated list name to the source",
            "x-ballerina-name" : "listName"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the email source"
          },
          "is_segment" : {
            "type" : "boolean",
            "description" : "Is the source reference a segment",
            "x-ballerina-name" : "isSegment"
          }
        }
      },
      "VerifiedDomains" : {
        "title" : "Verified Domains",
        "type" : "object",
        "properties" : {
          "authenticated" : {
            "title" : "Authenticated",
            "type" : "boolean",
            "description" : "Whether domain authentication is enabled for this domain",
            "readOnly" : true
          },
          "is_free_email_provider" : {
            "title" : "Is Public Domain",
            "type" : "boolean",
            "description" : "Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details",
            "readOnly" : true,
            "x-ballerina-name" : "isFreeEmailProvider"
          },
          "domain" : {
            "title" : "Domain Name",
            "type" : "string",
            "description" : "The name of this domain",
            "readOnly" : true
          },
          "verified" : {
            "title" : "Verified",
            "type" : "boolean",
            "description" : "Whether the domain has been verified for sending",
            "readOnly" : true
          },
          "verification_email" : {
            "title" : "Verification Email",
            "type" : "string",
            "description" : "The e-mail address receiving the two-factor challenge for this domain",
            "readOnly" : true,
            "x-ballerina-name" : "verificationEmail"
          },
          "verification_sent" : {
            "title" : "Verification Challenge Sent",
            "type" : "string",
            "description" : "The date/time that the two-factor challenge was sent to the verification email",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "verificationSent"
          },
          "status" : {
            "title" : "Domain Status",
            "type" : "string",
            "description" : "The Domain's current status",
            "readOnly" : true,
            "enum" : [ "VERIFICATION_IN_PROGRESS", "VERIFIED", "EXPIRED", "ERROR", "AUTHENTICATION_IN_PROGRESS", "AUTHENTICATION_ERROR", "AUTHENTICATED" ]
          }
        },
        "description" : "The verified domains currently on the account"
      },
      "Tag" : {
        "title" : "Tag",
        "type" : "object",
        "properties" : {
          "tag_name" : {
            "title" : "Tag Name",
            "type" : "string",
            "description" : "The name of the tag",
            "readOnly" : true,
            "x-ballerina-name" : "tagName"
          },
          "tag_id" : {
            "title" : "Tag ID",
            "type" : "integer",
            "description" : "The unique id for the tag",
            "readOnly" : true,
            "x-ballerina-name" : "tagId"
          }
        }
      },
      "SentTo1" : {
        "title" : "Sent To",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "open_count" : {
            "title" : "Open Count",
            "type" : "integer",
            "description" : "The number of times a campaign was opened by this member",
            "x-ballerina-name" : "openCount"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The date and time of the last open for this member in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastOpen"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "absplit_group" : {
            "title" : "A/B Split Group",
            "type" : "string",
            "description" : "For A/B Split Campaigns, the group the member was apart of",
            "enum" : [ "a", "b", "winner" ],
            "x-ballerina-name" : "absplitGroup"
          },
          "gmt_offset" : {
            "title" : "GMT Offset",
            "type" : "integer",
            "description" : "For campaigns sent with timewarp, the time zone group the member is apart of",
            "x-ballerina-name" : "gmtOffset"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          },
          "status" : {
            "title" : "Delivery Status",
            "type" : "string",
            "description" : "The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/)",
            "enum" : [ "sent", "hard", "soft" ]
          }
        },
        "description" : "A subscriber's status for a specific campaign"
      },
      "SentTo2" : {
        "title" : "Sent To",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "merge_fields" : {
            "title" : "Merge Fields",
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This object's keys are merge tags (like FNAME). It's values are the values to be added to the merge field."
            },
            "description" : "A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure",
            "x-ballerina-name" : "mergeFields"
          },
          "open_count" : {
            "title" : "Open Count",
            "type" : "integer",
            "description" : "The number of times a campaign was opened by this member",
            "x-ballerina-name" : "openCount"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The date and time of the last open for this member in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastOpen"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "absplit_group" : {
            "title" : "A/B Split Group",
            "type" : "string",
            "description" : "For A/B Split Campaigns, the group the member was apart of",
            "enum" : [ "a", "b", "winner" ],
            "x-ballerina-name" : "absplitGroup"
          },
          "gmt_offset" : {
            "title" : "GMT Offset",
            "type" : "integer",
            "description" : "For campaigns sent with timewarp, the time zone group the member is apart of",
            "x-ballerina-name" : "gmtOffset"
          },
          "vip" : {
            "title" : "VIP",
            "type" : "boolean",
            "description" : "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber",
            "readOnly" : true
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          },
          "status" : {
            "title" : "Delivery Status",
            "type" : "string",
            "description" : "The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/)",
            "enum" : [ "sent", "hard", "soft" ]
          }
        },
        "description" : "A subscriber's status for a specific campaign"
      },
      "LandingPage3" : {
        "title" : "Landing Page",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The ID of the store associated with this landing page",
            "x-ballerina-name" : "storeId"
          },
          "created_by_source" : {
            "title" : "Created By Source",
            "type" : "string",
            "description" : "Created by mobile or web",
            "readOnly" : true,
            "x-ballerina-name" : "createdBySource"
          },
          "list_id" : {
            "title" : "Landing Page list id",
            "type" : "string",
            "description" : "The list's ID associated with this landing page",
            "example" : "fde02ad86b",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "description" : {
            "title" : "Landing Page description",
            "type" : "string",
            "description" : "The description of this landing page"
          },
          "created_at" : {
            "title" : "Created At",
            "type" : "string",
            "description" : "The time this landing page was created",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "web_id" : {
            "title" : "Landing Page Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application",
            "x-ballerina-name" : "webId"
          },
          "title" : {
            "title" : "Landing Page title",
            "type" : "string",
            "description" : "The title of this landing page seen in the browser's title bar"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/TrackingSettings"
          },
          "url" : {
            "title" : "Published url",
            "type" : "string",
            "description" : "The url of the published landing page",
            "readOnly" : true
          },
          "updated_at" : {
            "title" : "Updated_at",
            "type" : "string",
            "description" : "The time this landing page was updated at",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "name" : {
            "title" : "Landing Page Name",
            "type" : "string",
            "description" : "The name of this landing page"
          },
          "template_id" : {
            "title" : "Landing Page template_id",
            "type" : "integer",
            "description" : "The template_id of this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "templateId"
          },
          "id" : {
            "title" : "Landing Page ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this landing page",
            "readOnly" : true,
            "example" : "030092c2e1f0"
          },
          "published_at" : {
            "title" : "Published at",
            "type" : "string",
            "description" : "The time this landing page was published",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "publishedAt"
          },
          "status" : {
            "title" : "Landing Page status",
            "type" : "string",
            "description" : "The status of this landing page",
            "readOnly" : true,
            "enum" : [ "published", "unpublished", "draft" ]
          },
          "unpublished_at" : {
            "title" : "Unpublished at",
            "type" : "string",
            "description" : "The time this landing page was unpublished",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "unpublishedAt"
          }
        },
        "description" : "A summary of an individual landing page's settings and content"
      },
      "InlineResponse2009Products" : {
        "type" : "object",
        "properties" : {
          "total_purchased" : {
            "type" : "number",
            "x-ballerina-name" : "totalPurchased"
          },
          "image_url" : {
            "type" : "string",
            "x-ballerina-name" : "imageUrl"
          },
          "total_revenue" : {
            "type" : "number",
            "x-ballerina-name" : "totalRevenue"
          },
          "recommendation_purchased" : {
            "type" : "integer",
            "x-ballerina-name" : "recommendationPurchased"
          },
          "recommendation_total" : {
            "type" : "integer",
            "x-ballerina-name" : "recommendationTotal"
          },
          "title" : {
            "type" : "string"
          },
          "sku" : {
            "type" : "string"
          },
          "currency_code" : {
            "type" : "string",
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "LandingPage2" : {
        "title" : "Landing Page",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The ID of the store associated with this landing page",
            "x-ballerina-name" : "storeId"
          },
          "list_id" : {
            "title" : "Landing Page list id",
            "type" : "string",
            "description" : "The list's ID associated with this landing page",
            "x-ballerina-name" : "listId"
          },
          "name" : {
            "title" : "Landing Page Name",
            "type" : "string",
            "description" : "The name of this landing page"
          },
          "description" : {
            "title" : "Landing Page description",
            "type" : "string",
            "description" : "The description of this landing page"
          },
          "title" : {
            "title" : "Landing Page title",
            "type" : "string",
            "description" : "The title of this landing page seen in the browser's title bar"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/TrackingSettings"
          }
        },
        "description" : "A summary of an individual page's properties"
      },
      "FacebookAdsFacebookAdsFacebookAdsAllOf1123" : {
        "type" : "object",
        "properties" : {
          "audience" : {
            "$ref" : "#/components/schemas/InlineResponse20011Audience"
          },
          "channel" : {
            "$ref" : "#/components/schemas/InlineResponse20011Channel"
          },
          "audience_activity" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013AudienceActivity"
            } ],
            "x-ballerina-name" : "audienceActivity"
          },
          "budget" : {
            "$ref" : "#/components/schemas/InlineResponse20011Budget"
          },
          "report_summary" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/InlineResponse20013ReportSummary"
            } ],
            "x-ballerina-name" : "reportSummary"
          }
        }
      },
      "LandingPage1" : {
        "title" : "Landing Page",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The ID of the store associated with this landing page",
            "x-ballerina-name" : "storeId"
          },
          "created_by_source" : {
            "title" : "Created By Source",
            "type" : "string",
            "description" : "Created by mobile or web",
            "readOnly" : true,
            "x-ballerina-name" : "createdBySource"
          },
          "list_id" : {
            "title" : "Landing Page list id",
            "type" : "string",
            "description" : "The list's ID associated with this landing page",
            "example" : "fde02ad86b",
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "description" : {
            "title" : "Landing Page description",
            "type" : "string",
            "description" : "The description of this landing page"
          },
          "created_at" : {
            "title" : "Created At",
            "type" : "string",
            "description" : "The time this landing page was created",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "web_id" : {
            "title" : "Landing Page Web ID",
            "type" : "integer",
            "description" : "The ID used in the Mailchimp web application",
            "x-ballerina-name" : "webId"
          },
          "title" : {
            "title" : "Landing Page title",
            "type" : "string",
            "description" : "The title of this landing page seen in the browser's title bar"
          },
          "tracking" : {
            "$ref" : "#/components/schemas/TrackingSettings"
          },
          "url" : {
            "title" : "Published url",
            "type" : "string",
            "description" : "The url of the published landing page",
            "readOnly" : true
          },
          "updated_at" : {
            "title" : "Updated_at",
            "type" : "string",
            "description" : "The time this landing page was updated at",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "updatedAt"
          },
          "name" : {
            "title" : "Landing Page Name",
            "type" : "string",
            "description" : "The name of this landing page"
          },
          "template_id" : {
            "title" : "Landing Page template_id",
            "type" : "integer",
            "description" : "The template_id of this landing page",
            "readOnly" : true,
            "x-ballerina-name" : "templateId"
          },
          "id" : {
            "title" : "Landing Page ID",
            "type" : "string",
            "description" : "A string that uniquely identifies this landing page",
            "readOnly" : true,
            "example" : "030092c2e1f0"
          },
          "published_at" : {
            "title" : "Published at",
            "type" : "string",
            "description" : "The time this landing page was published",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "publishedAt"
          },
          "status" : {
            "title" : "Landing Page status",
            "type" : "string",
            "description" : "The status of this landing page",
            "readOnly" : true,
            "enum" : [ "published", "unpublished", "draft" ]
          },
          "unpublished_at" : {
            "title" : "Unpublished at",
            "type" : "string",
            "description" : "The time this landing page was unpublished",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "unpublishedAt"
          }
        },
        "description" : "A summary of an individual landing page's settings and content"
      },
      "ECommerceReport" : {
        "title" : "E-Commerce Report",
        "type" : "object",
        "properties" : {
          "total_spent" : {
            "title" : "Total Spent",
            "type" : "number",
            "description" : "The total spent for a campaign. Calculated as the sum of all order totals with no deductions",
            "readOnly" : true,
            "x-ballerina-name" : "totalSpent"
          },
          "total_revenue" : {
            "title" : "Total Revenue",
            "type" : "number",
            "description" : "The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals",
            "readOnly" : true,
            "x-ballerina-name" : "totalRevenue"
          },
          "total_orders" : {
            "title" : "Total Orders",
            "type" : "integer",
            "description" : "The total orders for a campaign",
            "readOnly" : true,
            "x-ballerina-name" : "totalOrders"
          },
          "currency_code" : {
            "title" : "Three letter currency code for this user",
            "type" : "string",
            "readOnly" : true,
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          }
        },
        "description" : "E-Commerce stats for a campaign"
      },
      "WeeklyClicksAndVisitsDataVisits" : {
        "type" : "object",
        "properties" : {
          "date" : {
            "title" : "Date",
            "type" : "string",
            "readOnly" : true,
            "example" : "2018-04-25"
          },
          "val" : {
            "title" : "Value",
            "type" : "integer",
            "readOnly" : true,
            "example" : 49
          }
        }
      },
      "Recipients" : {
        "title" : "Recipients",
        "type" : "object",
        "properties" : {
          "segment_opts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/SegmentOptions1"
            } ],
            "x-ballerina-name" : "segmentOpts"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id",
            "x-ballerina-name" : "listId"
          },
          "segment_text" : {
            "title" : "Segment Text",
            "type" : "string",
            "description" : "A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML",
            "readOnly" : true,
            "x-ballerina-name" : "segmentText"
          },
          "recipient_count" : {
            "title" : "Recipient Count",
            "type" : "integer",
            "description" : "Count of the recipients on the associated list. Formatted as an integer",
            "readOnly" : true,
            "x-ballerina-name" : "recipientCount"
          },
          "list_name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list",
            "readOnly" : true,
            "x-ballerina-name" : "listName"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          }
        },
        "description" : "High level audience information for who the outreach targets"
      },
      "CampaignDeliveryStatus" : {
        "title" : "Campaign Delivery Status",
        "type" : "object",
        "properties" : {
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails confirmed sent for this campaign so far",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "can_cancel" : {
            "title" : "Campaign Cancelable",
            "type" : "boolean",
            "description" : "Whether a campaign send can be canceled",
            "readOnly" : true,
            "x-ballerina-name" : "canCancel"
          },
          "emails_canceled" : {
            "title" : "Emails Canceled",
            "type" : "integer",
            "description" : "The total number of emails canceled for this campaign",
            "readOnly" : true,
            "x-ballerina-name" : "emailsCanceled"
          },
          "enabled" : {
            "title" : "Delivery Status Enabled",
            "type" : "boolean",
            "description" : "Whether Campaign Delivery Status is enabled for this account and campaign",
            "readOnly" : true
          },
          "status" : {
            "title" : "Campaign Delivery Status",
            "type" : "string",
            "description" : "The current state of a campaign delivery",
            "readOnly" : true,
            "enum" : [ "delivering", "delivered", "canceling", "canceled" ]
          }
        },
        "description" : "Updates on campaigns in the process of sending"
      },
      "GalleryFile1" : {
        "title" : "Gallery File",
        "type" : "object",
        "properties" : {
          "full_size_url" : {
            "title" : "File URL",
            "type" : "string",
            "description" : "The url of the full-size file",
            "format" : "uri",
            "readOnly" : true,
            "x-ballerina-name" : "fullSizeUrl"
          },
          "size" : {
            "title" : "File Size",
            "type" : "integer",
            "description" : "The size of the file in bytes",
            "readOnly" : true
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "File Name",
            "type" : "string",
            "description" : "The name of the file"
          },
          "width" : {
            "title" : "Image Width",
            "type" : "integer",
            "description" : "The width of the image",
            "readOnly" : true
          },
          "created_at" : {
            "title" : "Created Date",
            "type" : "string",
            "description" : "The date and time a file was added to the File Manager in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "File ID",
            "type" : "integer",
            "description" : "The unique id of the file",
            "readOnly" : true
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The id of the folder",
            "x-ballerina-name" : "folderId"
          },
          "type" : {
            "title" : "File Type",
            "type" : "string",
            "description" : "The type of file in the File Manager",
            "readOnly" : true,
            "enum" : [ "image", "file" ]
          },
          "thumbnail_url" : {
            "title" : "Thumbnail URL",
            "type" : "string",
            "description" : "The url of the thumbnail preview",
            "format" : "uri",
            "readOnly" : true,
            "x-ballerina-name" : "thumbnailUrl"
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The username of the profile that uploaded the file",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "height" : {
            "title" : "Image Height",
            "type" : "integer",
            "description" : "The height of an image",
            "readOnly" : true
          }
        },
        "description" : "An individual file listed in the File Manager"
      },
      "InterestCategory1" : {
        "title" : "Interest Category",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id for the category",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the categories are displayed in the list. Lower numbers display first",
            "x-ballerina-name" : "displayOrder"
          },
          "id" : {
            "title" : "Category ID",
            "type" : "string",
            "description" : "The id for the interest category",
            "readOnly" : true
          },
          "title" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The text description of this category. This field appears on signup forms and is often phrased as a question"
          },
          "type" : {
            "title" : "Display Type",
            "type" : "string",
            "description" : "Determines how this category’s interests appear on signup forms",
            "enum" : [ "checkboxes", "dropdown", "radio", "hidden" ]
          }
        },
        "description" : "Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application"
      },
      "InterestCategory2" : {
        "title" : "Interest Category",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique list id for the category",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the categories are displayed in the list. Lower numbers display first",
            "x-ballerina-name" : "displayOrder"
          },
          "id" : {
            "title" : "Category ID",
            "type" : "string",
            "description" : "The id for the interest category",
            "readOnly" : true
          },
          "title" : {
            "title" : "Name",
            "type" : "string",
            "description" : "The text description of this category. This field appears on signup forms and is often phrased as a question"
          },
          "type" : {
            "title" : "Display Type",
            "type" : "string",
            "description" : "Determines how this category’s interests appear on signup forms",
            "enum" : [ "checkboxes", "dropdown", "radio", "hidden" ]
          }
        },
        "description" : "Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application"
      },
      "GalleryFile2" : {
        "title" : "Gallery File",
        "type" : "object",
        "properties" : {
          "name" : {
            "title" : "File Name",
            "type" : "string",
            "description" : "The name of the file"
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The id of the folder. Setting `folder_id` to `0` will remove a file from its current folder",
            "x-ballerina-name" : "folderId"
          }
        },
        "description" : "An individual file listed in the File Manager"
      },
      "ABTestingOptions" : {
        "title" : "A/B Testing Options",
        "type" : "object",
        "properties" : {
          "pick_winner" : {
            "title" : "Pick Winner",
            "type" : "string",
            "description" : "How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'",
            "enum" : [ "opens", "clicks", "manual" ],
            "x-ballerina-name" : "pickWinner"
          },
          "wait_time" : {
            "title" : "Wait Time",
            "type" : "integer",
            "description" : "The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent",
            "x-ballerina-name" : "waitTime"
          },
          "wait_units" : {
            "title" : "Wait Time",
            "type" : "string",
            "description" : "How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent",
            "enum" : [ "hours", "days" ],
            "x-ballerina-name" : "waitUnits"
          },
          "subject_b" : {
            "title" : "Subject Line Group B",
            "type" : "string",
            "description" : "For campaigns split on 'Subject Line', the subject line for Group B",
            "x-ballerina-name" : "subjectB"
          },
          "subject_a" : {
            "title" : "Subject Line Group A",
            "type" : "string",
            "description" : "For campaigns split on 'Subject Line', the subject line for Group A",
            "x-ballerina-name" : "subjectA"
          },
          "split_test" : {
            "title" : "Split Test",
            "type" : "string",
            "description" : "The type of AB split to run",
            "enum" : [ "subject", "from_name", "schedule" ],
            "x-ballerina-name" : "splitTest"
          },
          "from_name_a" : {
            "title" : "From Name Group A",
            "type" : "string",
            "description" : "For campaigns split on 'From Name', the name for Group A",
            "x-ballerina-name" : "fromNameA"
          },
          "from_name_b" : {
            "title" : "From Name Group B",
            "type" : "string",
            "description" : "For campaigns split on 'From Name', the name for Group B",
            "x-ballerina-name" : "fromNameB"
          },
          "send_time_winner" : {
            "title" : "Send Time Winner",
            "type" : "string",
            "description" : "The send time for the winning version",
            "x-ballerina-name" : "sendTimeWinner"
          },
          "reply_email_b" : {
            "title" : "Reply Email Group B",
            "type" : "string",
            "description" : "For campaigns split on 'From Name', the reply-to address for Group B",
            "x-ballerina-name" : "replyEmailB"
          },
          "reply_email_a" : {
            "title" : "Reply Email Group A",
            "type" : "string",
            "description" : "For campaigns split on 'From Name', the reply-to address for Group A",
            "x-ballerina-name" : "replyEmailA"
          },
          "send_time_a" : {
            "title" : "Send Time Group A",
            "type" : "string",
            "description" : "The send time for Group A",
            "format" : "date-time",
            "x-ballerina-name" : "sendTimeA"
          },
          "send_time_b" : {
            "title" : "Send Time Group B",
            "type" : "string",
            "description" : "The send time for Group B",
            "format" : "date-time",
            "x-ballerina-name" : "sendTimeB"
          },
          "split_size" : {
            "title" : "Split Size",
            "maximum" : 50,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50",
            "x-ballerina-name" : "splitSize"
          }
        },
        "description" : "[A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign",
        "readOnly" : true
      },
      "GalleryFile3" : {
        "title" : "Gallery File",
        "type" : "object",
        "properties" : {
          "full_size_url" : {
            "title" : "File URL",
            "type" : "string",
            "description" : "The url of the full-size file",
            "format" : "uri",
            "readOnly" : true,
            "x-ballerina-name" : "fullSizeUrl"
          },
          "size" : {
            "title" : "File Size",
            "type" : "integer",
            "description" : "The size of the file in bytes",
            "readOnly" : true
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "File Name",
            "type" : "string",
            "description" : "The name of the file"
          },
          "width" : {
            "title" : "Image Width",
            "type" : "integer",
            "description" : "The width of the image",
            "readOnly" : true
          },
          "created_at" : {
            "title" : "Created Date",
            "type" : "string",
            "description" : "The date and time a file was added to the File Manager in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "createdAt"
          },
          "id" : {
            "title" : "File ID",
            "type" : "integer",
            "description" : "The unique id of the file",
            "readOnly" : true
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "integer",
            "description" : "The id of the folder",
            "x-ballerina-name" : "folderId"
          },
          "type" : {
            "title" : "File Type",
            "type" : "string",
            "description" : "The type of file in the File Manager",
            "readOnly" : true,
            "enum" : [ "image", "file" ]
          },
          "thumbnail_url" : {
            "title" : "Thumbnail URL",
            "type" : "string",
            "description" : "The url of the thumbnail preview",
            "format" : "uri",
            "readOnly" : true,
            "x-ballerina-name" : "thumbnailUrl"
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The username of the profile that uploaded the file",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "height" : {
            "title" : "Image Height",
            "type" : "integer",
            "description" : "The height of an image",
            "readOnly" : true
          }
        },
        "description" : "An individual file listed in the File Manager"
      },
      "ResourceLink" : {
        "title" : "Resource Link",
        "type" : "object",
        "properties" : {
          "schema" : {
            "title" : "Schema",
            "type" : "string",
            "description" : "For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to",
            "readOnly" : true
          },
          "targetSchema" : {
            "title" : "Target Schema",
            "type" : "string",
            "description" : "For GETs, this is a URL representing the schema that the response should conform to",
            "readOnly" : true
          },
          "method" : {
            "title" : "Method",
            "type" : "string",
            "description" : "The HTTP method that should be used when accessing the URL defined in 'href'",
            "readOnly" : true,
            "enum" : [ "GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD" ]
          },
          "rel" : {
            "title" : "Rel",
            "type" : "string",
            "description" : "As with an HTML 'rel' attribute, this describes the type of link",
            "readOnly" : true
          },
          "href" : {
            "title" : "Href",
            "type" : "string",
            "description" : "This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action",
            "readOnly" : true
          }
        },
        "description" : "This object represents a link from the resource where it is found to another resource or action that may be performed"
      },
      "SegmentOptions" : {
        "title" : "Segment Options",
        "type" : "object",
        "properties" : {
          "match" : {
            "title" : "Match Type",
            "type" : "string",
            "description" : "Segment match type",
            "enum" : [ "any", "all" ]
          },
          "saved_segment_id" : {
            "title" : "Saved Segment ID",
            "type" : "integer",
            "description" : "The id for an existing saved segment",
            "x-ballerina-name" : "savedSegmentId"
          },
          "conditions" : {
            "title" : "Segment Type",
            "type" : "array",
            "description" : "Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)",
            "items" : {
              "type" : "object",
              "x-oneOf" : [ {
                "type" : "object",
                "title" : "Aim Segment",
                "description" : "Segment by interaction with a specific campaign.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Aim",
                    "enum" : [ "Aim" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "aim" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a specific campaign.",
                    "example" : "aim"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "open", "click", "sent", "noopen", "noclick", "nosent" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to their campaign interaction. One of the following: opened, clicked, was sent, didn't open, didn't click, or was not sent.",
                    "example" : "open"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "Either the web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Automation Segment",
                "description" : "Segment by interaction with an Automation workflow.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Automation",
                    "enum" : [ "Automation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "automation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with an Automation workflow.",
                    "example" : "automation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the automation workflow. One of the following: has started the workflow, has completed the workflow, has not started the workflow, or has not completed the workflow.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id for the automation workflow to segment against.",
                    "example" : "2135217"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Poll Activity Segment",
                "description" : "Segment by poll activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "CampaignPoll",
                    "enum" : [ "CampaignPoll" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "poll" ],
                    "title" : "Segment Field",
                    "description" : "Segment by poll activity.",
                    "example" : "poll"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members have/have not interacted with a specific poll in a Mailchimp email.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the poll.",
                    "example" : 409
                  }
                }
              }, {
                "type" : "object",
                "title" : "Conversation Segment",
                "description" : "Segment by interaction with a campaign via Conversations.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Conversation",
                    "enum" : [ "Conversation" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "conversation" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a campaign via Conversations.",
                    "example" : "conversation"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "The status of a member's interaction with a conversation. One of the following: has replied or has not replied.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The web id value for a specific campaign or 'any' to account for subscribers who have/have not interacted with any campaigns.",
                    "example" : "any"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Segment",
                "description" : "Segment by a specific date field.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Date",
                    "enum" : [ "Date" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt", "info_changed", "ecomm_date" ],
                    "title" : "Segment Field",
                    "description" : "The type of date field to segment on: The opt-in time for a signup, the date the subscriber was last updated, or the date of their last ecomm purchase.",
                    "example" : "timestamp_opt"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is", "not", "blank", "blank_not", "within", "notwithin" ],
                    "title" : "Segment Operator",
                    "description" : "When the event took place:  Before, after, is a specific date, is not a specific date, is blank, or is not blank.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent.",
                    "example" : "date"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra Value",
                    "description" : "When segmenting on 'date' or 'campaign', the date for the segment formatted as YYYY-MM-DD or the web id for the campaign.",
                    "example" : "2015-01-30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Client Segment",
                "description" : "Segment by use of a particular email client.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailClient",
                    "enum" : [ "EmailClient" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "email_client" ],
                    "title" : "Segment Field",
                    "description" : "Segment by use of a particular email client.",
                    "example" : "email_client"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "client_is", "client_not" ],
                    "title" : "Segment Operator",
                    "description" : "The operation to determine whether we select clients that match the value, or clients that do not match the value.",
                    "example" : "client_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The name of the email client.",
                    "example" : "Gmail"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Language Segment",
                "description" : "Segment by language.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Language",
                    "enum" : [ "Language" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "language" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's language.",
                    "example" : "language"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's language is or is not set to a specific language.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "A two-letter language identifier.",
                    "example" : "en"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Member Rating Segment",
                "description" : "Segment by member rating.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "MemberRating",
                    "enum" : [ "MemberRating" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "rating" ],
                    "title" : "Segment Field",
                    "description" : "Segment by member rating.",
                    "example" : "rating"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have a rating that is/not exactly a given number or members who have a rating greater/less than a given number.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The star rating number to segment against.",
                    "example" : 4
                  }
                }
              }, {
                "type" : "object",
                "title" : "Signup Source Segment",
                "description" : "Segment by signup source.",
                "required" : [ "field", "condition_type", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "enum" : [ "SignupSource" ],
                    "x-value" : "SignupSource",
                    "title" : "Type"
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "source" ],
                    "title" : "Segment Field",
                    "example" : "source"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "source_is", "source_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's signup source was/was not a particular value.",
                    "example" : "source_is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The signup source.",
                    "example" : "List Import"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Survey Monkey Segment",
                "description" : "Segment by interaction with a SurveyMonkey survey.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SurveyMonkey",
                    "enum" : [ "SurveyMonkey" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "survey_monkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by interaction with a SurveyMonkey survey.",
                    "example" : "survey_monkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "started", "completed", "not_started", "not_completed" ],
                    "title" : "Segment Operator",
                    "description" : "The status of the member with regard to the survey.One of the following: has started the survey, has completed the survey, has not started the survey, or has not completed the survey.",
                    "example" : "started"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Survey ID",
                    "description" : "The unique ID of the survey monkey survey.",
                    "example" : "32179586"
                  }
                }
              }, {
                "type" : "object",
                "title" : "VIP Segment",
                "description" : "Segment by VIP status.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "VIP",
                    "enum" : [ "VIP" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "gmonkey" ],
                    "title" : "Segment Field",
                    "description" : "Segment by VIP status.",
                    "example" : "gmonkey"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is or is not marked as VIP.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Interests Segment",
                "description" : "Segment by an interest group merge field.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "Interests",
                    "enum" : [ "Interests" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "Segmenting based on interest group information. This should start with 'interests-' followed by the grouping id. Ex. 'interests-123'.",
                    "example" : "interests-123"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "interestcontains", "interestcontainsall", "interestnotcontains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member is a part of one, all, or none of the groups.",
                    "example" : "interestcontains"
                  },
                  "value" : {
                    "type" : "array",
                    "title" : "Segment Value",
                    "description" : "An array containing strings, each representing a group id.",
                    "items" : {
                      "type" : "string",
                      "example" : [ "44401", "44405", "44409" ]
                    }
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Category Segment",
                "description" : "Segment by purchases in specific items or categories.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommCategory",
                    "enum" : [ "EcommCategory" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_cat", "ecomm_prod" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases in specific items or categories.",
                    "example" : "ecomm_cat"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "A member who has purchased from a category/specific item that is/is not a specific name, where the category/item name contains/doesn't contain a specific phrase or string, or a category/item name that starts/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The ecommerce category/item information.",
                    "example" : "Product"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Number Segment",
                "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommNumber",
                    "enum" : [ "EcommNumber" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_avg", "ecomm_orders", "ecomm_prod_all", "ecomm_avg_ord" ],
                    "title" : "Segment Field",
                    "description" : "Segment by average spent total, number of orders, total number of products purchased, or average number of products per order.",
                    "example" : "ecomm_orders"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than the segment value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "Members who have spent exactly, have not spent exactly, spent more, or spent less than this amount.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Segment",
                "description" : "Segment by whether someone has purchased anything.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommPurchased",
                    "enum" : [ "EcommPurchased" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_purchased" ],
                    "title" : "Segment Field",
                    "description" : "Segment by whether someone has purchased anything.",
                    "example" : "ecomm_purchased"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have have ('member') or have not ('notmember') purchased.",
                    "example" : "member"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Spent Segment",
                "description" : "Segment by amount spent on a single order or across all orders.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommSpent",
                    "enum" : [ "EcommSpent" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_spent_one", "ecomm_spent_all" ],
                    "title" : "Segment Field",
                    "description" : "Segment by amount spent on a single order or across all orders.",
                    "example" : "ecomm_spent_one"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have spent 'more' or 'less' than then specified value.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The total amount a member spent.",
                    "example" : 42
                  }
                }
              }, {
                "type" : "object",
                "title" : "Ecommerce Purchased Store Segment",
                "description" : "Segment by purchases from a specific store.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EcommStore",
                    "enum" : [ "EcommStore" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ecomm_store" ],
                    "title" : "Segment Field",
                    "description" : "Segment by purchases from a specific store.",
                    "example" : "ecomm_store"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have or have not purchased from a specific store.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Operator",
                    "description" : "The store id to segment against.",
                    "example" : "289"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Activity Segment",
                "description" : "Segment by Goal activity.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalActivity",
                    "enum" : [ "GoalActivity" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal" ],
                    "title" : "Segment Field",
                    "description" : "Segment by Goal activity.",
                    "example" : "goal"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "goal_not", "contains", "goal_notcontain", "starts", "ends" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website URL is/not exactly, contains/doesn't contain, starts with/ends with a string.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The URL to check Goal activity against."
                  }
                }
              }, {
                "type" : "object",
                "title" : "Goal Timestamp Segment",
                "description" : "Segment by most recent interaction with a website.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "GoalTimestamp",
                    "enum" : [ "GoalTimestamp" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "goal_last_visited" ],
                    "title" : "Segment Field",
                    "description" : "Segment by most recent interaction with a website.",
                    "example" : "goal_last_visited"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "greater", "less", "is" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the website activity happened after, before, or at a given timestamp.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The date to check Goal activity against.",
                    "example" : "2015-07-20 19:45:21"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Similar Subscribers Segment Member Segment",
                "description" : "Segment by similar subscribers.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "FuzzySegment",
                    "enum" : [ "FuzzySegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by similar subscribers.",
                    "example" : "fuzzy_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "fuzzy_is", "fuzzy_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a 'similar subscribers' segment.",
                    "example" : "fuzzy_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the 'similar subscribers' segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Static Segment Member Segment",
                "description" : "Segment by a given static segment.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "StaticSegment",
                    "enum" : [ "StaticSegment" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "static_segment" ],
                    "title" : "Segment Field",
                    "description" : "Segment by a given static segment.",
                    "example" : "static_segment"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "static_is", "static_not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/are not apart of a static segment.",
                    "example" : "static_is"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The id for the static segment.",
                    "example" : 48433
                  }
                }
              }, {
                "type" : "object",
                "title" : "Location-Based Segment",
                "description" : "Segment by a specific country or US state.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoCountryState",
                    "enum" : [ "IPGeoCountryState" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeocountry", "ipgeonotcountry", "ipgeostate", "ipgeonotstate" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific country or US state.",
                    "example" : "ipgeocountry"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "The two-letter country code or US state abbreviation.",
                    "example" : "US"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Geolocation Segment",
                "description" : "Segment by a specific geographic region.",
                "required" : [ "field", "op", "value", "addr", "lat", "lng" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoIn",
                    "enum" : [ "IPGeoIn" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoin", "ipgeonotin" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific geographic region.",
                    "example" : "ipgeoin"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 42
                  },
                  "addr" : {
                    "type" : "string",
                    "title" : "Segment Location Address",
                    "description" : "The address of the target location.",
                    "example" : "Atlanta, GA, USA"
                  },
                  "lat" : {
                    "type" : "string",
                    "title" : "Segment Location Latitude",
                    "description" : "The latitude of the target location.",
                    "example" : "33.7489954"
                  },
                  "lng" : {
                    "type" : "string",
                    "title" : "Segment Location Longitude",
                    "description" : "The longitude of the target location.",
                    "example" : "-84.3879824"
                  }
                }
              }, {
                "type" : "object",
                "title" : "US Zip Code Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoInZip",
                    "enum" : [ "IPGeoInZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoinzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are within a specific US zip code.",
                    "example" : "ipgeoinzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The radius of the target location.",
                    "example" : 25
                  },
                  "extra" : {
                    "type" : "integer",
                    "title" : "Extra Data",
                    "description" : "The zip code to segment against.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Unknown Location-Based Segment",
                "description" : "Segment members whose location information is unknown.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoUnknown",
                    "enum" : [ "IPGeoUnknown" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeounknown" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members for which location information is unknown.",
                    "example" : "ipgeounknown"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Zip Code Location-Based Segment",
                "description" : "Segment by a specific US ZIP code.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "IPGeoZip",
                    "enum" : [ "IPGeoZip" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "ipgeo" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting subscribers who are within a specific location.",
                    "example" : "ipgeo"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "ipgeoiszip", "ipgeonotzip" ],
                    "title" : "Segment Operator",
                    "description" : "Segment members who are/are not within a specific US zip code.",
                    "example" : "ipgeonotzip"
                  },
                  "value" : {
                    "type" : "integer",
                    "title" : "Segment Data",
                    "description" : "The 5-digit zip code.",
                    "example" : 30318
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Age Segment",
                "description" : "Segment by age ranges in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialAge",
                    "enum" : [ "SocialAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_age" ],
                    "title" : "Segment Field",
                    "description" : "Segment by age ranges in Social Profiles data.",
                    "example" : "social_age"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-54", "55+" ],
                    "title" : "Segment Operator",
                    "description" : "The age range to segment.",
                    "example" : "35-54"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Gender Segment",
                "description" : "Segment by listed gender in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialGender",
                    "enum" : [ "SocialGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by listed gender in Social Profiles data.",
                    "example" : "social_gender"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Influence Segment",
                "description" : "Segment by influence rating in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialInfluence",
                    "enum" : [ "SocialInfluence" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_influence" ],
                    "title" : "Segment Field",
                    "description" : "Segment by influence rating in Social Profiles data.",
                    "example" : "social_influence"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Members who have a rating that is/not or greater/less than the rating provided.",
                    "example" : "greater"
                  },
                  "value" : {
                    "type" : "number",
                    "title" : "Segment Operator",
                    "description" : "The Social Profiles influence rating to segment.",
                    "example" : 2
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkMember",
                    "enum" : [ "SocialNetworkMember" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "member", "notmember" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not on a given social network.",
                    "example" : "member"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter", "facebook", "linkedin", "flickr", "foursquare", "lastfm", "myspace", "quora", "vimeo", "yelp", "youtube" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Social Profiles Social Network Follow Segment",
                "description" : "Segment by social network in Social Profiles data.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SocialNetworkFollow",
                    "enum" : [ "SocialNetworkFollow" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "social_network" ],
                    "title" : "Segment Field",
                    "description" : "Segment by social network in Social Profiles data.",
                    "example" : "social_network"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "follow", "notfollow" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not following a linked account on a given social network.",
                    "example" : "follow"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "twitter_follow" ],
                    "title" : "Segment Operator",
                    "description" : "The social network to segment against.",
                    "example" : "twitter_follow"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address Merge Field Segment",
                "description" : "Segment by an address-type merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "AddressMerge",
                    "enum" : [ "AddressMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address-type merge field to segment.",
                    "example" : "MMERGE3"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "contains", "notcontain", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field contains/does not contain a value or is/is not blank.",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Atlanta"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Address/Zip Merge Field Segment",
                "description" : "Segment by an address-type merge field within a given distance.",
                "required" : [ "field", "op", "value", "extra" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "ZipMerge",
                    "enum" : [ "ZipMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "An address or zip-type merge field to segment.",
                    "example" : "MMERGE2"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "geoin" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's address merge field is within a given distance from a city or zip.",
                    "example" : "geoin"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The distance from the city/zip.",
                    "example" : "25"
                  },
                  "extra" : {
                    "type" : "string",
                    "title" : "Segment Extra",
                    "description" : "The city or the zip being used to segment against.",
                    "example" : "30318"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Birthday Merge Field Segment",
                "description" : "Segment by a contact's birthday.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "BirthdayMerge",
                    "enum" : [ "BirthdayMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE4"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's birthday merge information is/is not a certain date or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against (mm/dd).",
                    "example" : "01/30"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Date Merge Field Segment",
                "description" : "Segment by a given date merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "DateMerge",
                    "enum" : [ "DateMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A date merge field to segment.",
                    "example" : "MMERGE5"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "less", "blank", "blank_not", "greater" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, is greater/less than a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "A date to segment against.",
                    "example" : "01/30/2015"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Dropdown/Radio Merge Field Segment",
                "description" : "An individual segment condition",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "SelectMerge",
                    "enum" : [ "SelectMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A merge field to segment.",
                    "example" : "MMERGE6"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "blank", "blank_not", "notcontain", "contains" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not a value or is/is not blank.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text merge field with.",
                    "example" : "Second Choice"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Text or Number Merge Field Segment",
                "description" : "Segment by a given text or number merge field.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "TextMerge",
                    "enum" : [ "TextMerge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "title" : "Segment Field",
                    "description" : "A text or number merge field to segment.",
                    "example" : "MMERGE7"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less", "blank", "blank_not" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the member's merge information is/is not, contains/does not contain, starts/ends with, or is greater/less than a value",
                    "example" : "contains"
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to segment a text or number merge field with.",
                    "example" : "Freddie's Jokes"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Email Segment",
                "description" : "Segment by email address.",
                "required" : [ "field", "op" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "EmailAddress",
                    "enum" : [ "EmailAddress" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "merge0", "EMAIL" ],
                    "title" : "Segment Field",
                    "description" : "Segmenting based off of a subscriber's email address.",
                    "example" : "EMAIL"
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not", "contains", "notcontain", "starts", "ends", "greater", "less" ],
                    "title" : "Segment Operator",
                    "description" : "Whether the email address is/not exactly, contains/doesn't contain, starts/ends with a string."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Value",
                    "description" : "The value to compare the email against.",
                    "example" : "urist.mcvankab@freddiesjokes.com"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Gender Segment",
                "description" : "Segment by predicted gender.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedGender",
                    "enum" : [ "PredictedGender" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_gender" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted gender."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is", "not" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "male", "female" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted gender to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "Predicted Age Segment",
                "description" : "Segment by predicted age.",
                "required" : [ "field", "op", "value" ],
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "PredictedAge",
                    "enum" : [ "PredictedAge" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "predicted_age_range" ],
                    "title" : "Segment Field",
                    "description" : "Segment by predicted age."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "is" ],
                    "title" : "Segment Operator",
                    "description" : "Members who are/not the exact criteria listed.",
                    "example" : "is"
                  },
                  "value" : {
                    "type" : "string",
                    "enum" : [ "18-24", "25-34", "35-44", "45-54", "55-64", "65+" ],
                    "title" : "Segment Operator",
                    "description" : "The predicted age to segment.",
                    "example" : "female"
                  }
                }
              }, {
                "type" : "object",
                "title" : "New Subscribers Prebuilt Segment",
                "description" : "Segment by when people subscribed.",
                "properties" : {
                  "condition_type" : {
                    "type" : "string",
                    "x-value" : "NewSubscribers",
                    "enum" : [ "NewSubscribers" ]
                  },
                  "field" : {
                    "type" : "string",
                    "enum" : [ "timestamp_opt" ],
                    "title" : "Segment Field",
                    "description" : "Segment by when people subscribed."
                  },
                  "op" : {
                    "type" : "string",
                    "enum" : [ "date_within" ],
                    "title" : "Segment Operator",
                    "description" : "Whe the event took place, namely within a time frame."
                  },
                  "value" : {
                    "type" : "string",
                    "title" : "Segment Data",
                    "description" : "What type of data to segment on: a specific date, a specific campaign, or the last campaign sent."
                  }
                }
              } ],
              "x-discriminator" : {
                "type" : "string",
                "propertyName" : "condition_type"
              }
            }
          }
        },
        "description" : "An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options"
      },
      "CollectionOfContentForListSignupForms" : {
        "title" : "Collection of Content for List Signup Forms",
        "type" : "object",
        "properties" : {
          "section" : {
            "title" : "Content Section Name",
            "type" : "string",
            "description" : "The content section name",
            "example" : "signup_message",
            "enum" : [ "signup_message", "unsub_message", "signup_thank_you_title" ]
          },
          "value" : {
            "title" : "Content Section Value",
            "type" : "string",
            "description" : "The content section text",
            "example" : "Signup message goes here"
          }
        },
        "description" : "Collection of Content for List Signup Forms"
      },
      "FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf11234" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        }
      },
      "InlineResponse20013ReportSummaryExtendedAt" : {
        "type" : "object",
        "properties" : {
          "datetime" : {
            "type" : "string"
          },
          "timezone" : {
            "type" : "string"
          }
        }
      },
      "ActionsScheduleBody" : {
        "required" : [ "schedule_time" ],
        "type" : "object",
        "properties" : {
          "schedule_time" : {
            "title" : "Schedule Time",
            "type" : "string",
            "description" : "The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45)",
            "format" : "date-time",
            "x-ballerina-name" : "scheduleTime"
          },
          "batch_delivery" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BatchDelivery"
            } ],
            "x-ballerina-name" : "batchDelivery"
          },
          "timewarp" : {
            "title" : "Timewarp",
            "type" : "boolean",
            "description" : "Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/)"
          }
        }
      },
      "InlineResponse20013InlineResponse20013InlineResponse20013InlineResponse20013AllOf1234" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          }
        }
      },
      "MergeField" : {
        "title" : "Merge Field",
        "required" : [ "name", "type" ],
        "type" : "object",
        "properties" : {
          "public" : {
            "title" : "Merge Field Public Status",
            "type" : "boolean",
            "description" : "Whether the merge field is displayed on the signup form"
          },
          "name" : {
            "title" : "Merge Field Name",
            "type" : "string",
            "description" : "The name of the merge field (audience field)"
          },
          "display_order" : {
            "title" : "Display Order",
            "type" : "integer",
            "description" : "The order that the merge field displays on the list signup form",
            "x-ballerina-name" : "displayOrder"
          },
          "options" : {
            "$ref" : "#/components/schemas/MergeFieldOptions"
          },
          "default_value" : {
            "title" : "Default Value",
            "type" : "string",
            "description" : "The default value for the merge field if `null`",
            "x-ballerina-name" : "defaultValue"
          },
          "tag" : {
            "title" : "Merge Tag",
            "type" : "string",
            "description" : "The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)"
          },
          "type" : {
            "title" : "Merge Field Type",
            "type" : "string",
            "description" : "The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field",
            "enum" : [ "text", "number", "address", "phone", "date", "url", "imageurl", "radio", "dropdown", "birthday", "zip" ]
          },
          "required" : {
            "title" : "Required",
            "type" : "boolean",
            "description" : "Whether the merge field is required to import a contact"
          },
          "help_text" : {
            "title" : "Merge Field Help Text",
            "type" : "string",
            "description" : "Extra text to help the subscriber fill out the form",
            "x-ballerina-name" : "helpText"
          }
        },
        "description" : "A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience"
      },
      "Script" : {
        "title" : "Script",
        "type" : "object",
        "properties" : {
          "fragment" : {
            "title" : "Script Fragment",
            "type" : "string",
            "description" : "A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp",
            "example" : "<script id=\"mcjs\">!function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,\"script\",\"https://chimpstatic.com/mcjs-connected/js/users/{user-hash}/{site-hash}.js\");</script>"
          },
          "url" : {
            "title" : "Script URL",
            "type" : "string",
            "description" : "The URL used for any integrations that offer built-in support for connected sites",
            "example" : "https://chimpstatic.com/mcjs-connected/js/users/{user-hash}/{site-hash}.js"
          }
        },
        "description" : "The script used to connect your site with Mailchimp",
        "readOnly" : true
      },
      "ResendShortcutEligibility" : {
        "title" : "Resend Shortcut Eligibility",
        "type" : "object",
        "properties" : {
          "to_non_openers" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ToNonOpeners"
            } ],
            "x-ballerina-name" : "toNonOpeners"
          },
          "to_new_subscribers" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ToNewSubscribers"
            } ],
            "x-ballerina-name" : "toNewSubscribers"
          },
          "to_non_purchasers" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ToNonPurchasers"
            } ],
            "x-ballerina-name" : "toNonPurchasers"
          },
          "to_non_clickers" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ToNonClickers"
            } ],
            "x-ballerina-name" : "toNonClickers"
          }
        },
        "description" : "Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`"
      },
      "EmailActivity1" : {
        "title" : "Email Activity",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "activity" : {
            "title" : "Member Activity",
            "type" : "array",
            "description" : "An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign",
            "items" : {
              "$ref" : "#/components/schemas/MemberActivity"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of a member's subscriber activity in a specific campaign, including opens, clicks, and bounces"
      },
      "EmailActivity2" : {
        "title" : "Email Activity",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "Email address for a subscriber",
            "readOnly" : true,
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The unique id for the list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "activity" : {
            "title" : "Member Activity",
            "type" : "array",
            "description" : "An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign",
            "items" : {
              "$ref" : "#/components/schemas/MemberActivity"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "list_is_active" : {
            "title" : "List Status",
            "type" : "boolean",
            "description" : "The status of the list used, namely if it's deleted or disabled",
            "readOnly" : true,
            "x-ballerina-name" : "listIsActive"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The unique id for the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A list of a member's subscriber activity in a specific campaign, including opens, clicks, and bounces"
      },
      "FacebookAdsFacebookAdsAllOf112" : {
        "type" : "object",
        "properties" : {
          "email_source_name" : {
            "title" : "Ad: Email Source Name",
            "type" : "string",
            "x-ballerina-name" : "emailSourceName"
          },
          "paused_at" : {
            "title" : "Ad: Paused At",
            "type" : "string",
            "description" : "The date and time the ad was paused in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "pausedAt"
          },
          "end_time" : {
            "title" : "Ad: End Time",
            "type" : "string",
            "description" : "The date and time the ad was ended in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "endTime"
          },
          "needs_attention" : {
            "title" : "Ad: Needs Attention",
            "type" : "boolean",
            "description" : "If the ad has a problem and needs attention",
            "x-ballerina-name" : "needsAttention"
          },
          "was_canceled_by_facebook" : {
            "title" : "Ad: Was Canceled By Facebook",
            "type" : "boolean",
            "x-ballerina-name" : "wasCanceledByFacebook"
          }
        }
      },
      "ListWebhooks" : {
        "title" : "List Webhooks",
        "type" : "object",
        "properties" : {
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "The list id",
            "x-ballerina-name" : "listId"
          },
          "webhooks" : {
            "title" : "Webhooks",
            "type" : "array",
            "description" : "An array of objects, each representing a specific list member",
            "items" : {
              "$ref" : "#/components/schemas/ListWebhooks2"
            }
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Manage webhooks for a specific list"
      },
      "Customers" : {
        "title" : "Customers",
        "type" : "object",
        "properties" : {
          "store_id" : {
            "title" : "Store ID",
            "type" : "string",
            "description" : "The store id",
            "x-ballerina-name" : "storeId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "customers" : {
            "title" : "Customers",
            "type" : "array",
            "description" : "An array of objects, each representing a customer of a store",
            "items" : {
              "$ref" : "#/components/schemas/ECommerceCustomer6"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of the store's customers"
      },
      "InlineResponse20013InlineResponse20013AllOf12" : {
        "type" : "object",
        "properties" : {
          "email_source_name" : {
            "title" : "Ad: Email Source Name",
            "type" : "string",
            "x-ballerina-name" : "emailSourceName"
          },
          "paused_at" : {
            "title" : "Ad: Paused At",
            "type" : "string",
            "description" : "The date and time the ad was paused in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "pausedAt"
          },
          "end_time" : {
            "title" : "Ad: End Time",
            "type" : "string",
            "description" : "The date and time the ad was ended in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "endTime"
          },
          "needs_attention" : {
            "title" : "Ad: Needs Attention",
            "type" : "boolean",
            "description" : "If the ad has a problem and needs attention",
            "x-ballerina-name" : "needsAttention"
          },
          "was_canceled_by_facebook" : {
            "title" : "Ad: Was Canceled By Facebook",
            "type" : "boolean",
            "x-ballerina-name" : "wasCanceledByFacebook"
          }
        }
      },
      "AutomationDelay1" : {
        "title" : "Automation Delay",
        "type" : "object",
        "properties" : {
          "amount" : {
            "title" : "Delay Amount",
            "type" : "integer",
            "description" : "The delay amount for an Automation email",
            "readOnly" : true
          },
          "full_description" : {
            "title" : "Full Delay Description",
            "type" : "string",
            "description" : "The user-friendly description of the delay and trigger action settings for an Automation email",
            "readOnly" : true,
            "example" : "1 day after subscribers purchase anything from your store",
            "x-ballerina-name" : "fullDescription"
          },
          "action_description" : {
            "title" : "Delay Action Description",
            "type" : "string",
            "description" : "The user-friendly description of the action that triggers an Automation email",
            "readOnly" : true,
            "example" : "subscribers purchase anything from your store",
            "x-ballerina-name" : "actionDescription"
          },
          "action" : {
            "title" : "Delay Action",
            "type" : "string",
            "description" : "The action that triggers the delay of an Automation email",
            "enum" : [ "previous_campaign_sent", "previous_campaign_opened", "previous_campaign_not_opened", "previous_campaign_clicked_any", "previous_campaign_not_clicked_any", "previous_campaign_specific_clicked", "ecomm_bought_any", "ecomm_bought_product", "ecomm_bought_category", "ecomm_not_bought_any", "ecomm_abandoned_cart", "campaign_sent", "opened_email", "not_opened_email", "clicked_email", "not_clicked_email", "campaign_specific_clicked", "manual", "signup", "merge_changed", "group_add", "group_remove", "mandrill_sent", "mandrill_opened", "mandrill_clicked", "mandrill_any", "api", "goal", "annual", "birthday", "date", "date_added", "tag_add" ]
          },
          "type" : {
            "title" : "Delay Type",
            "type" : "string",
            "description" : "The type of delay for an Automation email",
            "enum" : [ "now", "day", "hour", "week" ]
          },
          "direction" : {
            "title" : "Delay Direction",
            "type" : "string",
            "description" : "Whether the delay settings describe before or after the delay action of an Automation email",
            "enum" : [ "before", "after" ]
          }
        },
        "description" : "The delay settings for an Automation email"
      },
      "Orders1Promos" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "title" : "Code",
            "type" : "string",
            "description" : "The Promo Code"
          },
          "amount_discounted" : {
            "title" : "Amount Discounted",
            "type" : "number",
            "description" : "The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0",
            "x-ballerina-name" : "amountDiscounted"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "Type of discount. For free shipping set type to fixed",
            "enum" : [ "fixed", "percentage" ]
          }
        }
      },
      "CampaignscampaignIdcontentVariateContents" : {
        "required" : [ "content_label" ],
        "type" : "object",
        "properties" : {
          "content_label" : {
            "title" : "Content Label",
            "type" : "string",
            "description" : "The label used to identify the content option",
            "x-ballerina-name" : "contentLabel"
          },
          "template" : {
            "$ref" : "#/components/schemas/TemplateContent1"
          },
          "plain_text" : {
            "title" : "Plain Text",
            "type" : "string",
            "description" : "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically",
            "x-ballerina-name" : "plainText"
          },
          "html" : {
            "title" : "Campaign HTML",
            "type" : "string",
            "description" : "The raw HTML for the campaign"
          },
          "archive" : {
            "$ref" : "#/components/schemas/UploadArchive"
          },
          "url" : {
            "title" : "Campaign URL",
            "type" : "string",
            "description" : "When importing a campaign, the URL for the HTML"
          }
        }
      },
      "RSSOptions1" : {
        "title" : "RSS Options",
        "required" : [ "feed_url", "frequency" ],
        "type" : "object",
        "properties" : {
          "schedule" : {
            "$ref" : "#/components/schemas/SendingSchedule"
          },
          "constrain_rss_img" : {
            "title" : "Constrain RSS Images",
            "type" : "boolean",
            "description" : "Whether to add CSS to images in the RSS feed to constrain their width in campaigns",
            "x-ballerina-name" : "constrainRssImg"
          },
          "feed_url" : {
            "title" : "Feed URL",
            "type" : "string",
            "description" : "The URL for the RSS feed",
            "format" : "uri",
            "x-ballerina-name" : "feedUrl"
          },
          "frequency" : {
            "title" : "Frequency",
            "type" : "string",
            "description" : "The frequency of the RSS Campaign",
            "enum" : [ "daily", "weekly", "monthly" ]
          }
        },
        "description" : "[RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign"
      },
      "InlineResponse20011Budget" : {
        "type" : "object",
        "properties" : {
          "duration" : {
            "type" : "integer",
            "description" : "Duration of the ad in seconds",
            "example" : 86400
          },
          "total_amount" : {
            "type" : "number",
            "description" : "Total budget of the ad",
            "example" : 500.0,
            "x-ballerina-name" : "totalAmount"
          },
          "currency_code" : {
            "type" : "string",
            "description" : "Currency code",
            "example" : "USD",
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "BatchAddremoveListMembersTofromStaticSegment" : {
        "title" : "Batch add/remove List members to/from static segment",
        "type" : "object",
        "properties" : {
          "members_removed" : {
            "title" : "Members Removed",
            "type" : "array",
            "description" : "An array of objects, each representing an existing list member that got deleted from the static segment",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers5"
            },
            "x-ballerina-name" : "membersRemoved"
          },
          "total_added" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "totalAdded"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "members_added" : {
            "title" : "Members Added",
            "type" : "array",
            "description" : "An array of objects, each representing a new member that was added to the static segment",
            "items" : {
              "$ref" : "#/components/schemas/ListMembers5"
            },
            "x-ballerina-name" : "membersAdded"
          },
          "total_removed" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "totalRemoved"
          },
          "error_count" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query, irrespective of pagination",
            "example" : 42,
            "x-ballerina-name" : "errorCount"
          },
          "errors" : {
            "title" : "Errors",
            "type" : "array",
            "description" : "An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details",
            "items" : {
              "$ref" : "#/components/schemas/BatchAddremoveListMembersTofromStaticSegmentErrors"
            }
          }
        },
        "description" : "Batch add/remove List members to/from static segment"
      },
      "RSSOptions3" : {
        "title" : "RSS Options",
        "type" : "object",
        "properties" : {
          "schedule" : {
            "$ref" : "#/components/schemas/SendingSchedule"
          },
          "last_sent" : {
            "title" : "Last Sent",
            "type" : "string",
            "description" : "The date the campaign was last sent",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastSent"
          },
          "constrain_rss_img" : {
            "title" : "Constrain RSS Images",
            "type" : "boolean",
            "description" : "Whether to add CSS to images in the RSS feed to constrain their width in campaigns",
            "x-ballerina-name" : "constrainRssImg"
          },
          "feed_url" : {
            "title" : "Feed URL",
            "type" : "string",
            "description" : "The URL for the RSS feed",
            "format" : "uri",
            "x-ballerina-name" : "feedUrl"
          },
          "frequency" : {
            "title" : "Frequency",
            "type" : "string",
            "description" : "The frequency of the RSS Campaign",
            "enum" : [ "daily", "weekly", "monthly" ]
          }
        },
        "description" : "[RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign"
      },
      "RSSOptions2" : {
        "title" : "RSS Options",
        "required" : [ "feed_url", "frequency" ],
        "type" : "object",
        "properties" : {
          "schedule" : {
            "$ref" : "#/components/schemas/SendingSchedule1"
          },
          "last_sent" : {
            "title" : "Last Sent",
            "type" : "string",
            "description" : "The date the campaign was last sent",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "lastSent"
          },
          "constrain_rss_img" : {
            "title" : "Constrain RSS Images",
            "type" : "boolean",
            "description" : "Whether to add CSS to images in the RSS feed to constrain their width in campaigns",
            "x-ballerina-name" : "constrainRssImg"
          },
          "feed_url" : {
            "title" : "Feed URL",
            "type" : "string",
            "description" : "The URL for the RSS feed",
            "format" : "uri",
            "x-ballerina-name" : "feedUrl"
          },
          "frequency" : {
            "title" : "Frequency",
            "type" : "string",
            "description" : "The frequency of the RSS Campaign",
            "enum" : [ "daily", "weekly", "monthly" ]
          }
        },
        "description" : "[RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign"
      },
      "Opens" : {
        "title" : "Opens",
        "type" : "object",
        "properties" : {
          "proxy_excluded_opens" : {
            "title" : "Proxy Excluded Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign, excluding opens from email clients that use proxies",
            "x-ballerina-name" : "proxyExcludedOpens"
          },
          "opens_total" : {
            "title" : "Total Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign",
            "x-ballerina-name" : "opensTotal"
          },
          "proxy_excluded_open_rate" : {
            "title" : "Proxy Excluded Open Rate",
            "type" : "number",
            "description" : "The average unique open rate for a campaign, excluding opens from email clients that use proxies",
            "x-ballerina-name" : "proxyExcludedOpenRate"
          },
          "proxy_excluded_unique_opens" : {
            "title" : "Proxy Excluded Unique Opens",
            "type" : "integer",
            "description" : "The total number of unique opens for a campaign, excluding opens from email clients that use proxies",
            "x-ballerina-name" : "proxyExcludedUniqueOpens"
          },
          "last_open" : {
            "title" : "Last Open",
            "type" : "string",
            "description" : "The date and time of the last recorded open in ISO 8601 format",
            "format" : "date-time",
            "x-ballerina-name" : "lastOpen"
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The total number of unique opens for a campaign",
            "x-ballerina-name" : "uniqueOpens"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The number of unique opens for a campaign divided by the total number of successful deliveries",
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "An object describing the open activity for the campaign"
      },
      "CollectionOfTags" : {
        "title" : "Collection of Tags",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "tags" : {
            "title" : "Tags",
            "type" : "array",
            "description" : "A list of tags assigned to the list member",
            "items" : {
              "$ref" : "#/components/schemas/CollectionOfTagsTags"
            }
          }
        },
        "description" : "A list of tags assigned to a list member"
      },
      "SubscriberInCustomerJourneysAudience" : {
        "title" : "Subscriber in Customer Journey's audience",
        "required" : [ "email_address" ],
        "type" : "object",
        "properties" : {
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          }
        },
        "description" : "Information about subscribers in a Customer Journey's audience"
      },
      "InlineResponse20013ReportSummaryAverageOrderAmount" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number"
          },
          "currency_code" : {
            "type" : "string",
            "x-ballerina-name" : "currencyCode"
          }
        }
      },
      "InlineResponse2003Apps" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "name" : {
            "title" : "Application Name",
            "type" : "string",
            "description" : "The name of the application"
          },
          "description" : {
            "title" : "Application Description",
            "type" : "string",
            "description" : "A short description of the application"
          },
          "id" : {
            "title" : "Client ID",
            "type" : "integer",
            "description" : "The ID for the application"
          },
          "users" : {
            "title" : "Application Users",
            "type" : "array",
            "description" : "An array of usernames for users who have linked the app",
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "An authorized app"
      },
      "ChimpChatter" : {
        "title" : "ChimpChatter",
        "type" : "object",
        "properties" : {
          "update_time" : {
            "title" : "Update Time",
            "type" : "string",
            "description" : "The date and time this activity was updated",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01Z",
            "x-ballerina-name" : "updateTime"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "If it exists, list ID for the associated list",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01+00:00",
            "x-ballerina-name" : "listId"
          },
          "title" : {
            "title" : "Title",
            "type" : "string",
            "readOnly" : true,
            "example" : "1 new subscriber to Your New Campaign!"
          },
          "message" : {
            "title" : "Message",
            "type" : "string",
            "readOnly" : true,
            "example" : "People are telling their friends about your campaign!"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "The type of activity",
            "readOnly" : true,
            "example" : "campaigns:forward-to-friend",
            "enum" : [ "lists:new-subscriber", "lists:unsubscribes", "lists:profile-updates", "campaigns:facebook-likes", "campaigns:forward-to-friend", "lists:imports" ]
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "URL to a report that includes this activity",
            "readOnly" : true,
            "example" : "http://dev.mailchimp.com/reports/summary?id=1"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "If it exists, campaign ID for the associated campaign",
            "readOnly" : true,
            "example" : "2017-08-04T11:09:01+00:00",
            "x-ballerina-name" : "campaignId"
          }
        },
        "description" : "A Chimp Chatter message"
      },
      "MemberActivity" : {
        "title" : "Member Activity",
        "type" : "object",
        "properties" : {
          "ip" : {
            "title" : "IP",
            "type" : "string",
            "description" : "The IP address recorded for the action"
          },
          "action" : {
            "title" : "Action",
            "type" : "string",
            "description" : "One of the following actions: 'open', 'click', or 'bounce'"
          },
          "type" : {
            "title" : "Type",
            "type" : "string",
            "description" : "If the action is a 'bounce', the type of bounce received: 'hard', 'soft'"
          },
          "url" : {
            "title" : "URL",
            "type" : "string",
            "description" : "If the action is a 'click', the URL on which the member clicked"
          },
          "timestamp" : {
            "title" : "Timestamp",
            "type" : "string",
            "description" : "The date and time recorded for the action in ISO 8601 format",
            "format" : "date-time"
          }
        },
        "description" : "A summary of the interaction with the campaign"
      },
      "SubscriberStats1" : {
        "title" : "Subscriber Stats",
        "type" : "object",
        "properties" : {
          "ecommerce_data" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EcommerceStats"
            } ],
            "x-ballerina-name" : "ecommerceData"
          },
          "avg_click_rate" : {
            "title" : "Average Click Rate",
            "type" : "number",
            "description" : "A subscriber's average clickthrough rate",
            "readOnly" : true,
            "x-ballerina-name" : "avgClickRate"
          },
          "avg_open_rate" : {
            "title" : "Average Open Rate",
            "type" : "number",
            "description" : "A subscriber's average open rate",
            "readOnly" : true,
            "x-ballerina-name" : "avgOpenRate"
          }
        },
        "description" : "Open and click rates for this subscriber",
        "readOnly" : true
      },
      "TemplateInstance1" : {
        "title" : "Template Instance",
        "type" : "object",
        "properties" : {
          "thumbnail" : {
            "title" : "Template Thumbnail",
            "type" : "string",
            "description" : "If available, the URL for a thumbnail of the template",
            "readOnly" : true
          },
          "date_edited" : {
            "title" : "Date Edited",
            "type" : "string",
            "description" : "The date and time the template was edited in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateEdited"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "date_created" : {
            "title" : "Date Created",
            "type" : "string",
            "description" : "The date and time the template was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateCreated"
          },
          "active" : {
            "title" : "Active",
            "type" : "boolean",
            "description" : "User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active",
            "readOnly" : true
          },
          "type" : {
            "title" : "Template Type",
            "type" : "string",
            "description" : "The type of template (user, base, or gallery)",
            "readOnly" : true
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The login name for template's creator",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "drag_and_drop" : {
            "title" : "Drag and Drop",
            "type" : "boolean",
            "description" : "Whether the template uses the drag and drop editor",
            "readOnly" : true,
            "x-ballerina-name" : "dragAndDrop"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the template's content is put together",
            "readOnly" : true,
            "enum" : [ "template", "multichannel", "html" ],
            "x-ballerina-name" : "contentType"
          },
          "share_url" : {
            "title" : "Share URL",
            "type" : "string",
            "description" : "The URL used for [template sharing](https://mailchimp.com/help/share-a-template/)",
            "readOnly" : true,
            "x-ballerina-name" : "shareUrl"
          },
          "responsive" : {
            "title" : "Responsive",
            "type" : "boolean",
            "description" : "Whether the template contains media queries to make it responsive",
            "readOnly" : true
          },
          "name" : {
            "title" : "Template Name",
            "type" : "string",
            "description" : "The name of the template"
          },
          "id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The individual id for the template",
            "readOnly" : true
          },
          "category" : {
            "title" : "Template Category",
            "type" : "string",
            "description" : "If available, the category the template is listed in",
            "readOnly" : true
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "The id of the folder the template is currently in",
            "x-ballerina-name" : "folderId"
          },
          "edited_by" : {
            "title" : "Edited By",
            "type" : "string",
            "description" : "The login name who last edited the template",
            "readOnly" : true,
            "x-ballerina-name" : "editedBy"
          }
        },
        "description" : "Information about a specific template"
      },
      "TemplateInstance2" : {
        "title" : "Template Instance",
        "type" : "object",
        "properties" : {
          "thumbnail" : {
            "title" : "Template Thumbnail",
            "type" : "string",
            "description" : "If available, the URL for a thumbnail of the template",
            "readOnly" : true
          },
          "date_edited" : {
            "title" : "Date Edited",
            "type" : "string",
            "description" : "The date and time the template was edited in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateEdited"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "date_created" : {
            "title" : "Date Created",
            "type" : "string",
            "description" : "The date and time the template was created in ISO 8601 format",
            "format" : "date-time",
            "readOnly" : true,
            "x-ballerina-name" : "dateCreated"
          },
          "active" : {
            "title" : "Active",
            "type" : "boolean",
            "description" : "User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active",
            "readOnly" : true
          },
          "type" : {
            "title" : "Template Type",
            "type" : "string",
            "description" : "The type of template (user, base, or gallery)",
            "readOnly" : true
          },
          "created_by" : {
            "title" : "Created By",
            "type" : "string",
            "description" : "The login name for template's creator",
            "readOnly" : true,
            "x-ballerina-name" : "createdBy"
          },
          "drag_and_drop" : {
            "title" : "Drag and Drop",
            "type" : "boolean",
            "description" : "Whether the template uses the drag and drop editor",
            "readOnly" : true,
            "x-ballerina-name" : "dragAndDrop"
          },
          "content_type" : {
            "title" : "Content Type",
            "type" : "string",
            "description" : "How the template's content is put together",
            "readOnly" : true,
            "enum" : [ "template", "multichannel", "html" ],
            "x-ballerina-name" : "contentType"
          },
          "share_url" : {
            "title" : "Share URL",
            "type" : "string",
            "description" : "The URL used for [template sharing](https://mailchimp.com/help/share-a-template/)",
            "readOnly" : true,
            "x-ballerina-name" : "shareUrl"
          },
          "responsive" : {
            "title" : "Responsive",
            "type" : "boolean",
            "description" : "Whether the template contains media queries to make it responsive",
            "readOnly" : true
          },
          "name" : {
            "title" : "Template Name",
            "type" : "string",
            "description" : "The name of the template"
          },
          "id" : {
            "title" : "Template ID",
            "type" : "integer",
            "description" : "The individual id for the template",
            "readOnly" : true
          },
          "category" : {
            "title" : "Template Category",
            "type" : "string",
            "description" : "If available, the category the template is listed in",
            "readOnly" : true
          },
          "folder_id" : {
            "title" : "Folder ID",
            "type" : "string",
            "description" : "The id of the folder the template is currently in",
            "x-ballerina-name" : "folderId"
          },
          "edited_by" : {
            "title" : "Edited By",
            "type" : "string",
            "description" : "The login name who last edited the template",
            "readOnly" : true,
            "x-ballerina-name" : "editedBy"
          }
        },
        "description" : "Information about a specific template"
      },
      "CollectionOfEvents" : {
        "title" : "Collection of Events",
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "events" : {
            "title" : "Events",
            "type" : "array",
            "description" : "An array of objects, each representing an event",
            "items" : {
              "$ref" : "#/components/schemas/Event"
            }
          }
        },
        "description" : "A collection of events for a given contact"
      },
      "SubscriberRemovedFromAutomationWorkflow1" : {
        "title" : "Subscriber Removed from Automation Workflow",
        "type" : "object",
        "properties" : {
          "workflow_id" : {
            "title" : "Workflow ID",
            "type" : "string",
            "description" : "A string that uniquely identifies an Automation workflow",
            "readOnly" : true,
            "x-ballerina-name" : "workflowId"
          },
          "email_address" : {
            "title" : "Email Address",
            "type" : "string",
            "description" : "The list member's email address",
            "x-ballerina-name" : "emailAddress"
          },
          "list_id" : {
            "title" : "List ID",
            "type" : "string",
            "description" : "A string that uniquely identifies a list",
            "readOnly" : true,
            "x-ballerina-name" : "listId"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "id" : {
            "title" : "Email Hash",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true
          }
        },
        "description" : "A summary of a subscriber removed from an Automation workflow"
      },
      "TwitterStats" : {
        "title" : "Twitter Stats",
        "type" : "object",
        "properties" : {
          "last_tweet" : {
            "title" : "Last Tweet Timestamp",
            "type" : "string",
            "description" : "The day and time of the last recorded tweet with a link to the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "lastTweet"
          },
          "statuses" : {
            "title" : "Twitter Status",
            "type" : "array",
            "description" : "A summary of tweets that include a link to the campaign",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/TwitterStatus"
            }
          },
          "first_tweet" : {
            "title" : "First Tweet Timestamp",
            "type" : "string",
            "description" : "The day and time of the first recorded tweet with a link to the campaign",
            "readOnly" : true,
            "x-ballerina-name" : "firstTweet"
          },
          "tweets" : {
            "title" : "Tweet Count",
            "type" : "integer",
            "description" : "The number of tweets including a link to the campaign",
            "readOnly" : true
          },
          "retweets" : {
            "title" : "Retweet Count",
            "type" : "integer",
            "description" : "The number of retweets that include a link to the campaign",
            "readOnly" : true
          }
        },
        "description" : "A summary of Twitter activity for a campaign"
      },
      "SubscriberList" : {
        "title" : "Subscriber List",
        "required" : [ "campaign_defaults", "contact", "email_type_option", "name", "permission_reminder" ],
        "type" : "object",
        "properties" : {
          "notify_on_subscribe" : {
            "title" : "Notify on Subscribe",
            "type" : "string",
            "description" : "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnSubscribe"
          },
          "email_type_option" : {
            "title" : "Email Type Option",
            "type" : "boolean",
            "description" : "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup",
            "x-ballerina-name" : "emailTypeOption"
          },
          "marketing_permissions" : {
            "title" : "Marketing Permissions",
            "type" : "boolean",
            "description" : "Whether or not the list has marketing permissions (eg. GDPR) enabled",
            "default" : false,
            "x-ballerina-name" : "marketingPermissions"
          },
          "permission_reminder" : {
            "title" : "Permission Reminder",
            "type" : "string",
            "description" : "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list",
            "x-ballerina-name" : "permissionReminder"
          },
          "use_archive_bar" : {
            "title" : "Use Archive Bar",
            "type" : "boolean",
            "description" : "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default",
            "default" : false,
            "x-ballerina-name" : "useArchiveBar"
          },
          "notify_on_unsubscribe" : {
            "title" : "Notify on Unsubscribe",
            "type" : "string",
            "description" : "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to",
            "default" : "false",
            "x-ballerina-name" : "notifyOnUnsubscribe"
          },
          "contact" : {
            "$ref" : "#/components/schemas/ListContact"
          },
          "name" : {
            "title" : "List Name",
            "type" : "string",
            "description" : "The name of the list"
          },
          "double_optin" : {
            "title" : "Double Opt In",
            "type" : "boolean",
            "description" : "Whether or not to require the subscriber to confirm subscription via email",
            "default" : false,
            "x-ballerina-name" : "doubleOptin"
          },
          "campaign_defaults" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/CampaignDefaults"
            } ],
            "x-ballerina-name" : "campaignDefaults"
          }
        },
        "description" : "Information about a specific list"
      },
      "ECommerceCartLineItem" : {
        "title" : "E-commerce Cart Line Item",
        "required" : [ "id", "price", "product_id", "product_variant_id", "quantity" ],
        "type" : "object",
        "properties" : {
          "quantity" : {
            "title" : "Quantity",
            "type" : "integer",
            "description" : "The quantity of a cart line item"
          },
          "price" : {
            "title" : "Price",
            "type" : "number",
            "description" : "The price of a cart line item"
          },
          "product_id" : {
            "title" : "Cart Line Product Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product associated with the cart line item",
            "x-ballerina-name" : "productId"
          },
          "id" : {
            "title" : "Cart Line Item Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the cart line item"
          },
          "product_variant_id" : {
            "title" : "Cart Line Product Variant Foreign ID",
            "type" : "string",
            "description" : "A unique identifier for the product variant associated with the cart line item",
            "x-ballerina-name" : "productVariantId"
          }
        },
        "description" : "Information about a specific cart line item"
      },
      "Contact" : {
        "title" : "Contact",
        "type" : "object",
        "properties" : {
          "email_id" : {
            "title" : "Email ID",
            "type" : "string",
            "description" : "The MD5 hash of the lowercase version of the list member's email address",
            "readOnly" : true,
            "x-ballerina-name" : "emailId"
          },
          "full_name" : {
            "title" : "Full Name",
            "type" : "string",
            "description" : "The contact's full name",
            "readOnly" : true,
            "x-ballerina-name" : "fullName"
          },
          "avatar_url" : {
            "title" : "Avatar URL",
            "type" : "string",
            "description" : "URL for the contact's avatar or profile image",
            "readOnly" : true,
            "x-ballerina-name" : "avatarUrl"
          },
          "phone" : {
            "title" : "Contact SMS Phone",
            "type" : "string",
            "description" : "The contact's sms phone number",
            "readOnly" : true
          },
          "contact_id" : {
            "title" : "Contact ID",
            "type" : "string",
            "description" : "The ID of this contact",
            "readOnly" : true,
            "x-ballerina-name" : "contactId"
          },
          "email" : {
            "title" : "Contact Email",
            "type" : "string",
            "description" : "The contact's email address",
            "readOnly" : true
          },
          "status" : {
            "title" : "Contact Status",
            "type" : "string",
            "description" : "The contact's current status",
            "readOnly" : true,
            "enum" : [ "Subscribed", "Unsubscribed", "Non-Subscribed", "Cleaned", "Archived" ]
          },
          "consents_to_one_to_one_messaging" : {
            "title" : "Messaging Consent",
            "type" : "boolean",
            "description" : "Indicates whether a contact consents to 1:1 messaging",
            "readOnly" : true,
            "x-ballerina-name" : "consentsToOneToOneMessaging"
          }
        },
        "description" : "Information about the contact",
        "readOnly" : true
      },
      "ResendShortcutUsage" : {
        "title" : "Resend Shortcut Usage",
        "type" : "object",
        "properties" : {
          "original_campaign" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/OriginalCampaign"
            } ],
            "x-ballerina-name" : "originalCampaign"
          },
          "shortcut_campaigns" : {
            "title" : "Shortcut Campaigns",
            "type" : "array",
            "description" : "Campaigns that were created from Campaign Resend Shortcuts for this campaign",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResendShortcutUsageShortcutCampaigns"
            },
            "x-ballerina-name" : "shortcutCampaigns"
          }
        },
        "description" : "Information about campaigns related through shortcuts"
      },
      "Response" : {
        "title" : "Response",
        "type" : "object",
        "properties" : {
          "answer" : {
            "title" : "Answer",
            "type" : "string",
            "description" : "The answer to this survey question"
          },
          "question_type" : {
            "title" : "Question Type",
            "type" : "string",
            "description" : "The type of question this is",
            "enum" : [ "pickOne", "pickMany", "range", "text", "email" ],
            "x-ballerina-name" : "questionType"
          },
          "query" : {
            "title" : "Question Query",
            "type" : "string",
            "description" : "The survey question"
          },
          "question_id" : {
            "title" : "Question ID",
            "type" : "string",
            "description" : "The unique ID for this question",
            "x-ballerina-name" : "questionId"
          }
        },
        "description" : "A single question and the response to that question"
      },
      "SubscriberStats" : {
        "title" : "Subscriber Stats",
        "type" : "object",
        "properties" : {
          "avg_click_rate" : {
            "title" : "Average Click Rate",
            "type" : "number",
            "description" : "A subscriber's average clickthrough rate",
            "readOnly" : true,
            "x-ballerina-name" : "avgClickRate"
          },
          "avg_open_rate" : {
            "title" : "Average Open Rate",
            "type" : "number",
            "description" : "A subscriber's average open rate",
            "readOnly" : true,
            "x-ballerina-name" : "avgOpenRate"
          }
        },
        "description" : "Open and click rates for this subscriber",
        "readOnly" : true
      },
      "CampaignSettings" : {
        "title" : "Campaign Settings",
        "type" : "object",
        "properties" : {
          "subject_line" : {
            "title" : "Campaign Subject Line",
            "type" : "string",
            "description" : "The subject line for the campaign",
            "x-ballerina-name" : "subjectLine"
          },
          "preview_text" : {
            "title" : "Campaign Preview Text",
            "type" : "string",
            "description" : "The preview text for the campaign",
            "x-ballerina-name" : "previewText"
          },
          "reply_to" : {
            "title" : "Reply To Address",
            "type" : "string",
            "description" : "The reply-to email address for the Automation",
            "x-ballerina-name" : "replyTo"
          },
          "title" : {
            "title" : "Automation Title",
            "type" : "string",
            "description" : "The title of the Automation"
          },
          "from_name" : {
            "title" : "From Name",
            "type" : "string",
            "description" : "The 'from' name for the Automation (not an email address)",
            "x-ballerina-name" : "fromName"
          }
        },
        "description" : "Settings for the campaign including the email subject, from name, and from email address"
      },
      "AnOptionForSignupFormStyles" : {
        "title" : "An option for Signup Form Styles",
        "type" : "object",
        "properties" : {
          "property" : {
            "title" : "Property",
            "type" : "string",
            "description" : "A string that identifies the property",
            "example" : "background-color"
          },
          "value" : {
            "title" : "Value",
            "type" : "string",
            "description" : "A string that identifies value of the property",
            "example" : "#111111"
          }
        },
        "description" : "An option for Signup Form Styles"
      },
      "OpenDetailReport" : {
        "title" : "Open Detail Report",
        "type" : "object",
        "properties" : {
          "total_opens" : {
            "title" : "Total opens",
            "type" : "integer",
            "description" : "The total number of opens matching the query regardless of pagination",
            "x-ballerina-name" : "totalOpens"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "members" : {
            "title" : "Open Reports",
            "type" : "array",
            "description" : "An array of objects, each representing a list member who opened a campaign email. Each members object will contain information about the number of total opens by a single member, as well as timestamps for each open event",
            "items" : {
              "$ref" : "#/components/schemas/OpenActivity1"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          },
          "campaign_id" : {
            "title" : "Campaign ID",
            "type" : "string",
            "description" : "The campaign id",
            "readOnly" : true,
            "x-ballerina-name" : "campaignId"
          },
          "total_proxy_excluded_opens" : {
            "title" : "Total Proxy Excluded Opens",
            "type" : "integer",
            "description" : "The total number of opens excluding opens from email clients that use proxies regardless of pagination",
            "x-ballerina-name" : "totalProxyExcludedOpens"
          }
        },
        "description" : "A detailed report of any campaign emails that were opened by a list member"
      },
      "OpenLocationsLocations" : {
        "type" : "object",
        "properties" : {
          "proxy_excluded_opens" : {
            "title" : "Proxy Excluded Opens",
            "type" : "integer",
            "description" : "The number of unique campaign opens for a region excluding opens from email clients that use proxies",
            "readOnly" : true,
            "x-ballerina-name" : "proxyExcludedOpens"
          },
          "country_code" : {
            "title" : "Country Code",
            "type" : "string",
            "description" : "The ISO 3166 2 digit country code",
            "readOnly" : true,
            "x-ballerina-name" : "countryCode"
          },
          "opens" : {
            "title" : "Opens",
            "type" : "integer",
            "description" : "The number of unique campaign opens for a region",
            "readOnly" : true
          },
          "region_name" : {
            "title" : "Region Name",
            "type" : "string",
            "description" : "The name of the region, if we have one. For blank \"region\" values, this will be \"Rest of Country\"",
            "readOnly" : true,
            "x-ballerina-name" : "regionName"
          },
          "region" : {
            "title" : "Region",
            "type" : "string",
            "description" : "An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region",
            "readOnly" : true
          }
        }
      },
      "DailyListActivity" : {
        "title" : "Daily List Activity",
        "type" : "object",
        "properties" : {
          "soft_bounce" : {
            "title" : "Soft Bounces",
            "type" : "integer",
            "description" : "The number of soft bounces",
            "readOnly" : true,
            "x-ballerina-name" : "softBounce"
          },
          "hard_bounce" : {
            "title" : "Hard Bounces",
            "type" : "integer",
            "description" : "The number of hard bounces",
            "readOnly" : true,
            "x-ballerina-name" : "hardBounce"
          },
          "subs" : {
            "title" : "Subscribes",
            "type" : "integer",
            "description" : "The number of subscribes",
            "readOnly" : true
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "emails_sent" : {
            "title" : "Emails Sent",
            "type" : "integer",
            "description" : "The total number of emails sent on the date for the activity summary",
            "readOnly" : true,
            "x-ballerina-name" : "emailsSent"
          },
          "unsubs" : {
            "title" : "Unsubscribes",
            "type" : "integer",
            "description" : "The number of unsubscribes",
            "readOnly" : true
          },
          "recipient_clicks" : {
            "title" : "Recipient Clicks",
            "type" : "integer",
            "description" : "The number of clicks",
            "readOnly" : true,
            "x-ballerina-name" : "recipientClicks"
          },
          "other_adds" : {
            "title" : "Other Adds",
            "type" : "integer",
            "description" : "The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity",
            "readOnly" : true,
            "x-ballerina-name" : "otherAdds"
          },
          "day" : {
            "title" : "Day",
            "type" : "string",
            "description" : "The date for the activity summary",
            "readOnly" : true
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueOpens"
          },
          "other_removes" : {
            "title" : "Other Removes",
            "type" : "integer",
            "description" : "The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers)",
            "readOnly" : true,
            "x-ballerina-name" : "otherRemoves"
          }
        },
        "description" : "One day's worth of list activity. Doesn't include Automation activity"
      },
      "InlineResponse20010" : {
        "type" : "object",
        "properties" : {
          "facebook_ads" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20010FacebookAds"
            },
            "x-ballerina-name" : "facebookAds"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "Contains an array of facebook ads"
      },
      "CampaignReportSummary" : {
        "title" : "Campaign Report Summary",
        "type" : "object",
        "properties" : {
          "subscriber_clicks" : {
            "title" : "Unique Subscriber Clicks",
            "type" : "integer",
            "description" : "The number of unique clicks",
            "readOnly" : true,
            "x-ballerina-name" : "subscriberClicks"
          },
          "click_rate" : {
            "title" : "Click Rate",
            "type" : "number",
            "description" : "The number of unique clicks divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "clickRate"
          },
          "opens" : {
            "title" : "Automation Opens",
            "type" : "integer",
            "description" : "The total number of opens for a campaign",
            "readOnly" : true
          },
          "clicks" : {
            "title" : "Total Clicks",
            "type" : "integer",
            "description" : "The total number of clicks for an campaign",
            "readOnly" : true
          },
          "unique_opens" : {
            "title" : "Unique Opens",
            "type" : "integer",
            "description" : "The number of unique opens",
            "readOnly" : true,
            "x-ballerina-name" : "uniqueOpens"
          },
          "open_rate" : {
            "title" : "Open Rate",
            "type" : "number",
            "description" : "The number of unique opens divided by the total number of successful deliveries",
            "readOnly" : true,
            "x-ballerina-name" : "openRate"
          }
        },
        "description" : "For sent campaigns, a summary of opens and clicks"
      },
      "InlineResponse20012" : {
        "type" : "object",
        "properties" : {
          "facebook_ads" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/InlineResponse20012FacebookAds"
            },
            "x-ballerina-name" : "facebookAds"
          },
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of Facebook ads"
      },
      "InlineResponse20011" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InlineResponse20011AllOf1"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20011InlineResponse20011AllOf12"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20011InlineResponse20011InlineResponse20011AllOf123"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20011InlineResponse20011InlineResponse20011InlineResponse20011AllOf1234"
        } ]
      },
      "InlineResponse20014" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "landing_pages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LandingPageReport1"
            },
            "x-ballerina-name" : "landingPages"
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        },
        "description" : "A collection of landing pages"
      },
      "InlineResponse20013" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InlineResponse20013AllOf1"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20013InlineResponse20013AllOf12"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20013InlineResponse20013InlineResponse20013AllOf123"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20013InlineResponse20013InlineResponse20013InlineResponse20013AllOf1234"
        }, {
          "$ref" : "#/components/schemas/InlineResponse20013AllOf5"
        } ]
      },
      "InlineResponse20016" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "questions" : {
            "title" : "Question Reports",
            "type" : "array",
            "description" : "An array of reports for each question on the survey",
            "items" : {
              "$ref" : "#/components/schemas/SurveyQuestionReport1"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        }
      },
      "InlineResponse20015" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "surveys" : {
            "title" : "Surveys",
            "type" : "array",
            "description" : "The surveys that have reports available",
            "items" : {
              "$ref" : "#/components/schemas/SurveyReport"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        }
      },
      "InlineResponse20018" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "responses" : {
            "title" : "Responses",
            "type" : "array",
            "description" : "An array of responses to a survey",
            "items" : {
              "$ref" : "#/components/schemas/SurveyRespondents"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        }
      },
      "InlineResponse20017" : {
        "type" : "object",
        "properties" : {
          "_links" : {
            "title" : "Links",
            "type" : "array",
            "description" : "A list of link types and descriptions for the API schema documents",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceLink"
            },
            "x-ballerina-name" : "links"
          },
          "answers" : {
            "title" : "Answers",
            "type" : "array",
            "description" : "An array of answers for a question on the survey",
            "items" : {
              "$ref" : "#/components/schemas/SurveyQuestionAnswer"
            }
          },
          "total_items" : {
            "title" : "Item Count",
            "type" : "integer",
            "description" : "The total number of items matching the query regardless of pagination",
            "readOnly" : true,
            "x-ballerina-name" : "totalItems"
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  },
  "x-doc-structure" : {
    "resources" : {
      "root" : {
        "title" : "API Root",
        "description" : "The API root resource links to all other resources available in the API. Calling the root directory also returns details about the Mailchimp user account.",
        "paths" : [ "/" ],
        "subResources" : [ ]
      },
      "chimp-chatter" : {
        "title" : "Chimp Chatter Activity",
        "description" : "Get the latest Chimp Chatter activity from your account.",
        "paths" : [ "/activity-feed/chimp-chatter" ]
      },
      "authorized-apps" : {
        "title" : "Authorized Apps",
        "description" : "Manage registered, connected apps for your Mailchimp account with the Authorized Apps endpoints.",
        "paths" : [ "/authorized-apps", "/authorized-apps/{app_id}" ]
      },
      "automation" : {
        "title" : "Automations",
        "description" : "Mailchimp's classic automations feature lets you build a series of emails that send to subscribers when triggered by a specific date, activity, or event. Use the API to manage Automation workflows, emails, and queues. Does not include Customer Journeys.",
        "paths" : [ "/automations", "/automations/{workflow_id}", "/automations/{workflow_id}/actions/start-all-emails", "/automations/{workflow_id}/actions/pause-all-emails", "/automations/{workflow_id}/actions/archive" ],
        "subResources" : [ "automation-email", "automation-removed-subscribers" ]
      },
      "automation-email" : {
        "title" : "Emails",
        "description" : "Manage individual emails in a classic automation workflow.",
        "paths" : [ "/automations/{workflow_id}/emails", "/automations/{workflow_id}/emails/{workflow_email_id}", "/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause", "/automations/{workflow_id}/emails/{workflow_email_id}/actions/start" ],
        "subResources" : [ "automation-email-queue" ]
      },
      "automation-email-queue" : {
        "title" : "Queue",
        "description" : "Manage list member queues for classic automation emails.",
        "paths" : [ "/automations/{workflow_id}/emails/{workflow_email_id}/queue", "/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}" ],
        "subResources" : [ ]
      },
      "automation-removed-subscribers" : {
        "title" : "Removed Subscribers",
        "description" : "Remove subscribers from a classic automation workflow.",
        "paths" : [ "/automations/{workflow_id}/removed-subscribers", "/automations/{workflow_id}/removed-subscribers/{subscriber_hash}" ],
        "subResources" : [ ]
      },
      "batch-operations" : {
        "title" : "Batch Operations",
        "description" : "Use batch operations to complete multiple operations with a single call.",
        "paths" : [ "/batches", "/batches/{batch_id}" ]
      },
      "batch-webhooks" : {
        "title" : "Batch Webhooks",
        "description" : "Manage webhooks for batch operations.",
        "paths" : [ "/batch-webhooks", "/batch-webhooks/{batch_webhook_id}" ]
      },
      "account-exports" : {
        "title" : "Account Exports",
        "description" : "Generate a new account export or download a finished account export.",
        "paths" : [ "/account-exports", "/account-exports/{export_id}" ]
      },
      "campaigns" : {
        "title" : "Campaigns",
        "description" : "Campaigns are how you send emails to your Mailchimp list. Use the Campaigns API calls to manage campaigns in your Mailchimp account.",
        "paths" : [ "/campaigns", "/campaigns/{campaign_id}", "/campaigns/{campaign_id}/actions/cancel-send", "/campaigns/{campaign_id}/actions/send", "/campaigns/{campaign_id}/actions/schedule", "/campaigns/{campaign_id}/actions/unschedule", "/campaigns/{campaign_id}/actions/pause", "/campaigns/{campaign_id}/actions/resume", "/campaigns/{campaign_id}/actions/replicate", "/campaigns/{campaign_id}/actions/test", "/campaigns/{campaign_id}/actions/create-resend" ],
        "subResources" : [ "campaign-feedback", "campaign-checklist", "campaign-content" ]
      },
      "campaign-feedback" : {
        "title" : "Feedback",
        "description" : "Post comments, reply to team feedback, and send test emails while you're working together on a Mailchimp campaign.",
        "paths" : [ "/campaigns/{campaign_id}/feedback", "/campaigns/{campaign_id}/feedback/{feedback_id}" ]
      },
      "campaign-checklist" : {
        "title" : "Send Checklist",
        "description" : "Review the send checklist for your campaign, and resolve any issues before sending.",
        "paths" : [ "/campaigns/{campaign_id}/send-checklist" ]
      },
      "campaign-content" : {
        "title" : "Content",
        "description" : "Manage the HTML, plain-text, and template content for your Mailchimp campaigns.",
        "paths" : [ "/campaigns/{campaign_id}/content" ]
      },
      "connected-sites" : {
        "title" : "Connected Sites",
        "description" : "Manage sites you've connected to your Mailchimp account.",
        "paths" : [ "/connected-sites", "/connected-sites/{connected_site_id}", "/connected-sites/{connected_site_id}/actions/verify-script-installation" ]
      },
      "conversations" : {
        "title" : "Conversations",
        "description" : "Conversation tracking lets you view subscribers' replies to your campaigns in your Mailchimp account.",
        "paths" : [ "/conversations", "/conversations/{conversation_id}" ],
        "subResources" : [ "conversation-messages" ]
      },
      "conversation-messages" : {
        "title" : "Messages",
        "description" : "Manage messages in a specific campaign conversation.",
        "paths" : [ "/conversations/{conversation_id}/messages", "/conversations/{conversation_id}/messages/{message_id}" ]
      },
      "customer-journeys-journeys-steps-actions" : {
        "title" : "Customer Journeys",
        "description" : "Manage Customer Journey automated workflows",
        "paths" : [ "/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger" ],
        "subResources" : [ ]
      },
      "file-manager" : {
        "title" : "File Manager",
        "description" : "Manage files for your Mailchimp account. The File Manager is a place to store images, documents, and other files you include or link to in your campaigns, templates, or signup forms.",
        "paths" : [ ],
        "subResources" : [ "file-manager-folders", "file-manager-files" ]
      },
      "file-manager-folders" : {
        "title" : "File Manager Folders",
        "description" : "Manage specific folders in the File Manager for your Mailchimp account.",
        "paths" : [ "/file-manager/folders", "/file-manager/folders/{folder_id}" ],
        "subResources" : [ "file-manager-folders-files" ]
      },
      "file-manager-files" : {
        "title" : "File Manager Files",
        "description" : "Manage specific files in the File Manager for your Mailchimp account.",
        "paths" : [ "/file-manager/files", "/file-manager/files/{file_id}" ]
      },
      "file-manager-folders-files" : {
        "title" : "Files in Folder",
        "description" : "Manage specific files in a folder.",
        "paths" : [ "/file-manager/folders/{folder_id}/files" ]
      },
      "landing-pages" : {
        "title" : "Landing Pages",
        "description" : "Manage your Landing Pages, including publishing and unpublishing.",
        "paths" : [ "/landing-pages", "/landing-pages/{page_id}", "/landing-pages/{page_id}/actions/publish", "/landing-pages/{page_id}/actions/unpublish" ],
        "subResources" : [ "landing-pages-content" ]
      },
      "landing-pages-content" : {
        "title" : "Content",
        "description" : "The HTML content for your Mailchimp landing pages.",
        "paths" : [ "/landing-pages/{page_id}/content" ]
      },
      "lists" : {
        "title" : "Lists/Audiences",
        "description" : "Your Mailchimp list, also known as your audience, is where you store and manage all of your contacts.",
        "paths" : [ "/lists", "/lists/{list_id}" ],
        "subResources" : [ "interest-categories", "list-segments", "abuse-reports", "list-activity", "list-clients", "list-growth-history", "list-imports", "list-members", "list-merges", "list-webhooks", "list-signup-forms", "list-locations", "lists-tags-search", "prebuilt-segments", "list-preview-segment", "list-surveys", "list-sms-program" ]
      },
      "list-members" : {
        "title" : "Members",
        "description" : "Manage members of a specific Mailchimp list, including currently subscribed, unsubscribed, and bounced members.",
        "paths" : [ "/lists/{list_id}/members", "/lists/{list_id}/members/{subscriber_hash}", "/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent" ],
        "subResources" : [ "list-member-activity", "list-member-activity-feed", "list-member-goal", "list-member-notes", "list-member-tags", "list-member-events" ]
      },
      "list-merges" : {
        "title" : "Merge Fields",
        "description" : "Manage merge fields for an audience. See [Merge Field documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/) for more.",
        "paths" : [ "/lists/{list_id}/merge-fields", "/lists/{list_id}/merge-fields/{merge_id}" ],
        "subResources" : [ ]
      },
      "abuse-reports" : {
        "title" : "Abuse Reports",
        "description" : "Manage abuse complaints for a specific list. An abuse complaint occurs when your recipient reports an email as spam in their mail program.",
        "paths" : [ "/lists/{list_id}/abuse-reports", "/lists/{list_id}/abuse-reports/{report_id}" ]
      },
      "list-activity" : {
        "title" : "Activity",
        "description" : "Get recent daily, aggregated activity stats for your list. For example, view unsubscribes, signups, total emails sent, opens, clicks, and more, for up to 180 days.",
        "paths" : [ "/lists/{list_id}/activity" ]
      },
      "list-clients" : {
        "title" : "Clients",
        "description" : "Get information about the most popular email clients for subscribers in a specific Mailchimp list.",
        "paths" : [ "/lists/{list_id}/clients" ]
      },
      "list-growth-history" : {
        "title" : "Growth History",
        "description" : "View a summary of the month-by-month growth activity for a specific list.",
        "paths" : [ "/lists/{list_id}/growth-history", "/lists/{list_id}/growth-history/{month}" ]
      },
      "list-webhooks" : {
        "title" : "Webhooks",
        "description" : "Manage webhooks for a specific Mailchimp list.",
        "paths" : [ "/lists/{list_id}/webhooks", "/lists/{list_id}/webhooks/{webhook_id}" ]
      },
      "list-surveys" : {
        "title" : "Surveys",
        "description" : "Get survey data for this audience.",
        "paths" : [ "/lists/{list_id}/surveys", "/lists/{list_id}/surveys/{survey_id}", "/lists/{list_id}/surveys/{survey_id}/actions/publish", "/lists/{list_id}/surveys/{survey_id}/actions/unpublish", "/lists/{list_id}/surveys/{survey_id}/actions/create-email" ]
      },
      "interest-categories" : {
        "title" : "Interest Categories",
        "description" : "Manage interest categories for a specific list. Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to 'group titles' in the Mailchimp application.",
        "paths" : [ "/lists/{list_id}/interest-categories", "/lists/{list_id}/interest-categories/{interest_category_id}" ],
        "subResources" : [ "interests" ]
      },
      "interests" : {
        "title" : "Interests",
        "description" : "Manage interests for a specific Mailchimp list. Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application.",
        "paths" : [ "/lists/{list_id}/interest-categories/{interest_category_id}/interests", "/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}" ]
      },
      "lists-tags-search" : {
        "title" : "Tag Search",
        "description" : "Search for tags on a list by name.",
        "paths" : [ "/lists/{list_id}/tag-search" ]
      },
      "list-segments" : {
        "title" : "Segments",
        "description" : "Manage segments and tags for a specific Mailchimp list. A segment is a section of your list that includes only those subscribers who share specific common field information. Tags are labels you create to help organize your contacts.",
        "paths" : [ "/lists/{list_id}/segments", "/lists/{list_id}/segments/{segment_id}" ],
        "subResources" : [ "list-segment-members" ]
      },
      "list-segment-members" : {
        "title" : "Segment Members",
        "description" : "Manage list members in a saved segment.",
        "paths" : [ "/lists/{list_id}/segments/{segment_id}/members", "/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}" ]
      },
      "list-member-activity" : {
        "title" : "Member Activity",
        "description" : "Get details about a subscriber's recent activity. Use the new activity-feed endpoint to access more events for a given contact.",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/activity" ]
      },
      "list-member-activity-feed" : {
        "title" : "Member Activity Feed",
        "description" : "Get details about a subscriber's recent activity.",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/activity-feed" ]
      },
      "list-member-goal" : {
        "title" : "Member Goals",
        "description" : "Get information about recent goal events for a specific list member.",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/goals" ]
      },
      "list-member-notes" : {
        "title" : "Member Notes",
        "description" : "Retrieve recent notes for a specific list member.",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/notes", "/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}" ]
      },
      "list-member-tags" : {
        "title" : "Member Tags",
        "description" : "Manage all the tags that have been assigned to a contact.",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/tags" ]
      },
      "list-member-events" : {
        "title" : "Events",
        "description" : "Use the Events endpoint to collect website or in-app actions and trigger targeted automations. ",
        "paths" : [ "/lists/{list_id}/members/{subscriber_hash}/events" ]
      },
      "list-signup-forms" : {
        "title" : "Signup Forms",
        "description" : "Manage list signup forms.",
        "paths" : [ "/lists/{list_id}/signup-forms" ]
      },
      "list-locations" : {
        "title" : "Locations",
        "description" : "Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.",
        "paths" : [ "/lists/{list_id}/locations" ]
      },
      "reports" : {
        "title" : "Reports",
        "description" : "Manage campaign reports for your Mailchimp account. All Reports endpoints are read-only. Mailchimp's campaign and automation reports analyze clicks, opens, subscribers' social activity, e-commerce data, and more. Note: Campaign IDs for A/B Testing Campaigns are available through the Campaign API Endpoint's Read method.",
        "paths" : [ "/reports", "/reports/{campaign_id}" ],
        "subResources" : [ "campaign-abuse", "campaign-advice", "click-reports", "domain-performance-reports", "eepurl-reports", "email-activity-reports", "location-reports", "sent-to-reports", "sub-reports", "unsub-reports", "open-reports", "campaign-ecommerce-product-activity" ]
      },
      "campaign-abuse" : {
        "title" : "Campaign Abuse",
        "description" : "Get information about campaign abuse complaints.",
        "paths" : [ "/reports/{campaign_id}/abuse-reports", "/reports/{campaign_id}/abuse-reports/{report_id}" ]
      },
      "campaign-advice" : {
        "title" : "Campaign Advice",
        "description" : "Get recent feedback based on a campaign's statistics.",
        "paths" : [ "/reports/{campaign_id}/advice" ]
      },
      "open-reports" : {
        "title" : "Campaign Open Reports",
        "description" : "Get a detailed report about any emails in a specific campaign that were opened by the recipient. ",
        "paths" : [ "/reports/{campaign_id}/open-details", "/reports/{campaign_id}/open-details/{subscriber_hash}" ]
      },
      "click-reports" : {
        "title" : "Click Reports",
        "description" : "Get detailed information about links clicked in campaigns.",
        "paths" : [ "/reports/{campaign_id}/click-details", "/reports/{campaign_id}/click-details/{link_id}" ],
        "subResources" : [ "link-clickers" ]
      },
      "campaign-ecommerce-product-activity" : {
        "title" : "Ecommerce Product Activity",
        "description" : "Ecommerce product activity report for a campaign.",
        "paths" : [ "/reports/{campaign_id}/ecommerce-product-activity" ]
      },
      "link-clickers" : {
        "title" : "Click Reports Members",
        "description" : "Get information about specific subscribers who clicked on links in a campaign.",
        "paths" : [ "/reports/{campaign_id}/click-details/{link_id}/members", "/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}" ]
      },
      "domain-performance-reports" : {
        "title" : "Domain Performance",
        "description" : "Get statistics for the top-performing domains from a campaign.",
        "paths" : [ "/reports/{campaign_id}/domain-performance" ]
      },
      "eepurl-reports" : {
        "title" : "EepURL Reports",
        "description" : "Get a summary of social activity for the campaign, tracked by EepURL.",
        "paths" : [ "/reports/{campaign_id}/eepurl" ]
      },
      "email-activity-reports" : {
        "title" : "Email Activity",
        "description" : "Get list member activity for a specific campaign.",
        "paths" : [ "/reports/{campaign_id}/email-activity", "/reports/{campaign_id}/email-activity/{subscriber_hash}" ]
      },
      "location-reports" : {
        "title" : "Location",
        "description" : "Get top open locations for a specific campaign.",
        "paths" : [ "/reports/{campaign_id}/locations" ]
      },
      "sent-to-reports" : {
        "title" : "Sent To",
        "description" : "Get details about campaign recipients.",
        "paths" : [ "/reports/{campaign_id}/sent-to", "/reports/{campaign_id}/sent-to/{subscriber_hash}" ]
      },
      "sub-reports" : {
        "title" : "Sub-Reports",
        "description" : "A list of reports for child campaigns of a specific parent campaign. For example, use this endpoint to view Multivariate, RSS, and A/B Testing Campaign reports.",
        "paths" : [ "/reports/{campaign_id}/sub-reports" ]
      },
      "unsub-reports" : {
        "title" : "Unsubscribes",
        "description" : "Get information about list members who unsubscribed from a specific campaign.",
        "paths" : [ "/reports/{campaign_id}/unsubscribed", "/reports/{campaign_id}/unsubscribed/{subscriber_hash}" ]
      },
      "templates" : {
        "title" : "Templates",
        "description" : "Manage your Mailchimp templates. A template is an HTML file used to create the layout and basic design for a campaign. ",
        "paths" : [ "/templates", "/templates/{template_id}" ],
        "subResources" : [ "template-default-content" ]
      },
      "template-default-content" : {
        "title" : "Default Content",
        "description" : "Manage the default content for a Mailchimp template.",
        "paths" : [ "/templates/{template_id}/default-content" ]
      },
      "template-folders" : {
        "title" : "Template Folders",
        "description" : "Organize your templates using folders.",
        "paths" : [ "/template-folders", "/template-folders/{folder_id}" ]
      },
      "campaign-folders" : {
        "title" : "Campaign Folders",
        "description" : "Organize your campaigns using folders.",
        "paths" : [ "/campaign-folders", "/campaign-folders/{folder_id}" ]
      },
      "ecommerce-stores" : {
        "title" : "E-commerce Stores",
        "description" : "Connect your E-commerce Store to Mailchimp to take advantage of powerful reporting and personalization features and to learn more about your customers.",
        "paths" : [ "/ecommerce/stores", "/ecommerce/stores/{store_id}" ],
        "subResources" : [ "ecommerce-customers", "ecommerce-orders", "ecommerce-products", "ecommerce-carts", "ecommerce-promo-rules", "ecommerce-collections" ]
      },
      "ecommerce-customers" : {
        "title" : "Customers",
        "description" : "Add Customers to your Store to track their orders and to view E-Commerce Data for your Mailchimp lists and campaigns. Each Customer is connected to a Mailchimp list member, so adding a Customer can also add or update a list member.",
        "paths" : [ "/ecommerce/stores/{store_id}/customers", "/ecommerce/stores/{store_id}/customers/{customer_id}" ]
      },
      "ecommerce-promo-rules" : {
        "title" : "Promo Rules",
        "description" : "Promo Rules help you create promo codes for your campaigns. Promo Rules define generic information about promo codes like expiration time, start time, amount of discount being offered etc. For a given promo rule you can define if it's a percentage discount or a fixed amount and if it applies for the order as a whole or if it's per item or free shipping. You can then create promo codes for this price rule. Promo codes contain the actual code that is applied at checkout along with some other information. Price Rules have one to many relationship with promo codes.",
        "paths" : [ "/ecommerce/stores/{store_id}/promo-rules", "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}" ],
        "subResources" : [ "ecommerce-promo-codes" ]
      },
      "ecommerce-promo-codes" : {
        "title" : "Promo Codes",
        "description" : "Promo codes can be created for a given price rule. All the promo codes under a price rule share the generic information defined for that rule like the amount, type, expiration date etc. Promo code defines the more specific information about a promo code like the actual code, redemption_url, usage_count, etc that's unique to a code. Promo Code must be defined under a promo rule.",
        "paths" : [ "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes", "/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}" ]
      },
      "ecommerce-orders" : {
        "title" : "Orders",
        "description" : "Orders represent successful e-commerce transactions, and this data can be used to provide more detailed campaign reports, track sales, and personalize emails to your targeted consumers, and view other e-commerce data in your Mailchimp account.",
        "paths" : [ "/ecommerce/orders", "/ecommerce/stores/{store_id}/orders", "/ecommerce/stores/{store_id}/orders/{order_id}" ],
        "subResources" : [ "ecommerce-order-lines" ]
      },
      "ecommerce-order-lines" : {
        "title" : "Order Lines",
        "description" : "Each Order contains one or more Order Lines, which represent a specific Product Variant that a Customer purchases.",
        "paths" : [ "/ecommerce/stores/{store_id}/orders/{order_id}/lines", "/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}" ]
      },
      "ecommerce-products" : {
        "title" : "Products",
        "description" : "E-commerce items for sale in your store need to be created as Products so you can add the items to a Cart or an Order. Each Product requires at least one Product Variant.",
        "paths" : [ "/ecommerce/stores/{store_id}/products", "/ecommerce/stores/{store_id}/products/{product_id}" ],
        "subResources" : [ "ecommerce-product-variants", "ecommerce-product-images" ]
      },
      "ecommerce-product-variants" : {
        "title" : "Product Variants",
        "description" : "A Product Variant represents a specific item for purchase, and is contained within a parent Product. At least one Product Variant is required for each Product.",
        "paths" : [ "/ecommerce/stores/{store_id}/products/{product_id}/variants", "/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}" ]
      },
      "ecommerce-product-images" : {
        "title" : "Product Images",
        "description" : "A Product Image represents a specific product image.",
        "paths" : [ "/ecommerce/stores/{store_id}/products/{product_id}/images", "/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}" ]
      },
      "ecommerce-carts" : {
        "title" : "Carts",
        "description" : "Use Carts to represent unfinished e-commerce transactions. This can be used to create an Abandoned Cart workflow, or to save a consumer’s shopping cart pending a successful Order.",
        "paths" : [ "/ecommerce/stores/{store_id}/carts", "/ecommerce/stores/{store_id}/carts/{cart_id}" ],
        "subResources" : [ "ecommerce-cart-lines" ]
      },
      "ecommerce-cart-lines" : {
        "title" : "Cart Lines",
        "description" : "Each Cart contains one or more Cart Lines, which represent a specific Product Variant that a Customer has added to their shopping cart.",
        "paths" : [ "/ecommerce/stores/{store_id}/carts/{cart_id}/lines", "/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}" ]
      },
      "facebook-ads" : {
        "title" : "Facebook Ads",
        "description" : "Get information about Facebook Ads.",
        "paths" : [ "/facebook-ads", "/facebook-ads/{outreach_id}" ]
      },
      "ping" : {
        "title" : "Ping",
        "description" : "A health check endpoint for Mailchimp API 3.0.",
        "paths" : [ "/ping" ]
      },
      "reporting" : {
        "title" : "Reporting",
        "description" : "Reporting for various campaign types.",
        "paths" : [ ],
        "subResources" : [ "reporting-facebook-ads", "reporting-google-ads", "reporting-landing-pages", "reporting-postcards", "reporting-social-posts", "reporting-surveys", "reporting-websites" ]
      },
      "reporting-facebook-ads" : {
        "title" : "Facebook Ads",
        "description" : "Get information about Facebook Ad reports. ",
        "paths" : [ "/reporting/facebook-ads", "/reporting/facebook-ads/{outreach_id}", "/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity" ]
      },
      "reporting-landing-pages" : {
        "title" : "Landing Pages",
        "description" : "Get information about Landing Page reports.",
        "paths" : [ "/reporting/landing-pages", "/reporting/landing-pages/{outreach_id}" ]
      },
      "reporting-surveys" : {
        "title" : "Surveys",
        "description" : "Get an overall report for a [hosted survey](https://mailchimp.com/help/create-a-survey/).",
        "paths" : [ "/reporting/surveys", "/reporting/surveys/{survey_id}" ],
        "subResources" : [ "reporting-surveys-questions", "reporting-surveys-responses" ]
      },
      "reporting-surveys-questions" : {
        "title" : "Survey Questions",
        "description" : "Get reports by question on a [hosted survey](https://mailchimp.com/help/create-a-survey/).",
        "paths" : [ "/reporting/surveys/{survey_id}/questions", "/reporting/surveys/{survey_id}/questions/{question_id}" ],
        "subResources" : [ "reporting-surveys-questions-answers" ]
      },
      "reporting-surveys-questions-answers" : {
        "title" : "Survey Question Answers",
        "description" : "Answers to specific questions on a [hosted survey](https://mailchimp.com/help/create-a-survey/).",
        "paths" : [ "/reporting/surveys/{survey_id}/questions/{question_id}/answers" ]
      },
      "reporting-surveys-responses" : {
        "title" : "Survey Responses",
        "description" : "Get survey response reports for a [hosted survey](https://mailchimp.com/help/create-a-survey/).",
        "paths" : [ "/reporting/surveys/{survey_id}/responses", "/reporting/surveys/{survey_id}/responses/{response_id}" ]
      },
      "search-campaigns" : {
        "title" : "Search Campaigns",
        "description" : "Search all of an account's campaigns for the specified query terms.",
        "paths" : [ "/search-campaigns" ]
      },
      "search-members" : {
        "title" : "Search Members",
        "description" : "Search the account or a specific list for members that match the specified query terms.",
        "paths" : [ "/search-members" ]
      },
      "verified-domains" : {
        "x-hidden" : false,
        "title" : "Verified Domains",
        "description" : "Manage the domains on your account that can be used for sending email campaigns.",
        "paths" : [ "/verified-domains", "/verified-domains/{domain_name}", "/verified-domains/{domain_name}/actions/verify" ],
        "subresources" : [ ]
      }
    }
  },
  "x-original-swagger-version" : "2.0"
}