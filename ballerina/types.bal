// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# Information about an Ecommerce Store's specific Promo Code
public type ECommercePromoCode1 record {
    # Number of times promo code has been used
    @jsondata:Name {value: "usage_count"}
    int usageCount?;
    # The discount code. Restricted to UTF-8 characters with max length 50
    string code?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A unique identifier for the promo Code
    string id?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000
    @jsondata:Name {value: "redemption_url"}
    string redemptionUrl?;
    # Whether the promo code is currently enabled
    boolean enabled?;
};

# Information about an Ecommerce Store's specific Promo Code
public type ECommercePromoCode2 record {
    # Number of times promo code has been used
    @jsondata:Name {value: "usage_count"}
    int usageCount?;
    # The discount code. Restricted to UTF-8 characters with max length 50
    string code?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000
    @jsondata:Name {value: "redemption_url"}
    string redemptionUrl?;
    # Whether the promo code is currently enabled
    boolean enabled?;
};

# Information about an Ecommerce Store's specific Promo Rule
public type ECommercePromoRule3 record {
    # The date and time when the promotion is in effect in ISO 8601 format
    @jsondata:Name {value: "starts_at"}
    string startsAt?;
    # The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive
    float amount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The description of a promotion restricted to UTF-8 characters with max length 255
    string description?;
    # A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50
    string id?;
    # The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format
    @jsondata:Name {value: "ends_at"}
    string endsAt?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes
    string title?;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # Whether the promo rule is currently enabled
    boolean enabled?;
    # The target that the discount applies to
    "per_item"|"total"|"shipping" target?;
};

# Information about an Ecommerce Store's specific Promo Code
public type ECommercePromoCode3 record {
    # Number of times promo code has been used
    @jsondata:Name {value: "usage_count"}
    int usageCount?;
    # The discount code. Restricted to UTF-8 characters with max length 50
    string code?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A unique identifier for the promo Code
    string id?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000
    @jsondata:Name {value: "redemption_url"}
    string redemptionUrl?;
    # Whether the promo code is currently enabled
    boolean enabled?;
};

# The settings specific to A/B test campaigns
public type ABTestOptions2 record {
    # The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored
    @jsondata:Name {value: "send_times"}
    string[] sendTimes?;
    # Combinations of possible variables used to build emails
    ABTestOptions1Combinations[] combinations?;
    # The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes
    @jsondata:Name {value: "wait_time"}
    int waitTime?;
    # The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used
    @jsondata:Name {value: "subject_lines"}
    string[] subjectLines?;
    # Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'
    string[] contents?;
    # The percentage of recipients to send the test combinations to, must be a value between 10 and 100
    @jsondata:Name {value: "test_size"}
    int testSize?;
    # ID for the winning combination
    @jsondata:Name {value: "winning_combination_id"}
    string winningCombinationId?;
    # The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used
    @jsondata:Name {value: "reply_to_addresses"}
    string[] replyToAddresses?;
    # The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application
    @jsondata:Name {value: "winner_criteria"}
    "opens"|"clicks"|"manual"|"total_revenue" winnerCriteria?;
    # ID of the campaign that was sent to the remaining recipients based on the winning combination
    @jsondata:Name {value: "winning_campaign_id"}
    string winningCampaignId?;
    # The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used
    @jsondata:Name {value: "from_names"}
    string[] fromNames?;
};

# Represents the Queries record for the operation: getListsIdMergeFieldsId
public type GetListsIdMergeFieldsIdQueries record {
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
};

# The settings specific to A/B test campaigns
public type ABTestOptions1 record {
    # The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored
    @jsondata:Name {value: "send_times"}
    string[] sendTimes?;
    # Combinations of possible variables used to build emails
    ABTestOptions1Combinations[] combinations?;
    # The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes
    @jsondata:Name {value: "wait_time"}
    int waitTime?;
    # The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used
    @jsondata:Name {value: "subject_lines"}
    string[] subjectLines?;
    # Descriptions of possible email contents. To set campaign contents, make a PUT request to /campaigns/{campaign_id}/content with the field 'variate_contents'
    string[] contents?;
    # The percentage of recipients to send the test combinations to, must be a value between 10 and 100
    @jsondata:Name {value: "test_size"}
    int testSize?;
    # ID for the winning combination
    @jsondata:Name {value: "winning_combination_id"}
    string winningCombinationId?;
    # The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used
    @jsondata:Name {value: "reply_to_addresses"}
    string[] replyToAddresses?;
    # The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application
    @jsondata:Name {value: "winner_criteria"}
    "opens"|"clicks"|"manual"|"total_revenue" winnerCriteria;
    # ID of the campaign that was sent to the remaining recipients based on the winning combination
    @jsondata:Name {value: "winning_campaign_id"}
    string winningCampaignId?;
    # The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used
    @jsondata:Name {value: "from_names"}
    string[] fromNames?;
};

# Information about an Ecommerce Store's specific Promo Rule
public type ECommercePromoRule2 record {
    # The date and time when the promotion is in effect in ISO 8601 format
    @jsondata:Name {value: "starts_at"}
    string startsAt?;
    # The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive
    float amount?;
    # The description of a promotion restricted to UTF-8 characters with max length 255
    string description?;
    # The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format
    @jsondata:Name {value: "ends_at"}
    string endsAt?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes
    string title?;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # Whether the promo rule is currently enabled
    boolean enabled?;
    # The target that the discount applies to
    "per_item"|"total"|"shipping" target?;
};

# Information about an Ecommerce Store's specific Promo Rule
public type ECommercePromoRule1 record {
    # The date and time when the promotion is in effect in ISO 8601 format
    @jsondata:Name {value: "starts_at"}
    string startsAt?;
    # The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive
    float amount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The description of a promotion restricted to UTF-8 characters with max length 255
    string description?;
    # A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50
    string id?;
    # The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format
    @jsondata:Name {value: "ends_at"}
    string endsAt?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes
    string title?;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # Whether the promo rule is currently enabled
    boolean enabled?;
    # The target that the discount applies to
    "per_item"|"total"|"shipping" target?;
};

public type InlineResponse20013InlineResponse20013InlineResponse20013AllOf123 record {
    # Audience settings
    InlineResponse20011Audience audience?;
    # Channel settings
    InlineResponse20011Channel channel?;
    @jsondata:Name {value: "audience_activity"}
    InlineResponse20013AudienceActivity audienceActivity?;
    InlineResponse20011Budget budget?;
    @jsondata:Name {value: "report_summary"}
    InlineResponse20013ReportSummary reportSummary?;
};

# Represents the Queries record for the operation: getAllFacebookAds
public type GetAllFacebookAdsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "created_at"|"updated_at"|"end_time" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# Represents the Queries record for the operation: getTemplateFoldersId
public type GetTemplateFoldersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The member activity events for a given member
public type MemberActivityEvents1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # An array of objects, each representing a contact event. There are multiple possible types, see the [activity schema documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#activity-schemas)
    record {}[] activity?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

# Represents the Queries record for the operation: getFileManagerFoldersId
public type GetFileManagerFoldersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The shipping address for the order
public type ShippingAddress1 record {
    # The country in the shipping address
    string country?;
    # An additional field for the shipping address
    string address2?;
    # The city in the order's shipping address
    string city?;
    # The shipping address for the order
    string address1?;
    # The latitude for the shipping address location
    decimal latitude?;
    # The two-letter code for the province or state in the shipping address
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the shipping address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the order's shipping address
    string province?;
    # The phone number for the order's shipping address
    string phone?;
    # The name associated with an order's shipping address
    string name?;
    # The company associated with the shipping address
    string company?;
    # The postal or zip code in the shipping address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the shipping address location
    decimal longitude?;
};

# View members in a specific list segment
public type SegmentMembers record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a specific list member
    ListMembers3[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCartsId
public type GetEcommerceStoresIdCartsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Add a new Batch Webook
public type BatchWebhook record {
    # A valid URL for the Webhook
    string url;
    # Whether the webhook receives requests or not
    boolean enabled?;
};

# The shipping address for the order
public type ShippingAddress2 record {
    # The country in the order's shipping address
    string country?;
    # An additional field for the shipping address
    string address2?;
    # The city in the order's shipping address
    string city?;
    # The shipping address for the order
    string address1?;
    # The latitude for the shipping address location
    decimal latitude?;
    # The two-letter code for the province or state the order's shipping address is located in
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the shipping address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the order's shipping address
    string province?;
    # The phone number for the order's shipping address
    string phone?;
    # The name associated with an order's shipping address
    string name?;
    # The company associated with an order's shipping address
    string company?;
    # The postal or zip code in the order's shipping address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the shipping address location
    decimal longitude?;
};

# Represents the Queries record for the operation: getListsIdMembersIdActivityFeed
public type GetListsIdMembersIdActivityFeedQueries record {
    # A comma-separated list of activity filters that correspond to a set of activity types, e.g "?activity_filters=open,bounce,click"
    @http:Query {name: "activity_filters"}
    ("bounce"|"click"|"conversation"|"ecommerce_signup"|"event"|"web_engagement"|"generic_signup"|"landing_page_signup"|"marketing_permission"|"note"|"open"|"order"|"postcard_sent"|"sent"|"signup"|"squatter_signup"|"unsub"|"website_signup"|"survey_response"|"sms_bulk_sent"|"inbox_thread"|"qbo_payment_link"|"video_call_transcripts")[] activityFilters?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of reports containing campaigns marked as Sent
public type CampaignReports1 record {
    # An array of objects, each representing a report resource
    CampaignReport1[] reports?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A summary of an individual page's properties
public type LandingPage record {
    # The ID of the store associated with this landing page
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The list's ID associated with this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The name of this landing page
    string name?;
    # The description of this landing page
    string description?;
    # The template_id of this landing page
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # The title of this landing page seen in the browser's title bar
    string title?;
    # The type of template the landing page has
    "signup"|"product" 'type?;
    # The tracking settings applied to this landing page
    TrackingSettings tracking?;
};

# Represents the Queries record for the operation: getListsIdMembersIdEvents
public type GetListsIdMembersIdEventsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of available images and files stored in the File Manager for the account
public type FileManager record {
    # The total size of all File Manager files in bytes
    @jsondata:Name {value: "total_file_size"}
    decimal totalFileSize?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    #  A list of files and images in an account
    GalleryFile3[] files?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getReportingFacebookAdsIdEcommerceProductActivity
public type GetReportingFacebookAdsIdEcommerceProductActivityQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "title"|"total_revenue"|"total_purchased" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getBatchWebhooks
public type GetBatchWebhooksQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# abandonedCart automation details
public type AbandonedCartAutomation record {
    # Whether this store supports the abandonedCart automation
    @jsondata:Name {value: "is_supported"}
    boolean isSupported?;
    # Unique ID of automation parent campaign
    string id?;
    # Status of the abandonedCart automation
    "save"|"sending"|"paused" status?;
};

# Information about this list's interest categories
public type InterestGroupings record {
    # The ID for the list that this category belongs to
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # This array contains individual interest categories
    InterestCategory2[] categories?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProductsIdImages
public type GetEcommerceStoresIdProductsIdImagesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getListsIdLocations
public type GetListsIdLocationsQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Campaign feedback details
public type CampaignAdvice record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The sentiment type for a feedback message
    "negative"|"positive"|"neutral" 'type?;
    # The advice message
    string message?;
};

# A collection of this account's tracked conversations
public type TrackedConversations record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A list of conversations
    Conversation1[] conversations?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20011AudienceTargetingSpecs record {
    @jsondata:Name {value: "max_age"}
    int maxAge?;
    int gender?;
    InlineResponse20011AudienceTargetingSpecsLocations locations?;
    @jsondata:Name {value: "min_age"}
    int minAge?;
    InlineResponse20011AudienceTargetingSpecsInterests[] interests?;
};

# A collection of ecommerce products
public type InlineResponse2009 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    InlineResponse2009Products[] products?;
};

# A collection of landing pages
public type InlineResponse2008 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The landing pages on the account
    @jsondata:Name {value: "landing_pages"}
    LandingPage3[] landingPages?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The clicks and visits data from the last five weeks
public type WeeklyClicksAndVisitsData record {
    @jsondata:Name {value: "unique_visits"}
    DailyClicksAndVisitsDataUniqueVisits[] uniqueVisits?;
    # The total number of visits in a week
    WeeklyClicksAndVisitsDataVisits[] visits?;
    # The total number of clicks in a week
    WeeklyClicksAndVisitsDataClicks[] clicks?;
};

# A list of reports containing child campaigns for a specific campaign
public type CampaignSubReports record {
    # An array of objects, each representing a report resource
    CampaignReport1[] reports?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # Unique identifier of the parent campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type InlineResponse20011AudienceTargetingSpecsLocations record {
    string[] regions?;
    string[] cities?;
    string[] countries?;
    string[] zips?;
};

# High level reporting stats for an outreach
public type ReportSummary record {
    @jsondata:Name {value: "proxy_excluded_opens"}
    int proxyExcludedOpens?;
    @jsondata:Name {value: "unique_visits"}
    int uniqueVisits?;
    int subscribes?;
    @jsondata:Name {value: "proxy_excluded_open_rate"}
    decimal proxyExcludedOpenRate?;
    int reach?;
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    @jsondata:Name {value: "total_sent"}
    int totalSent?;
    decimal impressions?;
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    @jsondata:Name {value: "subscriber_clicks"}
    int subscriberClicks?;
    int visits?;
    ReportSummaryEcommerce ecommerce?;
    int opens?;
    @jsondata:Name {value: "proxy_excluded_unique_opens"}
    int proxyExcludedUniqueOpens?;
    int clicks?;
    int engagements?;
    @jsondata:Name {value: "conversion_rate"}
    decimal conversionRate?;
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# The Connected Site associated with the store
public type ConnectedSite3 record {
    @jsondata:Name {value: "site_script"}
    Script1 siteScript?;
    # The unique identifier for the connected site
    @jsondata:Name {value: "site_foreign_id"}
    string siteForeignId?;
};

# Information about a specific connected site
public type ConnectedSite2 record {
    # The unique identifier for the site
    @jsondata:Name {value: "foreign_id"}
    string foreignId?;
    # The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The date and time the connected site was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The connected site domain
    string domain?;
    @jsondata:Name {value: "site_script"}
    Script siteScript?;
    # The date and time the connected site was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The platform of the connected site
    string platform?;
};

# Update information about an individual Automation workflow email
public type UpdateInformationAboutASpecificWorkflowEmail record {
    # Settings for the campaign including the email subject, from name, and from email address
    CampaignSettings settings?;
    # The delay settings for an automation email
    AutomationDelay delay?;
};

# Information about a specific connected site
public type ConnectedSite1 record {
    # The unique identifier for the site
    @jsondata:Name {value: "foreign_id"}
    string foreignId?;
    # The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The date and time the connected site was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The connected site domain
    string domain?;
    @jsondata:Name {value: "site_script"}
    Script siteScript?;
    # The date and time the connected site was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The platform of the connected site
    string platform?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCartsIdLinesId
public type GetEcommerceStoresIdCartsIdLinesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific product variant
public type ECommerceProductVariant record {
    # The inventory quantity of a product variant
    @jsondata:Name {value: "inventory_quantity"}
    int inventoryQuantity?;
    # The visibility of a product variant
    string visibility?;
    # The backorders of a product variant
    string backorders?;
    # The price of a product variant
    decimal price?;
    # The image URL for a product variant
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # A unique identifier for the product variant
    string id;
    # The title of a product variant
    string title;
    # The stock keeping unit (SKU) of a product variant
    string sku?;
    # The URL for a product variant
    string url?;
};

# Deprecated
public type SalesforceCRMTracking record {
    # Update contact notes for a campaign based on subscriber email addresses
    boolean notes?;
    # Create a campaign in a connected Salesforce account
    boolean campaign?;
};

# Information about a specific template
public type TemplateInstance record {
    # The name of the template
    string name;
    # The raw HTML for the template. We  support the Mailchimp [Template Language](https://mailchimp.com/help/getting-started-with-mailchimps-template-language/) in any HTML code passed via the API
    string html;
    # The id of the folder the template is currently in
    @jsondata:Name {value: "folder_id"}
    string folderId?;
};

public type ReportSummaryEcommerce record {
    @jsondata:Name {value: "average_order_revenue"}
    decimal averageOrderRevenue?;
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProducts
public type GetEcommerceStoresIdProductsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Deprecated
public type CapsuleCRMTracking record {
    # Update contact notes for a campaign based on subscriber email addresses
    boolean notes?;
};

# Represents the Queries record for the operation: getSearchMembers
public type GetSearchMembersQueries record {
    # The unique id for the list
    @http:Query {name: "list_id"}
    string listId?;
    # The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name
    string query;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific connected site
public type ConnectedSite record {
    # The unique identifier for the site
    @jsondata:Name {value: "foreign_id"}
    string foreignId;
    # The connected site domain
    string domain;
};

# General stats about different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns
public type ABSplitStats record {
    # Stats for Campaign A
    CampaignA a?;
    # Stats for Campaign B
    CampaignB b?;
};

# The tracking options for the Automation
public type AutomationTrackingOptions record {
    # Deprecated
    SalesforceCRMTracking1 salesforce?;
    # Deprecated
    @jsondata:Name {value: "goal_tracking"}
    boolean goalTracking?;
    # Deprecated
    CapsuleCRMTracking2 capsule?;
    # The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)
    string clicktale?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the Automation. Defaults to `true`
    @jsondata:Name {value: "text_clicks"}
    boolean textClicks?;
    # Whether to enable e-commerce tracking
    boolean ecomm360?;
    # Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`
    boolean opens?;
    # The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)
    @jsondata:Name {value: "google_analytics"}
    string googleAnalytics?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the Automation. Defaults to `true`
    @jsondata:Name {value: "html_clicks"}
    boolean htmlClicks?;
};

# The verified domains currently on the account
public type VerifiedDomains2 record {
    # The e-mail address at the domain you want to verify. This will receive a two-factor challenge to be used in the verify action
    @jsondata:Name {value: "verification_email"}
    string verificationEmail;
};

# The verified domains currently on the account
public type VerifiedDomains1 record {
    # The domains on the account
    VerifiedDomains[] domains?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Determines if the campaign qualifies to be resent to non-openers
public type ToNonOpeners record {
    # The reason the campaign is not eligible to be resent to this segment
    string reason?;
    # Determines if the campaign qualifies to be resent to this segment
    @jsondata:Name {value: "is_eligible"}
    boolean isEligible?;
};

# Represents the Queries record for the operation: getListsIdAbuseReports
public type GetListsIdAbuseReportsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The possible sources of any events that can trigger the webhook and whether they are enabled
public type Sources1 record {
    # Whether the webhook is triggered by admin-initiated actions in the web interface
    boolean admin?;
    # Whether the webhook is triggered by actions initiated via the API
    boolean api?;
    # Whether the webhook is triggered by subscriber-initiated actions
    boolean user?;
};

# Information about subscribers in an Automation email queue
public type SubscriberInAutomationQueue record {
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress;
};

# A list of tags matching the input query
public type TagSearchResults record {
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # A list of matching tags
    TagSearchResultsTags[] tags?;
};

# A list of member's subscriber activity in a specific campaign
public type EmailActivity record {
    # An array of members that were sent the campaign
    EmailActivity2[] emails?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The unique id for the sent campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# The [merge fields](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type CollectionOfMergeFields record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a merge field resource
    @jsondata:Name {value: "merge_fields"}
    MergeField3[] mergeFields?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Stats for the list. Many of these are cached for at least five minutes
public type Statistics record {
    # The number of members cleaned from the list
    @jsondata:Name {value: "cleaned_count"}
    int cleanedCount?;
    # The number of members who have unsubscribed since the last campaign was sent
    @jsondata:Name {value: "unsubscribe_count_since_send"}
    int unsubscribeCountSinceSend?;
    # The number of active members in the list since the last campaign was sent
    @jsondata:Name {value: "member_count_since_send"}
    int memberCountSinceSend?;
    # The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet)
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The number of members cleaned from the list since the last campaign was sent
    @jsondata:Name {value: "cleaned_count_since_send"}
    int cleanedCountSinceSend?;
    # The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included
    @jsondata:Name {value: "total_contacts"}
    int totalContacts?;
    # The number of campaigns in any status that use this list
    @jsondata:Name {value: "campaign_count"}
    int campaignCount?;
    # The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet)
    @jsondata:Name {value: "avg_unsub_rate"}
    decimal avgUnsubRate?;
    # The date and time of the last time someone subscribed to this list in ISO 8601 format
    @jsondata:Name {value: "last_sub_date"}
    string lastSubDate?;
    # The number of members who have unsubscribed from the list
    @jsondata:Name {value: "unsubscribe_count"}
    int unsubscribeCount?;
    # The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet)
    @jsondata:Name {value: "target_sub_rate"}
    decimal targetSubRate?;
    # The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients
    @jsondata:Name {value: "campaign_last_sent"}
    string campaignLastSent?;
    # The average number of subscriptions per month for the list (not returned if we haven't calculated it yet)
    @jsondata:Name {value: "avg_sub_rate"}
    decimal avgSubRate?;
    # The number of active members in the list
    @jsondata:Name {value: "member_count"}
    int memberCount?;
    # The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL)
    @jsondata:Name {value: "merge_field_count"}
    int mergeFieldCount?;
    # The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet)
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
    # The date and time of the last time someone unsubscribed from this list in ISO 8601 format
    @jsondata:Name {value: "last_unsub_date"}
    string lastUnsubDate?;
};

# A list of members who have unsubscribed from a specific campaign
public type Unsubscribes record {
    # An array of objects, each representing a member who unsubscribed from a campaign
    Unsubscribes2[] unsubscribes?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type EcommercestoresstoreIdordersPromos record {
    # The Promo Code
    string code;
    # The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
    @jsondata:Name {value: "amount_discounted"}
    decimal amountDiscounted;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type;
};

# An array of objects, each representing an account export
public type InlineResponse2001 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing an account export
    InlineResponse2001Exports[] exports?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# An array of objects, each representing an authorized application
public type InlineResponse2003 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing an authorized application
    InlineResponse2003Apps[] apps?;
};

# [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options, specific to an RSS campaign
public type RSSOptions record {
    # The schedule for sending the RSS Campaign
    SendingSchedule schedule?;
    # Whether to add CSS to images in the RSS feed to constrain their width in campaigns
    @jsondata:Name {value: "constrain_rss_img"}
    boolean constrainRssImg?;
    # The URL for the RSS feed
    @jsondata:Name {value: "feed_url"}
    string feedUrl;
    # The frequency of the RSS Campaign
    "daily"|"weekly"|"monthly" frequency;
};

# An account export
public type InlineResponse2002 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The size of the uncompressed export in bytes
    @jsondata:Name {value: "size_in_bytes"}
    int sizeInBytes?;
    # If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes
    @jsondata:Name {value: "download_url"}
    string downloadUrl?;
    # Start time for the export
    string started?;
    # If finished, the finish time for the export
    string finished?;
    # The ID for the export
    @jsondata:Name {value: "export_id"}
    int exportId?;
};

# An array of objects, each representing an Automation workflow
public type InlineResponse2005 record {
    # An array of objects, each representing an Automation workflow
    AutomationWorkflow2[] automations?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# An object describing the click activity for the campaign
public type Clicks record {
    # The total number of clicks for the campaign
    @jsondata:Name {value: "clicks_total"}
    int clicksTotal?;
    # The total number of unique clicks for links across a campaign
    @jsondata:Name {value: "unique_clicks"}
    int uniqueClicks?;
    # The number of unique clicks divided by the total number of successful deliveries
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The date and time of the last recorded click for the campaign in ISO 8601 format
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # The total number of subscribers who clicked on a campaign
    @jsondata:Name {value: "unique_subscriber_clicks"}
    int uniqueSubscriberClicks?;
};

# An authorized app
public type InlineResponse2004 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the application
    string name?;
    # A short description of the application
    string description?;
    # The ID for the application
    int id?;
    # An array of usernames for users who have linked the app
    string[] users?;
};

# An array of campaigns
public type InlineResponse2007 record {
    # An array of campaigns
    Campaign4[] campaigns?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Deprecated
public type SalesforceCRMTracking1 record {
    # Update contact notes for a campaign based on a subscriber's email address
    boolean notes?;
    # Create a campaign in a connected Salesforce account
    boolean campaign?;
};

# An automation workflow
public type InlineResponse2006 record {
    # A string that uniquely identifies an email in an Automation workflow
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing a subscriber queue for an email in an Automation workflow
    SubscriberInAutomationQueue2[] queue?;
};

# Represents the Queries record for the operation: getListsIdMembersIdActivity
public type GetListsIdMembersIdActivityQueries record {
    # A comma seperated list of actions to return
    ("abuse"|"bounce"|"click"|"open"|"sent"|"unsub"|"ecomm")[] action?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of feedback based on a campaign's statistics
public type CampaignAdviceReport record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a point of campaign feedback
    CampaignAdvice[] advice?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Default content for a template
public type TemplateDefaultContent record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The sections that you can edit in the template, including each section's default content
    record {|record {}...;|} sections?;
};

# Represents the Queries record for the operation: getEcommerceStoresId
public type GetEcommerceStoresIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A collection of connected sites in the account
public type ConnectedSites record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a connected site
    ConnectedSite2[] sites?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# An individual file listed in the File Manager
public type GalleryFile record {
    # The name of the file
    string name;
    # The id of the folder
    @jsondata:Name {value: "folder_id"}
    int folderId?;
    # The base64-encoded contents of the file
    @jsondata:Name {value: "file_data"}
    string fileData;
};

# A collection of stores in the account
public type ECommerceStores record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a store
    ECommerceStore3[] stores?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The schedule for sending the RSS Campaign
public type SendingSchedule record {
    # The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-defaults/)
    @constraint:Int {minValue: 0, maxValue: 23}
    int hour?;
    # The day of the week to send a weekly RSS Campaign
    @jsondata:Name {value: "weekly_send_day"}
    "sunday"|"monday"|"tuesday"|"wednesday"|"thursday"|"friday"|"saturday" weeklySendDay?;
    @jsondata:Name {value: "daily_send"}
    DailySendingDays dailySend?;
    # The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February
    @jsondata:Name {value: "monthly_send_date"}
    decimal monthlySendDate?;
};

# A collection of a cart's line items
public type CartLines record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The cart id
    @jsondata:Name {value: "cart_id"}
    string cartId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a cart's line item
    ECommerceCartLineItem3[] lines?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Check if this ad is connected to a facebook page
public type InlineResponse20011Feedback record {
    # Feedback regarding the audience of this Ad
    string audience?;
    # Feedback regarding the compliance of this Ad
    string compliance?;
    # Feedback regarding the content of this Ad
    string content?;
    # Feedback regarding the budget of this Ad
    string budget?;
};

# Represents the Queries record for the operation: getFileManagerFiles
public type GetFileManagerFilesQueries record {
    # Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_created_at"}
    string beforeCreatedAt?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "added_date"|"name"|"size" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_created_at"}
    string sinceCreatedAt?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The file type for the File Manager file
    string 'type?;
    # The Mailchimp account user who created the File Manager file
    @http:Query {name: "created_by"}
    string createdBy?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# The settings for your campaign, including subject, from name, reply-to address, and more
public type CampaignSettings1 record {
    # Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # Use Mailchimp Conversation feature to manage out-of-office replies
    @jsondata:Name {value: "use_conversation"}
    boolean useConversation?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`
    boolean authenticate?;
    # The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)
    @jsondata:Name {value: "to_name"}
    string toName?;
    # The title of the campaign
    string title?;
    # The 'from' name on the campaign (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
    # Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent
    @jsondata:Name {value: "auto_tweet"}
    boolean autoTweet?;
    # An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to
    @jsondata:Name {value: "auto_fb_post"}
    string[] autoFbPost?;
    # Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`
    @jsondata:Name {value: "fb_comments"}
    boolean fbComments?;
    # The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # Automatically inline the CSS included with the campaign content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The id of the template to use
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # If the campaign is listed in a folder, the id for that folder
    @jsondata:Name {value: "folder_id"}
    string folderId?;
};

# Represents the Queries record for the operation: getReportsIdDomainPerformance
public type GetReportsIdDomainPerformanceQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The settings for your campaign, including subject, from name, reply-to address, and more
public type CampaignSettings2 record {
    # Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # Use Mailchimp Conversation feature to manage out-of-office replies
    @jsondata:Name {value: "use_conversation"}
    boolean useConversation?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`
    boolean authenticate?;
    # The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)
    @jsondata:Name {value: "to_name"}
    string toName?;
    # The title of the campaign
    string title?;
    # The 'from' name on the campaign (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName;
    # Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent
    @jsondata:Name {value: "auto_tweet"}
    boolean autoTweet?;
    # An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to
    @jsondata:Name {value: "auto_fb_post"}
    string[] autoFbPost?;
    # Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`
    @jsondata:Name {value: "fb_comments"}
    boolean fbComments?;
    # The reply-to email address for the campaign
    @jsondata:Name {value: "reply_to"}
    string replyTo;
    # Automatically inline the CSS included with the campaign content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The id of the template to use
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # If the campaign is listed in a folder, the id for that folder
    @jsondata:Name {value: "folder_id"}
    string folderId?;
};

# A summary of an individual landing page's settings and content
public type LandingPageReport1 record {
    # The number of unique visits to this landing pages
    @jsondata:Name {value: "unique_visits"}
    int uniqueVisits?;
    # The number of subscribes to this landing pages
    int subscribes?;
    # The list id connected to this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The ID used in the Mailchimp web application
    @jsondata:Name {value: "web_id"}
    int webId?;
    # List Name
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The name of the landing page the user's customers will see
    string title?;
    # The landing page url
    string url?;
    # A list of tags associated to the landing page
    @jsondata:Name {value: "signup_tags"}
    Tag[] signupTags?;
    # The number of visits to this landing pages
    int visits?;
    LandingPageReportTimeseries timeseries?;
    LandingPageReportEcommerce ecommerce?;
    # The name of this landing page the user will see
    string name?;
    # The number of clicks to this landing pages
    int clicks?;
    # A string that uniquely identifies this landing page
    string id?;
    # The time this landing page was published
    @jsondata:Name {value: "published_at"}
    string publishedAt?;
    # The percentage of people who visited your landing page and were added to your list
    @jsondata:Name {value: "conversion_rate"}
    decimal conversionRate?;
    # The time this landing page was unpublished
    @jsondata:Name {value: "unpublished_at"}
    string unpublishedAt?;
    # The status of the landing page
    string status?;
};

public type InlineResponse20013AudienceActivityImpressions record {
    string date?;
    int impressions?;
};

# List settings for the Automation
public type List record {
    # The id of the store
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The id of the List
    @jsondata:Name {value: "list_id"}
    string listId?;
};

# A summary of an individual Automation workflow email
public type AutomationWorkflowEmail1 record {
    # The link to the campaign's archive version in ISO 8601 format
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # Settings for the campaign including the email subject, from name, and from email address
    CampaignSettings3 settings?;
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The date and time the campaign was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    @jsondata:Name {value: "trigger_settings"}
    AutomationTrigger1 triggerSettings?;
    # The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The tracking options for a campaign
    CampaignTrackingOptions1 tracking?;
    # Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor
    @jsondata:Name {value: "needs_block_refresh"}
    boolean needsBlockRefresh?;
    # The date and time the campaign was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The delay settings for an Automation email
    AutomationDelay1 delay?;
    #  The date and time a campaign was sent in ISO 8601 format
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    # How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')
    @jsondata:Name {value: "content_type"}
    string contentType?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List6 recipients?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # A string that uniquely identifies the Automation email
    string id?;
    # The position of an Automation email in a workflow
    int position?;
    # Determines if the campaign contains the *|BRAND:LOGO|* merge tag
    @jsondata:Name {value: "has_logo_merge_tag"}
    boolean hasLogoMergeTag?;
    # The current status of the campaign
    "save"|"paused"|"sending" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary reportSummary?;
};

# A summary of social activity for the campaign, tracked by EepURL
public type EepurlActivity record {
    # A summary of Twitter activity for a campaign
    TwitterStats twitter?;
    # The shortened link used for tracking
    string eepurl?;
    # A summary of the top referrers for the campaign
    Referrer[] referrers?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A summary of the click-throughs on the campaign's URL
    ClickSummary clicks?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type InlineResponse20010FacebookAds record {
    *FacebookAdsAllOf1;
    *FacebookAdsFacebookAdsAllOf12;
    *FacebookAdsFacebookAdsFacebookAdsAllOf123;
    *FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf1234;
};

# Represents the Queries record for the operation: getCampaignsIdFeedbackId
public type GetCampaignsIdFeedbackIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A breakdown of clicks by different groups of an A/B Split campaign. Does not return information about Multivariate Campaigns
public type ABSplit record {
    # Stats for Group A
    GroupA a?;
    # Stats for Group B
    GroupB b?;
};

public type FacebookAdsFacebookAdsAllOf12 record {
    @jsondata:Name {value: "email_source_name"}
    string emailSourceName?;
    # The date and time the ad was paused in ISO 8601 format
    @jsondata:Name {value: "paused_at"}
    string pausedAt?;
    # The date and time the ad was ended in ISO 8601 format
    @jsondata:Name {value: "end_time"}
    string endTime?;
    # If the ad has a problem and needs attention
    @jsondata:Name {value: "needs_attention"}
    boolean needsAttention?;
    @jsondata:Name {value: "was_canceled_by_facebook"}
    boolean wasCanceledByFacebook?;
};

# A webhook configured for batch status updates
public type BatchWebhook1 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A string that uniquely identifies this Batch Webhook
    string id?;
    # A valid URL for the Webhook
    string url?;
    # Whether the webhook receives requests or not
    boolean enabled?;
};

# The last 50 member events for a list
public type MemberActivityEvents record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # An array of objects, each representing a member event
    MemberActivity1[] activity?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type MergeField3 record {
    # Whether the merge field is displayed on the signup form
    boolean 'public?;
    # The ID that identifies this merge field's audience'
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the merge field (audience field)
    string name?;
    # The order that the merge field displays on the list signup form
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # Extra options for some merge field types
    MergeFieldOptions2 options?;
    # An unchanging id for the merge field
    @jsondata:Name {value: "merge_id"}
    int mergeId?;
    # The default value for the merge field if `null`
    @jsondata:Name {value: "default_value"}
    string defaultValue?;
    # The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)
    string tag?;
    # The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field
    "text"|"number"|"address"|"phone"|"date"|"url"|"imageurl"|"radio"|"dropdown"|"birthday"|"zip" 'type?;
    # The boolean value if the merge field is required
    boolean required?;
    # Extra text to help the subscriber fill out the form
    @jsondata:Name {value: "help_text"}
    string helpText?;
};

# Update an existing Batch Webook
public type BatchWebhook2 record {
    # A valid URL for the Webhook
    string url?;
    # Whether the webhook receives requests or not
    boolean enabled?;
};

# A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type MergeField2 record {
    # Whether the merge field is displayed on the signup form
    boolean 'public?;
    # The name of the merge field (audience field)
    string name;
    # The order that the merge field displays on the list signup form
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # Extra options for some merge field types
    MergeFieldOptions1 options?;
    # The default value for the merge field if `null`
    @jsondata:Name {value: "default_value"}
    string defaultValue?;
    # The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)
    string tag?;
    # Whether the merge field is required to import a contact
    boolean required?;
    # Extra text to help the subscriber fill out the form
    @jsondata:Name {value: "help_text"}
    string helpText?;
};

# A webhook configured for batch status updates
public type BatchWebhook3 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A string that uniquely identifies this Batch Webhook
    string id?;
    # A valid URL for the Webhook
    string url?;
    # Whether the webhook receives requests or not
    boolean enabled?;
};

# A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type MergeField4 record {
    # An unchanging id for the merge field
    int id?;
    # The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field
    string label?;
    # The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field
    "text"|"number"|"address"|"phone"|"date"|"url"|"imageurl"|"radio"|"dropdown"|"birthday"|"zip" 'type?;
};

# The settings for your campaign, including subject, from name, reply-to address, and more
public type CampaignSettings5 record {
    # Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # Use Mailchimp Conversation feature to manage out-of-office replies
    @jsondata:Name {value: "use_conversation"}
    boolean useConversation?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`
    boolean authenticate?;
    # The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)
    @jsondata:Name {value: "to_name"}
    string toName?;
    # Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/)
    boolean timewarp?;
    # The title of the campaign
    string title?;
    # The 'from' name on the campaign (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
    # Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent
    @jsondata:Name {value: "auto_tweet"}
    boolean autoTweet?;
    # An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to
    @jsondata:Name {value: "auto_fb_post"}
    string[] autoFbPost?;
    # Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`
    @jsondata:Name {value: "fb_comments"}
    boolean fbComments?;
    # Whether the campaign uses the drag-and-drop editor
    @jsondata:Name {value: "drag_and_drop"}
    boolean dragAndDrop?;
    # The reply-to email address for the campaign
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # Automatically inline the CSS included with the campaign content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The id for the template used in this campaign
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # If the campaign is listed in a folder, the id for that folder
    @jsondata:Name {value: "folder_id"}
    string folderId?;
};

# A collection of a product's images
public type EcommerceProductImages record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # An array of objects, each representing a product image resource
    ECommerceProductImage3[] images?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The product id
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Settings for the campaign including the email subject, from name, and from email address
public type CampaignSettings3 record {
    # Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`
    boolean authenticate?;
    # The title of the campaign
    string title?;
    # The 'from' name on the campaign (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
    # Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent
    @jsondata:Name {value: "auto_tweet"}
    boolean autoTweet?;
    # An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to
    @jsondata:Name {value: "auto_fb_post"}
    string[] autoFbPost?;
    # Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`
    @jsondata:Name {value: "fb_comments"}
    boolean fbComments?;
    # Whether the campaign uses the drag-and-drop editor
    @jsondata:Name {value: "drag_and_drop"}
    boolean dragAndDrop?;
    # The reply-to email address for the campaign
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # Automatically inline the CSS included with the campaign content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The id for the template used in this campaign
    @jsondata:Name {value: "template_id"}
    int templateId?;
};

# The settings for your campaign, including subject, from name, reply-to address, and more
public type CampaignSettings4 record {
    # Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # Use Mailchimp Conversation feature to manage replies
    @jsondata:Name {value: "use_conversation"}
    boolean useConversation?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`
    boolean authenticate?;
    # The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)
    @jsondata:Name {value: "to_name"}
    string toName?;
    # Send this campaign using [Timewarp](https://mailchimp.com/help/use-timewarp/)
    boolean timewarp?;
    # The title of the campaign
    string title?;
    # The 'from' name on the campaign (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
    # Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent
    @jsondata:Name {value: "auto_tweet"}
    boolean autoTweet?;
    # An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to
    @jsondata:Name {value: "auto_fb_post"}
    string[] autoFbPost?;
    # Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`
    @jsondata:Name {value: "fb_comments"}
    boolean fbComments?;
    # Whether the campaign uses the drag-and-drop editor
    @jsondata:Name {value: "drag_and_drop"}
    boolean dragAndDrop?;
    # The reply-to email address for the campaign
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # Automatically inline the CSS included with the campaign content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The id for the template used in this campaign
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # If the campaign is listed in a folder, the id for that folder
    @jsondata:Name {value: "folder_id"}
    string folderId?;
};

# Determines if the campaign qualifies to be resent to new subscribers
public type ToNewSubscribers record {
    # The reason the campaign is not eligible to be resent to this segment
    string reason?;
    # Determines if the campaign qualifies to be resent to this segment
    @jsondata:Name {value: "is_eligible"}
    boolean isEligible?;
};

# Member activity events
public type MemberActivity1 record {
    # The ID of the parent campaign
    @jsondata:Name {value: "parent_campaign"}
    string parentCampaign?;
    # The type of action recorded for the subscriber
    string action?;
    # The type of campaign that was sent
    string 'type?;
    # If set, the campaign's title
    string title?;
    # For clicks, the URL the subscriber clicked on
    string url?;
    # The web-based ID for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The date and time recorded for the action
    string timestamp?;
};

# A summary of the interaction with the campaign
public type MemberActivity2 record {
    # Indicates if the open was from an email client that use proxies
    @jsondata:Name {value: "is_proxy_open"}
    boolean isProxyOpen?;
    # The date and time recorded for the action in ISO 8601 format
    string timestamp?;
};

public type InlineResponse20011ContentAttachments record {
    @jsondata:Name {value: "call_to_action"}
    string callToAction?;
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    string name?;
    @jsondata:Name {value: "link_url"}
    string linkUrl?;
    string description?;
};

# A summary of an individual Automation workflow's settings and content
public type AutomationWorkflow1 record {
    # The date and time the Automation was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The settings for the Automation workflow
    AutomationCampaignSettings1 settings?;
    # The date and time the Automation was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # List settings for the Automation
    List10 recipients?;
    # The total number of emails sent for the Automation
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    @jsondata:Name {value: "trigger_settings"}
    AutomationTrigger1 triggerSettings?;
    # A string that identifies the Automation
    string id?;
    # The tracking options for the Automation
    AutomationTrackingOptions tracking?;
    # The current status of the Automation
    "save"|"paused"|"sending" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary3 reportSummary?;
};

# A single marketing permission a subscriber has either opted-in to or opted-out of
public type MarketingPermission1 record {
    # The id for the marketing permission on the list
    @jsondata:Name {value: "marketing_permission_id"}
    string marketingPermissionId?;
    # The text of the marketing permission
    string text?;
    # If the subscriber has opted-in to the marketing permission
    boolean enabled?;
};

# Represents the Queries record for the operation: patchListsIdMembersId
public type PatchListsIdMembersIdQueries record {
    # If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false
    @http:Query {name: "skip_merge_validation"}
    boolean skipMergeValidation?;
};

# A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type MergeField1 record {
    # Whether the merge field is displayed on the signup form
    boolean 'public?;
    # The ID that identifies this merge field's audience'
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the merge field (audience field)
    string name?;
    # The order that the merge field displays on the list signup form
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # Extra options for some merge field types
    MergeFieldOptions2 options?;
    # An unchanging id for the merge field
    @jsondata:Name {value: "merge_id"}
    int mergeId?;
    # The default value for the merge field if `null`
    @jsondata:Name {value: "default_value"}
    string defaultValue?;
    # The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)
    string tag?;
    # The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field
    "text"|"number"|"address"|"phone"|"date"|"url"|"imageurl"|"radio"|"dropdown"|"birthday"|"zip" 'type?;
    # The boolean value if the merge field is required
    boolean required?;
    # Extra text to help the subscriber fill out the form
    @jsondata:Name {value: "help_text"}
    string helpText?;
};

# A folder used to organize campaigns
public type CampaignFolder1 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The number of campaigns in the folder
    int count?;
    # A string that uniquely identifies this campaign folder
    string id?;
};

# A folder used to organize campaigns
public type CampaignFolder2 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The number of campaigns in the folder
    int count?;
    # A string that uniquely identifies this campaign folder
    string id?;
};

# A summary of an individual Automation workflow's settings and content
public type AutomationWorkflow2 record {
    # The date and time the Automation was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The settings for the Automation workflow
    AutomationCampaignSettings1 settings?;
    # The date and time the Automation was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # List settings for the Automation
    List10 recipients?;
    # The total number of emails sent for the Automation
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    @jsondata:Name {value: "trigger_settings"}
    AutomationTrigger1 triggerSettings?;
    # A string that identifies the Automation
    string id?;
    # The tracking options for the Automation
    AutomationTrackingOptions tracking?;
    # The current status of the Automation
    "save"|"paused"|"sending" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary3 reportSummary?;
};

# Audience settings
public type InlineResponse20011Audience record {
    # To include list contacts as part of audience
    @jsondata:Name {value: "include_source_in_target"}
    boolean includeSourceInTarget?;
    @jsondata:Name {value: "email_source"}
    InlineResponse20011AudienceEmailSource emailSource?;
    @jsondata:Name {value: "targeting_specs"}
    InlineResponse20011AudienceTargetingSpecs targetingSpecs?;
    # List or Facebook based audience
    @jsondata:Name {value: "source_type"}
    "facebook"|"list" sourceType?;
    # Type of the audience
    "Custom Audience"|"Lookalike Audience"|"Interest-based Audience" 'type?;
    # To find similar audience in given country
    @jsondata:Name {value: "lookalike_country_code"}
    string lookalikeCountryCode?;
};

# Statistics for the top-performing email domains in a campaign
public type DomainPerformance record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of emails sent for the campaign
    @jsondata:Name {value: "total_sent"}
    int totalSent?;
    # The top 5 email domains based on total delivered emails
    EmailDomain[] domains?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Messages from a specific conversation
public type CollectionOfConversationMessages record {
    # An array of objects, each representing a conversation messages resources
    @jsondata:Name {value: "conversation_messages"}
    ConversationMessage1[] conversationMessages?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A string that identifies this conversation
    @jsondata:Name {value: "conversation_id"}
    string conversationId?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getReportsIdOpenDetailsIdMembersId
public type GetReportsIdOpenDetailsIdMembersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getConversations
public type GetConversationsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Whether the conversation has any unread messages
    @http:Query {name: "has_unread_messages"}
    "true"|"false" hasUnreadMessages?;
    # The unique id for the list
    @http:Query {name: "list_id"}
    string listId?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The unique id for the campaign
    @http:Query {name: "campaign_id"}
    string campaignId?;
};

# [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list
public type CampaignDefaults record {
    # The default from email for campaigns sent to this list
    @jsondata:Name {value: "from_email"}
    string fromEmail;
    # The default subject line for campaigns sent to this list
    string subject;
    # The default language for this lists's forms
    string language;
    # The default from name for campaigns sent to this list
    @jsondata:Name {value: "from_name"}
    string fromName;
};

# The settings for the Automation workflow
public type AutomationCampaignSettings1 record {
    # Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation
    @jsondata:Name {value: "auto_footer"}
    boolean autoFooter?;
    # Whether to use Mailchimp Conversation feature to manage replies
    @jsondata:Name {value: "use_conversation"}
    boolean useConversation?;
    # Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`
    boolean authenticate?;
    # The reply-to email address for the Automation
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)
    @jsondata:Name {value: "to_name"}
    string toName?;
    # Whether to automatically inline the CSS included with the Automation content
    @jsondata:Name {value: "inline_css"}
    boolean inlineCss?;
    # The title of the Automation
    string title?;
    # The 'from' name for the Automation (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
};

# A specific note for a specific member
public type MemberNotes record {
    # The content of the note. Note length is limited to 1,000 characters
    string note?;
};

# Represents the Queries record for the operation: getEcommerceStores
public type GetEcommerceStoresQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account
public type Conversation1 record {
    # A label representing the email of the sender of this message
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # The unique identifier of the list for this conversation
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The subject of the message
    string subject?;
    # The number of unread messages in this conversation
    @jsondata:Name {value: "unread_messages"}
    int unreadMessages?;
    @jsondata:Name {value: "last_message"}
    LastMessage lastMessage?;
    # A string that uniquely identifies this conversation
    string id?;
    # The total number of messages in this conversation
    @jsondata:Name {value: "message_count"}
    int messageCount?;
    # A label representing the sender of this message
    @jsondata:Name {value: "from_label"}
    string fromLabel?;
    # The unique identifier of the campaign for this conversation
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# The most recent message in the conversation
public type LastMessage record {
    # A label representing the email of the sender of this message
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # Whether this message has been marked as read
    boolean read?;
    # The subject of this message
    string subject?;
    # The plain-text content of the message
    string message?;
    # A label representing the sender of this message
    @jsondata:Name {value: "from_label"}
    string fromLabel?;
    # The date and time the message was either sent or received in ISO 8601 format
    string timestamp?;
};

# The status of a batch request
public type Batch record {
    # The number of completed operations. This includes operations that returned an error
    @jsondata:Name {value: "finished_operations"}
    int finishedOperations?;
    # The date and time when all operations in the batch request completed in ISO 8601 format
    @jsondata:Name {value: "completed_at"}
    string completedAt?;
    # The date and time when the server received the batch request in ISO 8601 format
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation
    @jsondata:Name {value: "total_operations"}
    int totalOperations?;
    # The number of completed operations that returned an error
    @jsondata:Name {value: "errored_operations"}
    int erroredOperations?;
    # A string that uniquely identifies this batch request
    string id?;
    # The URL of the gzipped archive of the results of all the operations
    @jsondata:Name {value: "response_body_url"}
    string responseBodyUrl?;
    # The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status
    "pending"|"preprocessing"|"started"|"finalizing"|"finished" status?;
};

# Information about a specific product
public type ECommerceProduct record {
    # An array of the product's images
    ECommerceProductImage[] images?;
    # The vendor for a product
    string vendor?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The description of a product
    string description?;
    # The handle of a product
    string 'handle?;
    # The date and time the product was published
    @jsondata:Name {value: "published_at_foreign"}
    string publishedAtForeign?;
    # A unique identifier for the product
    string id;
    # An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product
    ECommerceProductVariant[] variants;
    # The title of a product
    string title;
    # The type of product
    string 'type?;
    # The URL for a product
    string url?;
};

# Information about a specific cart
public type ECommerceCart record {
    # The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations
    @jsondata:Name {value: "checkout_url"}
    string checkoutUrl?;
    # The total tax for the cart
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The order total for the cart
    @jsondata:Name {value: "order_total"}
    decimal orderTotal;
    # A unique identifier for the cart
    string id;
    # An array of the cart's line items
    ECommerceCartLineItem[] lines;
    # A string that uniquely identifies the campaign for a cart
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The three-letter ISO 4217 code for the currency that the cart uses
    @jsondata:Name {value: "currency_code"}
    string currencyCode;
    # Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body
    ECommerceCustomer customer;
};

# For sent campaigns, a summary of opens and clicks
public type CampaignReportSummary1 record {
    # The number of unique clicks
    @jsondata:Name {value: "subscriber_clicks"}
    int subscriberClicks?;
    # The number of unique clicks divided by the total number of successful deliveries
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # E-Commerce stats for a campaign
    ECommerceReport1 ecommerce?;
    # The total number of opens for a campaign
    int opens?;
    # The total number of clicks for an campaign
    int clicks?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of unique opens divided by the total number of successful deliveries
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# Represents the Queries record for the operation: getListMemberTags
public type GetListMemberTagsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getListsIdInterestCategoriesIdInterestsId
public type GetListsIdInterestCategoriesIdInterestsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type ListMembers record {
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    @jsondata:Name {value: "last_note"}
    Notes lastNote?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Star rating for this member, between 1 and 5
    @jsondata:Name {value: "member_rating"}
    int memberRating?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # An identifier for the address across all of Mailchimp
    @jsondata:Name {value: "unique_email_id"}
    string uniqueEmailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The contact's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # The list member's email client
    @jsondata:Name {value: "email_client"}
    string emailClient?;
    # Open and click rates for this subscriber
    SubscriberStats stats?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location1 location?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status?;
    # The date and time the member's info was last changed in ISO 8601 format
    @jsondata:Name {value: "last_changed"}
    string lastChanged?;
};

# Represents the Queries record for the operation: getReportingSurveys
public type GetReportingSurveysQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# List settings for the Automation
public type List10 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions2 segmentOpts?;
    # The id of the store
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # List Name
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
};

# Represents the Queries record for the operation: getReportingSurveysIdResponses
public type GetReportingSurveysIdResponsesQueries record {
    # The ID of the option chosen to filter responses on
    @http:Query {name: "chose_answer"}
    string choseAnswer?;
    # The ID of the question that was answered
    @http:Query {name: "answered_question"}
    int answeredQuestion?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Filter survey responses by familiarity of the respondents
    @http:Query {name: "respondent_familiarity_is"}
    "new"|"known"|"unknown" respondentFamiliarityIs?;
};

public type ActionsTestBody record {
    # An array of email addresses to send the test email to
    @jsondata:Name {value: "test_emails"}
    string[] testEmails;
    # Choose the type of test email to send
    @jsondata:Name {value: "send_type"}
    "html"|"plaintext" sendType;
};

# Information about a specific cart
public type ECommerceCart1 record {
    # The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations
    @jsondata:Name {value: "checkout_url"}
    string checkoutUrl?;
    # The total tax for the cart
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The date and time the cart was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the cart was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The order total for the cart
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # A unique identifier for the cart
    string id?;
    # An array of the cart's line items
    ECommerceCartLineItem3[] lines?;
    # A string that uniquely identifies the campaign associated with a cart
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The three-letter ISO 4217 code for the currency that the cart uses
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # Information about a specific customer
    ECommerceCustomer6 customer?;
};

# A facebook ad
public type InlineResponse20011InlineResponse20011InlineResponse20011AllOf123 record {
    # Check if this ad is connected to a facebook page
    @jsondata:Name {value: "is_connected"}
    boolean isConnected?;
    # Check if this ad is connected to a facebook page
    InlineResponse20011Feedback feedback?;
    # Connected Site
    InlineResponse20011Site site?;
    # Audience settings
    InlineResponse20011Audience audience?;
    # Check if this ad has audience setup
    @jsondata:Name {value: "has_audience"}
    boolean hasAudience?;
    # Check if this ad has content
    @jsondata:Name {value: "has_content"}
    boolean hasContent?;
    # Channel settings
    InlineResponse20011Channel channel?;
    InlineResponse20011Content content?;
    InlineResponse20011Budget budget?;
};

# Do particular authorization constraints around this collection limit creation of new instances?
public type CollectionAuthorization record {
    # May the user create additional instances of this resource?
    @jsondata:Name {value: "may_create"}
    boolean mayCreate;
    # How many total instances of this resource are already in use? This is independent of any filter conditions applied to the query. Value may be larger than max_instances. As a special case, -1 is returned when access is unlimited
    @jsondata:Name {value: "current_total_instances"}
    int currentTotalInstances?;
    # How many total instances of this resource are allowed? This is independent of any filter conditions applied to the query. As a special case, -1 indicates unlimited
    @jsondata:Name {value: "max_instances"}
    int maxInstances;
};

# Information about a specific cart
public type ECommerceCart2 record {
    # The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations
    @jsondata:Name {value: "checkout_url"}
    string checkoutUrl?;
    # The total tax for the cart
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The order total for the cart
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # An array of the cart's line items
    ECommerceCartLineItem1[] lines?;
    # A string that uniquely identifies the campaign associated with a cart
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The three-letter ISO 4217 code for the currency that the cart uses
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body
    ECommerceCustomer1 customer?;
};

# A single instance of a campaign referral
public type Referrer record {
    # A referrer (truncated to 100 bytes)
    string referrer?;
    # The number of clicks a single referrer generated
    int clicks?;
    # The timestamp for the last click from this referrer
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # The timestamp for the first click from this referrer
    @jsondata:Name {value: "first_click"}
    string firstClick?;
};

# Information about a specific cart
public type ECommerceCart3 record {
    # The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations
    @jsondata:Name {value: "checkout_url"}
    string checkoutUrl?;
    # The total tax for the cart
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The date and time the cart was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the cart was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The order total for the cart
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # A unique identifier for the cart
    string id?;
    # An array of the cart's line items
    ECommerceCartLineItem3[] lines?;
    # A string that uniquely identifies the campaign associated with a cart
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The three-letter ISO 4217 code for the currency that the cart uses
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # Information about a specific customer
    ECommerceCustomer6 customer?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdPromorules
public type GetEcommerceStoresIdPromorulesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The tracking options for a campaign
public type CampaignTrackingOptions1 record {
    # Deprecated
    SalesforceCRMTracking1 salesforce?;
    # Deprecated
    @jsondata:Name {value: "goal_tracking"}
    boolean goalTracking?;
    # Deprecated
    CapsuleCRMTracking1 capsule?;
    # The custom slug for [Click Tale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)
    string clicktale?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`
    @jsondata:Name {value: "text_clicks"}
    boolean textClicks?;
    # Whether to enable e-commerce tracking
    boolean ecomm360?;
    # Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`
    boolean opens?;
    # The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)
    @jsondata:Name {value: "google_analytics"}
    string googleAnalytics?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`
    @jsondata:Name {value: "html_clicks"}
    boolean htmlClicks?;
};

# The report for a survey
public type SurveyReport record {
    # The ID of the list connected to this survey
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The date and time the survey was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The date and time the survey was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The total number of responses to this survey
    @jsondata:Name {value: "total_responses"}
    int totalResponses?;
    # A string that uniquely identifies this survey
    string id?;
    # The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The name of the list connected to this survey
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The title of the survey
    string title?;
    # The date and time the survey was published in ISO 8601 format
    @jsondata:Name {value: "published_at"}
    string publishedAt?;
    # The URL for the survey
    string url?;
    # The survey's status
    "published"|"unpublished" status?;
};

# A list of campaign folders
public type CampaignFolders record {
    # An array of objects representing campaign folders
    CampaignFolder2[] folders?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A summary of opens and clicks for sent campaigns
public type CampaignReportSummary3 record {
    # The number of unique clicks
    @jsondata:Name {value: "subscriber_clicks"}
    int subscriberClicks?;
    # The number of unique clicks, divided by the total number of successful deliveries
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The total number of opens for a campaign
    int opens?;
    # The total number of clicks for an campaign
    int clicks?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of unique opens divided by the total number of successful deliveries
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# A list of a member's opens activity in a specific campaign
public type OpenActivity record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The total number of times the this campaign was opened by the list member
    @jsondata:Name {value: "opens_count"}
    int opensCount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event
    MemberActivity2[] opens?;
    # The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation
    @jsondata:Name {value: "contact_status"}
    string contactStatus?;
    # The total number of times the this campaign was opened by the list member excluding opens from email clients that use proxies 
    @jsondata:Name {value: "proxy_excluded_opens_count"}
    int proxyExcludedOpensCount?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# For sent campaigns, a summary of opens, clicks, and e-commerce data
public type CampaignReportSummary2 record {
    # The number of unique clicks
    @jsondata:Name {value: "subscriber_clicks"}
    int subscriberClicks?;
    # The number of unique clicks divided by the total number of successful deliveries
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # E-Commerce stats for a campaign
    ECommerceReport1 ecommerce?;
    # The total number of opens for a campaign
    int opens?;
    # The total number of clicks for an campaign
    int clicks?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of unique opens divided by the total number of successful deliveries
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# A specific note for a specific member
public type MemberNotes1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The content of the note
    string note?;
    # The date and time the note was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the note was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The note id
    int id?;
    # As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # The author of the note
    @jsondata:Name {value: "created_by"}
    string createdBy?;
};

# A specific note for a specific member
public type MemberNotes2 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The content of the note
    string note?;
    # The date and time the note was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the note was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The note id
    int id?;
    # As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # The author of the note
    @jsondata:Name {value: "created_by"}
    string createdBy?;
};

# Report details about a sent campaign
public type CampaignReport record {
    # An object describing the forwards and forward activity for the campaign
    Forwards forwards?;
    @jsondata:Name {value: "share_report"}
    ShareReport shareReport?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # For RSS campaigns, the date and time of the last send in ISO 8601 format
    @jsondata:Name {value: "rss_last_send"}
    string rssLastSend?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto)
    string 'type?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    @jsondata:Name {value: "industry_stats"}
    IndustryStats industryStats?;
    @jsondata:Name {value: "list_stats"}
    ListStats listStats?;
    # The title of the campaign
    @jsondata:Name {value: "campaign_title"}
    string campaignTitle?;
    @jsondata:Name {value: "facebook_likes"}
    FacebookLikes facebookLikes?;
    # An hourly breakdown of the performance of the campaign over the first 24 hours
    CampaignSubReportsTimeseries[] timeseries?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # E-Commerce stats for a campaign
    ECommerceReport ecommerce?;
    # A string that uniquely identifies this campaign
    string id?;
    # An object describing the bounce summary for the campaign
    Bounces bounces?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    @jsondata:Name {value: "ab_split"}
    ABSplitStats abSplit?;
    # An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp
    CampaignSubReportsTimewarp[] timewarp?;
    # The total number of unsubscribed members for this campaign
    int unsubscribed?;
    # The date and time a campaign was sent in ISO 8601 format
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    # An object describing the open activity for the campaign
    Opens opens?;
    # An object describing the click activity for the campaign
    Clicks clicks?;
    # The number of abuse reports generated for this campaign
    @jsondata:Name {value: "abuse_reports"}
    int abuseReports?;
    @jsondata:Name {value: "delivery_status"}
    CampaignDeliveryStatus deliveryStatus?;
};

# The store address
public type Address record {
    # The store's country
    string country?;
    # The two-letter code for to the store's country
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The store's state name or normalized province
    string province?;
    # An additional field for the store's mailing address
    string address2?;
    # The city the store is located in
    string city?;
    # The store's mailing address
    string address1?;
    # The latitude of the store location
    decimal latitude?;
    # The two-letter code for the store's province or state
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The store's postal or zip code
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude of the store location
    decimal longitude?;
};

# The delay settings for an automation email
public type AutomationDelay record {
    # The delay amount for an automation email
    int amount?;
    # The action that triggers the delay of an automation emails
    "signup"|"ecomm_abandoned_browse"|"ecomm_abandoned_cart" action;
    # The type of delay for an automation email
    "now"|"day"|"hour"|"week" 'type?;
    # Whether the delay settings describe before or after the delay action of an automation email
    "after" direction?;
};

# Represents the Queries record for the operation: getReportsIdSentTo
public type GetReportsIdSentToQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# E-Commerce stats for a campaign
public type ECommerceReport1 record {
    # The total spent for a campaign. Calculated as the sum of all order totals with no deductions
    @jsondata:Name {value: "total_spent"}
    decimal totalSpent?;
    # The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    # The total orders for a campaign
    @jsondata:Name {value: "total_orders"}
    int totalOrders?;
};

# Represents the Queries record for the operation: getAllLandingPages
public type GetAllLandingPagesQueries record {
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "created_at"|"updated_at" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# A month-by-month summary of a specific list's growth activity
public type GrowthHistory record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a monthly growth report for a list
    GrowthHistory2[] history?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A folder used to organize templates
public type TemplateFolder record {
    # The name of the folder
    string name;
};

# The send checklist for the campaign
public type SendChecklist record {
    # Whether the campaign is ready to send
    @jsondata:Name {value: "is_ready"}
    boolean isReady?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A list of feedback items to review before sending your campaign
    SendChecklistItems[] items?;
};

# The HTML content for a landing page
public type LandingPageContent record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The JSON Structure for the landing page
    string 'json?;
    # The raw HTML for the landing page
    string html?;
};

# Represents the Queries record for the operation: getTemplatesIdDefaultContent
public type GetTemplatesIdDefaultContentQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getLandingPageIdContent
public type GetLandingPageIdContentQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Members to subscribe to or unsubscribe from a list
public type MembersToSubscribeUnsubscribeTofromAListInBatch record {
    # An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call
    AddListMembers[] members;
    # Whether this batch operation will replace all existing tags with tags in request
    @jsondata:Name {value: "sync_tags"}
    boolean syncTags?;
    # Whether this batch operation will change existing members' subscription status
    @jsondata:Name {value: "update_existing"}
    boolean updateExisting?;
};

# A specific feedback message from a specific campaign
public type CampaignFeedback2 record {
    # The status of feedback
    @jsondata:Name {value: "is_complete"}
    boolean isComplete?;
    # The content of the feedback
    string message?;
    # The block id for the editable block that the feedback addresses
    @jsondata:Name {value: "block_id"}
    int blockId?;
};

public type InlineResponse20012FacebookAds record {
    *FacebookAdsAllOf11;
    *FacebookAdsFacebookAdsAllOf112;
    *FacebookAdsFacebookAdsFacebookAdsAllOf1123;
    *FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf11234;
    @jsondata:Name {value: "report_summary"}
    record {*InlineResponse20013ReportSummary; *ReportSummary; int reach?; @jsondata:Name {value: "click_rate"}
        decimal clickRate?; decimal impressions?; ReportSummaryEcommerce ecommerce?; int clicks?;} reportSummary?;
};

# A specific feedback message from a specific campaign
public type CampaignFeedback1 record {
    # The date and time the feedback was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # If a reply, the id of the parent feedback item
    @jsondata:Name {value: "parent_id"}
    int parentId?;
    # The individual id for the feedback item
    @jsondata:Name {value: "feedback_id"}
    int feedbackId?;
    # The date and time the feedback item was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The status of feedback
    @jsondata:Name {value: "is_complete"}
    boolean isComplete?;
    # The source of the feedback
    "api"|"email"|"sms"|"web"|"ios"|"android" 'source?;
    # The content of the feedback
    string message?;
    # The login name of the user who created the feedback
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # The block id for the editable block that the feedback addresses
    @jsondata:Name {value: "block_id"}
    int blockId?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# A specific feedback message from a specific campaign
public type CampaignFeedback3 record {
    # The date and time the feedback was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # If a reply, the id of the parent feedback item
    @jsondata:Name {value: "parent_id"}
    int parentId?;
    # The individual id for the feedback item
    @jsondata:Name {value: "feedback_id"}
    int feedbackId?;
    # The date and time the feedback item was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The status of feedback
    @jsondata:Name {value: "is_complete"}
    boolean isComplete?;
    # The source of the feedback
    "api"|"email"|"sms"|"web"|"ios"|"android" 'source?;
    # The content of the feedback
    string message;
    # The login name of the user who created the feedback
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # The block id for the editable block that the feedback addresses
    @jsondata:Name {value: "block_id"}
    int blockId?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type ListLocation record {
    # The ISO 3166 2 digit country code
    string cc?;
    # The name of the country
    string country?;
    # The total number of subscribers in the country
    int total?;
    # The percent of subscribers in the country
    decimal percent?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdPromocodes
public type GetEcommerceStoresIdPromocodesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

public type InlineResponse20013AudienceActivityRevenue record {
    string date?;
    decimal revenue?;
};

# Available triggers for Automation workflows
public type AutomationTrigger1 record {
    # A workflow's runtime settings for an Automation
    AutomationWorkflowRuntimeSettings runtime?;
    # The number of emails in the Automation workflow
    @jsondata:Name {value: "workflow_emails_count"}
    int workflowEmailsCount?;
    # The type of Automation workflow
    @jsondata:Name {value: "workflow_type"}
    "abandonedBrowse"|"abandonedCart"|"api"|"bestCustomers"|"categoryFollowup"|"dateAdded"|"emailFollowup"|"emailSeries"|"groupAdd"|"groupRemove"|"mandrill"|"productFollowup"|"purchaseFollowup"|"recurringEvent"|"specialEvent"|"visitUrl"|"welcomeSeries" workflowType;
    # The title of the workflow type
    @jsondata:Name {value: "workflow_title"}
    string workflowTitle?;
};

# Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application
public type InterestCategory record {
    # The order that the categories are displayed in the list. Lower numbers display first
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # The text description of this category. This field appears on signup forms and is often phrased as a question
    string title;
    # Determines how this category’s interests appear on signup forms
    "checkboxes"|"dropdown"|"radio"|"hidden" 'type;
};

# The possible sources of any events that can trigger the webhook and whether they are enabled
public type Sources record {
    # Whether the webhook is triggered by admin-initiated actions in the web interface
    boolean admin?;
    # Whether the webhook is triggered by actions initiated via the API
    boolean api?;
    # Whether the webhook is triggered by subscriber-initiated actions
    boolean user?;
};

# Information about a specific list
public type SubscriberList2 record {
    # The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_subscribe"}
    string notifyOnSubscribe = "false";
    # Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup
    @jsondata:Name {value: "email_type_option"}
    boolean emailTypeOption;
    # Whether or not the list has marketing permissions (eg. GDPR) enabled
    @jsondata:Name {value: "marketing_permissions"}
    boolean marketingPermissions = false;
    # The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list
    @jsondata:Name {value: "permission_reminder"}
    string permissionReminder;
    # Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default
    @jsondata:Name {value: "use_archive_bar"}
    boolean useArchiveBar = false;
    # The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_unsubscribe"}
    string notifyOnUnsubscribe = "false";
    # [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
    ListContact1 contact;
    # The name of the list
    string name;
    # Whether or not to require the subscriber to confirm subscription via email
    @jsondata:Name {value: "double_optin"}
    boolean doubleOptin = false;
    @jsondata:Name {value: "campaign_defaults"}
    CampaignDefaults campaignDefaults;
};

# Information about a specific list
public type SubscriberList3 record {
    # The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_subscribe"}
    string notifyOnSubscribe = "false";
    # The full version of this list's subscribe form (host will vary)
    @jsondata:Name {value: "subscribe_url_long"}
    string subscribeUrlLong?;
    # Whether or not the list has marketing permissions (eg. GDPR) enabled
    @jsondata:Name {value: "marketing_permissions"}
    boolean marketingPermissions = false;
    # The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list
    @jsondata:Name {value: "permission_reminder"}
    string permissionReminder?;
    # Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default
    @jsondata:Name {value: "use_archive_bar"}
    boolean useArchiveBar = false;
    # The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_unsubscribe"}
    string notifyOnUnsubscribe = "false";
    # Legacy - visibility settings are no longer used
    "pub"|"prv" visibility?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time that this list was created in ISO 8601 format
    @jsondata:Name {value: "date_created"}
    string dateCreated?;
    @jsondata:Name {value: "campaign_defaults"}
    CampaignDefaults1 campaignDefaults?;
    # The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Any list-specific modules installed for this list
    string[] modules?;
    # Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup
    @jsondata:Name {value: "email_type_option"}
    boolean emailTypeOption?;
    # The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address
    @jsondata:Name {value: "beamer_address"}
    string beamerAddress?;
    # Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup
    @jsondata:Name {value: "has_welcome"}
    boolean hasWelcome = false;
    # Stats for the list. Many of these are cached for at least five minutes
    Statistics stats?;
    # [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
    ListContact2 contact?;
    # The name of the list
    string name?;
    # An auto-generated activity score for the list (0-5)
    @jsondata:Name {value: "list_rating"}
    int listRating?;
    # Whether or not to require the subscriber to confirm subscription via email
    @jsondata:Name {value: "double_optin"}
    boolean doubleOptin = false;
    # A string that uniquely identifies this list
    string id?;
    # Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form
    @jsondata:Name {value: "subscribe_url_short"}
    string subscribeUrlShort?;
};

# A summary of the click-throughs on the campaign's URL
public type ClickSummary record {
    # The total number of clicks to the campaign's URL
    int clicks?;
    # The timestamp for the last click to the URL
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # A summary of the top click locations
    Location2[] locations?;
    # The timestamp for the first click to the URL
    @jsondata:Name {value: "first_click"}
    string firstClick?;
};

# A single marketing permission a subscriber has either opted-in to or opted-out of
public type MarketingPermission record {
    # The id for the marketing permission on the list
    @jsondata:Name {value: "marketing_permission_id"}
    string marketingPermissionId?;
    # If the subscriber has opted-in to the marketing permission
    boolean enabled?;
};

# Information about a specific list
public type SubscriberList1 record {
    # The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_subscribe"}
    string notifyOnSubscribe = "false";
    # The full version of this list's subscribe form (host will vary)
    @jsondata:Name {value: "subscribe_url_long"}
    string subscribeUrlLong?;
    # Whether or not the list has marketing permissions (eg. GDPR) enabled
    @jsondata:Name {value: "marketing_permissions"}
    boolean marketingPermissions = false;
    # The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list
    @jsondata:Name {value: "permission_reminder"}
    string permissionReminder?;
    # Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default
    @jsondata:Name {value: "use_archive_bar"}
    boolean useArchiveBar = false;
    # The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_unsubscribe"}
    string notifyOnUnsubscribe = "false";
    # Legacy - visibility settings are no longer used
    "pub"|"prv" visibility?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time that this list was created in ISO 8601 format
    @jsondata:Name {value: "date_created"}
    string dateCreated?;
    @jsondata:Name {value: "campaign_defaults"}
    CampaignDefaults1 campaignDefaults?;
    # The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Any list-specific modules installed for this list
    string[] modules?;
    # Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup
    @jsondata:Name {value: "email_type_option"}
    boolean emailTypeOption?;
    # The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address
    @jsondata:Name {value: "beamer_address"}
    string beamerAddress?;
    # Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup
    @jsondata:Name {value: "has_welcome"}
    boolean hasWelcome = false;
    # Stats for the list. Many of these are cached for at least five minutes
    Statistics stats?;
    # [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
    ListContact2 contact?;
    # The name of the list
    string name?;
    # An auto-generated activity score for the list (0-5)
    @jsondata:Name {value: "list_rating"}
    int listRating?;
    # Whether or not to require the subscriber to confirm subscription via email
    @jsondata:Name {value: "double_optin"}
    boolean doubleOptin = false;
    # A string that uniquely identifies this list
    string id?;
    # Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form
    @jsondata:Name {value: "subscribe_url_short"}
    string subscribeUrlShort?;
};

# Connected Site
public type InlineResponse20011Site record {
    # The name of the connected site
    string name?;
    # The ID of this connected site
    int id?;
    # The URL for this connected site
    string url?;
};

# Represents the Queries record for the operation: getReportingFacebookAds
public type GetReportingFacebookAdsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "created_at"|"updated_at"|"end_time" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProductsIdVariants
public type GetEcommerceStoresIdProductsIdVariantsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Determines if the campaign qualifies to be resent to non-purchasers
public type ToNonPurchasers record {
    # The reason the campaign is not eligible to be resent to this segment
    string reason?;
    # Determines if the campaign qualifies to be resent to this segment
    @jsondata:Name {value: "is_eligible"}
    boolean isEligible?;
};

public type BatchesBody record {
    # An array of objects that describes operations to perform
    Operations[] operations;
};

# Represents the Queries record for the operation: getReportingSurveysIdQuestionsId
public type GetReportingSurveysIdQuestionsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getListsIdMembers
public type GetListsIdMembersQueries record {
    # Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_last_changed"}
    string sinceLastChanged?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The email type
    @http:Query {name: "email_type"}
    string emailType?;
    # Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. "any" will match a member with any of the interest supplied, "all" will only match members with every interest supplied, and "none" will match members without any of the interest supplied
    @http:Query {name: "interest_match"}
    "any"|"all"|"none" interestMatch?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members
    @http:Query {name: "vip_only"}
    boolean vipOnly?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_timestamp_opt"}
    string sinceTimestampOpt?;
    # Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error
    @http:Query {name: "unsubscribed_since"}
    string unsubscribedSince?;
    # A unique identifier for the email address across all Mailchimp lists
    @http:Query {name: "unique_email_id"}
    string uniqueEmailId?;
    # Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories
    @http:Query {name: "interest_ids"}
    string interestIds?;
    # Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_last_changed"}
    string beforeLastChanged?;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "timestamp_opt"|"timestamp_signup"|"last_changed" sortField?;
    # The unique id for the interest category
    @http:Query {name: "interest_category_id"}
    string interestCategoryId?;
    # Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter
    @http:Query {name: "since_last_campaign"}
    boolean sinceLastCampaign?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_timestamp_opt"}
    string beforeTimestampOpt?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
    # The subscriber's status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional"|"archived" status?;
};

# Represents the Queries record for the operation: getAuthorizedAppsId
public type GetAuthorizedAppsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A specific feedback message from a specific campaign
public type CampaignFeedback record {
    # The status of feedback
    @jsondata:Name {value: "is_complete"}
    boolean isComplete?;
    # The content of the feedback
    string message;
    # The block id for the editable block that the feedback addresses
    @jsondata:Name {value: "block_id"}
    int blockId?;
};

# Represents the Queries record for the operation: getReportsIdClickDetailsIdMembers
public type GetReportsIdClickDetailsIdMembersQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A summary of a subscriber removed from an Automation workflow
public type SubscriberRemovedFromAutomationWorkflow record {
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # A string that uniquely identifies a list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
};

# Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account
public type Conversation record {
    # A label representing the email of the sender of this message
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # The unique identifier of the list for this conversation
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The subject of the message
    string subject?;
    # The number of unread messages in this conversation
    @jsondata:Name {value: "unread_messages"}
    int unreadMessages?;
    @jsondata:Name {value: "last_message"}
    LastMessage lastMessage?;
    # A string that uniquely identifies this conversation
    string id?;
    # The total number of messages in this conversation
    @jsondata:Name {value: "message_count"}
    int messageCount?;
    # A label representing the sender of this message
    @jsondata:Name {value: "from_label"}
    string fromLabel?;
    # The unique identifier of the campaign for this conversation
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type InlineResponse20013AllOf1 record {
    # If this outreach targets a segment of your audience
    @jsondata:Name {value: "has_segment"}
    boolean hasSegment?;
    # The URL of the thumbnail for this outreach
    string thumbnail?;
    # The date and time the outreach was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The date and time the outreach was canceled in ISO 8601 format
    @jsondata:Name {value: "canceled_at"}
    string canceledAt?;
    # The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The type of outreach this object is
    "regular"|"email-touchpoint"|"plaintext"|"rss"|"reconfirm"|"variate"|"absplit"|"automation"|"facebook"|"google"|"autoresponder"|"transactional"|"page"|"website"|"social_post"|"survey"|"customer_journey"|"sms" 'type?;
    # Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context
    @jsondata:Name {value: "show_report"}
    boolean showReport?;
    # The date and time the outreach was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The date and time the outreach was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # High level audience information for who the outreach targets
    Recipients recipients?;
    # The date and time the outreach was (or will be) published in ISO 8601 format
    @jsondata:Name {value: "published_time"}
    string publishedTime?;
    # Title or name of an Outreach
    string name?;
    # Unique ID of an Outreach
    string id?;
    # The status of this outreach
    "save"|"paused"|"schedule"|"scheduled"|"sending"|"sent"|"canceled"|"canceling"|"active"|"disconnected"|"somepaused"|"draft"|"completed"|"partialRejected"|"pending"|"rejected"|"published"|"unpublished" status?;
    @jsondata:Name {value: "report_summary"}
    ReportSummary reportSummary?;
};

# Represents the Queries record for the operation: getListsIdMergeFields
public type GetListsIdMergeFieldsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The merge field type
    string 'type?;
    # Whether it's a required merge field
    boolean required?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProductsIdImagesId
public type GetEcommerceStoresIdProductsIdImagesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The details of a survey question's report
public type SurveyQuestionReport1 record {
    # Label for the low end of the range
    @jsondata:Name {value: "range_low_label"}
    string rangeLowLabel?;
    # The query of the survey question
    string query?;
    # The average rating for this range question
    @jsondata:Name {value: "average_rating"}
    float averageRating?;
    # Label used for the subscribe checkbox for this email question
    @jsondata:Name {value: "subscribe_checkbox_label"}
    string subscribeCheckboxLabel?;
    # The response type of the survey question
    "pickOne"|"pickMany"|"range"|"text"|"email" 'type?;
    # Label for the high end of the range
    @jsondata:Name {value: "range_high_label"}
    string rangeHighLabel?;
    # Whether the subscribe checkbox is shown for this email question
    @jsondata:Name {value: "subscribe_checkbox_enabled"}
    boolean subscribeCheckboxEnabled?;
    # The unique ID of the survey
    @jsondata:Name {value: "survey_id"}
    string surveyId?;
    # Whether this survey question has an 'other' option
    @jsondata:Name {value: "has_other"}
    boolean hasOther?;
    # Placeholder text for this survey question's answer box
    @jsondata:Name {value: "placeholder_label"}
    string placeholderLabel?;
    # Label used for the 'other' option of this survey question
    @jsondata:Name {value: "other_label"}
    string otherLabel?;
    @jsondata:Name {value: "contact_counts"}
    ContactCounts contactCounts?;
    # Whether this survey question is required to answer
    @jsondata:Name {value: "is_required"}
    boolean isRequired?;
    # The answer choices for this question
    SurveyQuestionReportOptions[] options?;
    # The total number of responses to this question
    @jsondata:Name {value: "total_responses"}
    int totalResponses?;
    # The ID of the survey question
    string id?;
    @jsondata:Name {value: "merge_field"}
    MergeField4 mergeField?;
};

# Represents the Queries record for the operation: getConnectedSitesId
public type GetConnectedSitesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A summary of an individual landing page's settings and content
public type LandingPageReport record {
    # The number of unique visits to this landing pages
    @jsondata:Name {value: "unique_visits"}
    int uniqueVisits?;
    # The number of subscribes to this landing pages
    int subscribes?;
    # The list id connected to this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The ID used in the Mailchimp web application
    @jsondata:Name {value: "web_id"}
    int webId?;
    # List Name
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The name of the landing page the user's customers will see
    string title?;
    # The landing page url
    string url?;
    # A list of tags associated to the landing page
    @jsondata:Name {value: "signup_tags"}
    Tag[] signupTags?;
    # The number of visits to this landing pages
    int visits?;
    LandingPageReportTimeseries timeseries?;
    LandingPageReportEcommerce ecommerce?;
    # The name of this landing page the user will see
    string name?;
    # The number of clicks to this landing pages
    int clicks?;
    # A string that uniquely identifies this landing page
    string id?;
    # The time this landing page was published
    @jsondata:Name {value: "published_at"}
    string publishedAt?;
    # The percentage of people who visited your landing page and were added to your list
    @jsondata:Name {value: "conversion_rate"}
    decimal conversionRate?;
    # The time this landing page was unpublished
    @jsondata:Name {value: "unpublished_at"}
    string unpublishedAt?;
    # The status of the landing page
    string status?;
};

# The billing address for the order
public type BillingAddress record {
    # The country in the billing address
    string country?;
    # An additional field for the billing address
    string address2?;
    # The city in the billing address
    string city?;
    # The billing address for the order
    string address1?;
    # The latitude for the billing address location
    decimal latitude?;
    # The two-letter code for the province in the billing address
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the billing address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the billing address
    string province?;
    # The phone number for the billing address
    string phone?;
    # The name associated with the billing address
    string name?;
    # The company associated with the billing address
    string company?;
    # The postal or zip code in the billing address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the billing address location
    decimal longitude?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCustomersId
public type GetEcommerceStoresIdCustomersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getReportsIdEmailActivityId
public type GetReportsIdEmailActivityIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    string since?;
};

# A new event for a specific list member
public type Events record {
    # The date and time the event occurred in ISO 8601 format
    @jsondata:Name {value: "occurred_at"}
    string occurredAt?;
    # Events created with the is_syncing value set to `true` will not trigger automations
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
    string name;
    # An optional list of properties
    record {|string...;|} properties?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCarts
public type GetEcommerceStoresIdCartsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A summary of an individual Automation workflow email
public type AutomationWorkflowEmail record {
    # The link to the campaign's archive version in ISO 8601 format
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # Settings for the campaign including the email subject, from name, and from email address
    CampaignSettings3 settings?;
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The date and time the campaign was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    @jsondata:Name {value: "trigger_settings"}
    AutomationTrigger1 triggerSettings?;
    # The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The tracking options for a campaign
    CampaignTrackingOptions1 tracking?;
    # Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor
    @jsondata:Name {value: "needs_block_refresh"}
    boolean needsBlockRefresh?;
    # The date and time the campaign was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The delay settings for an Automation email
    AutomationDelay1 delay?;
    #  The date and time a campaign was sent in ISO 8601 format
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    # How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')
    @jsondata:Name {value: "content_type"}
    string contentType?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List6 recipients?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # A string that uniquely identifies the Automation email
    string id?;
    # The position of an Automation email in a workflow
    int position?;
    # Determines if the campaign contains the *|BRAND:LOGO|* merge tag
    @jsondata:Name {value: "has_logo_merge_tag"}
    boolean hasLogoMergeTag?;
    # The current status of the campaign
    "save"|"paused"|"sending" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary reportSummary?;
};

# The url and password for the [VIP report](https://mailchimp.com/help/share-a-campaign-report/)
public type ShareReport record {
    # The URL for the VIP report
    @jsondata:Name {value: "share_url"}
    string shareUrl?;
    # If password protected, the password for the VIP report
    @jsondata:Name {value: "share_password"}
    string sharePassword?;
};

# Use this template to generate the HTML content of the campaign
public type TemplateContent record {
    # The id of the template to use
    int id;
    # Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template
    record {} sections?;
};

# A summary of an individual Automation workflow's settings and content
public type AutomationWorkflow record {
    # The settings for the Automation workflow
    AutomationCampaignSettings settings?;
    # List settings for the Automation
    List recipients;
    @jsondata:Name {value: "trigger_settings"}
    AutomationTrigger triggerSettings;
};

# Represents the Queries record for the operation: getCampaignsIdContent
public type GetCampaignsIdContentQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Channel settings
public type InlineResponse20011Channel record {
    # Is this for facebook feed
    @jsondata:Name {value: "fb_placement_feed"}
    boolean fbPlacementFeed?;
    # Is this for facebook audience
    @jsondata:Name {value: "fb_placement_audience"}
    boolean fbPlacementAudience?;
    # Is this for instagram feed
    @jsondata:Name {value: "ig_placement_feed"}
    boolean igPlacementFeed?;
};

# A collection of the store's promo rules
public type PromoRules record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing promo rules defined for a store
    @jsondata:Name {value: "promo_rules"}
    ECommercePromoRule3[] promoRules?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A collection of subscriber lists for this account. Lists contain subscribers who have opted-in to receive correspondence from you or your organization
public type SubscriberLists record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a list
    SubscriberList3[] lists;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # Do particular authorization constraints around this collection limit creation of new instances?
    CollectionAuthorization constraints?;
};

# Represents the Queries record for the operation: searchTagsByName
public type SearchTagsByNameQueries record {
    # The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned
    string name?;
};

# Details for the automations attached to this store
public type Automations record {
    @jsondata:Name {value: "abandoned_browse"}
    AbandonedBrowseAutomation abandonedBrowse?;
    @jsondata:Name {value: "abandoned_cart"}
    AbandonedCartAutomation abandonedCart?;
};

# Represents the Queries record for the operation: postListsId
public type PostListsIdQueries record {
    # If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false
    @http:Query {name: "skip_merge_validation"}
    boolean skipMergeValidation?;
    # If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false
    @http:Query {name: "skip_duplicate_check"}
    boolean skipDuplicateCheck?;
};

# A collection of a store's products
public type Products record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing a store product
    ECommerceProduct4[] products?;
};

# The schedule for sending the RSS Campaign
public type SendingSchedule1 record {
    # The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/)
    @constraint:Int {minValue: 0, maxValue: 23}
    int hour?;
    # The day of the week to send a weekly RSS Campaign
    @jsondata:Name {value: "weekly_send_day"}
    "sunday"|"monday"|"tuesday"|"wednesday"|"thursday"|"friday"|"saturday" weeklySendDay?;
    @jsondata:Name {value: "daily_send"}
    DailySendingDays dailySend?;
    # The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February
    @jsondata:Name {value: "monthly_send_date"}
    decimal monthlySendDate?;
};

# Represents the Queries record for the operation: getReportingFacebookAdsId
public type GetReportingFacebookAdsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getConversationsIdMessagesId
public type GetConversationsIdMessagesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Use this template to generate the HTML content for the campaign
public type TemplateContent1 record {
    # The id of the template to use
    int id;
    # Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template
    record {} sections?;
};

public type CollectionOfTagsTags record {
    # The date and time the tag was added to the list member in ISO 8601 format
    @jsondata:Name {value: "date_added"}
    string dateAdded?;
    # The name of the tag
    string name?;
    # The unique id for the tag
    int id?;
};

# The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions
public type Conditions record {
    # Match type
    "any"|"all" 'match?;
    # Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)
    record {}[] conditions?;
};

# Represents the Queries record for the operation: getCampaigns
public type GetCampaignsQueries record {
    # Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_send_time"}
    string beforeSendTime?;
    # Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address
    @http:Query {name: "member_id"}
    string memberId?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_send_time"}
    string sinceSendTime?;
    # Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_create_time"}
    string beforeCreateTime?;
    # The unique id for the list
    @http:Query {name: "list_id"}
    string listId?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_create_time"}
    string sinceCreateTime?;
    # Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered
    @http:Query {name: "include_resend_shortcut_eligibility"}
    boolean includeResendShortcutEligibility?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The campaign type
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type?;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "create_time"|"send_time" sortField?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # The unique folder id
    @http:Query {name: "folder_id"}
    string folderId?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
    # The status of the campaign
    "save"|"paused"|"schedule"|"sending"|"sent" status?;
};

# Information about an Ecommerce Store's specific Promo Rule
public type ECommercePromoRule record {
    # The date and time when the promotion is in effect in ISO 8601 format
    @jsondata:Name {value: "starts_at"}
    string startsAt?;
    # The amount of the promo code discount. If 'type' is 'fixed', the amount is treated as a monetary value. If 'type' is 'percentage', amount must be a decimal value between 0.0 and 1.0, inclusive
    float amount;
    # The description of a promotion restricted to UTF-8 characters with max length 255
    string description;
    # A unique identifier for the promo rule. If Ecommerce platform does not support promo rule, use promo code id as promo rule id. Restricted to UTF-8 characters with max length 50
    string id;
    # The date and time when the promotion ends. Must be after starts_at and in ISO 8601 format
    @jsondata:Name {value: "ends_at"}
    string endsAt?;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The title that will show up in promotion campaign. Restricted to UTF-8 characters with max length of 100 bytes
    string title?;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # Whether the promo rule is currently enabled
    boolean enabled?;
    # The target that the discount applies to
    "per_item"|"total"|"shipping" target;
};

public type InlineResponse20011AllOf1 record {
    # If this outreach targets a segment of your audience
    @jsondata:Name {value: "has_segment"}
    boolean hasSegment?;
    # The URL of the thumbnail for this outreach
    string thumbnail?;
    # The date and time the outreach was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The date and time the outreach was canceled in ISO 8601 format
    @jsondata:Name {value: "canceled_at"}
    string canceledAt?;
    # The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The type of outreach this object is
    "regular"|"email-touchpoint"|"plaintext"|"rss"|"reconfirm"|"variate"|"absplit"|"automation"|"facebook"|"google"|"autoresponder"|"transactional"|"page"|"website"|"social_post"|"survey"|"customer_journey"|"sms" 'type?;
    # Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context
    @jsondata:Name {value: "show_report"}
    boolean showReport?;
    # The date and time the outreach was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The date and time the outreach was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # High level audience information for who the outreach targets
    Recipients recipients?;
    # The date and time the outreach was (or will be) published in ISO 8601 format
    @jsondata:Name {value: "published_time"}
    string publishedTime?;
    # Title or name of an Outreach
    string name?;
    # Unique ID of an Outreach
    string id?;
    # The status of this outreach
    "save"|"paused"|"schedule"|"scheduled"|"sending"|"sent"|"canceled"|"canceling"|"active"|"disconnected"|"somepaused"|"draft"|"completed"|"partialRejected"|"pending"|"rejected"|"published"|"unpublished" status?;
    @jsondata:Name {value: "report_summary"}
    ReportSummary reportSummary?;
};

# Represents the Queries record for the operation: getConnectedSites
public type GetConnectedSitesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdOrders
public type GetEcommerceStoresIdOrdersQueries record {
    # Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad
    @http:Query {name: "has_outreach"}
    boolean hasOutreach?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict results to orders with a specific `outreach_id` value
    @http:Query {name: "outreach_id"}
    string outreachId?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to orders made by a specific customer
    @http:Query {name: "customer_id"}
    string customerId?;
    # Restrict results to orders with a specific `campaign_id` value
    @http:Query {name: "campaign_id"}
    string campaignId?;
};

# An object describing the bounce summary for the campaign
public type Bounces record {
    # The total number of hard bounced email addresses
    @jsondata:Name {value: "hard_bounces"}
    int hardBounces?;
    # The total number of addresses that were syntax-related bounces
    @jsondata:Name {value: "syntax_errors"}
    int syntaxErrors?;
    # The total number of soft bounced email addresses
    @jsondata:Name {value: "soft_bounces"}
    int softBounces?;
};

public type LandingPageReportEcommerce record {
    # The average order revenue of this landing page
    @jsondata:Name {value: "average_order_revenue"}
    decimal averageOrderRevenue?;
    # The total revenue of this landing page
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    # The total number of orders associated with this landing page
    @jsondata:Name {value: "total_orders"}
    int totalOrders?;
    # The user's currency code
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# Information about a specific product image
public type ECommerceProductImage record {
    # The list of product variants using the image
    @jsondata:Name {value: "variant_ids"}
    string[] variantIds?;
    # A unique identifier for the product image
    string id;
    # The URL for a product image
    string url;
};

# Represents the Queries record for the operation: getActivityFeedChimpChatter
public type GetActivityFeedChimpChatterQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
};

public type LandingPageReportTimeseries record {
    @jsondata:Name {value: "daily_stats"}
    DailyClicksAndVisitsData dailyStats?;
    @jsondata:Name {value: "weekly_stats"}
    WeeklyClicksAndVisitsData weeklyStats?;
};

# Represents the Queries record for the operation: getReports
public type GetReportsQueries record {
    # Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_send_time"}
    string beforeSendTime?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_send_time"}
    string sinceSendTime?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The campaign type
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type?;
};

# Campaigns and Snippets found for given search term
public type Campaigns record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of matching campaigns and snippets
    CampaignsResults[] results?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The preview for the campaign, rendered by social networks like Facebook and Twitter. [Learn more](https://mailchimp.com/help/enable-and-customize-social-cards/)
public type CampaignSocialCard record {
    # The url for the header image for the card
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # A short summary of the campaign to display
    string description?;
    # The title for the card. Typically the subject line of the campaign
    string title?;
};

# The email client
public type EmailClient record {
    # The number of subscribed members who used this email client
    int members?;
    # The name of the email client
    string 'client?;
};

public type DailyClicksAndVisitsDataVisits record {
    string date?;
    int val?;
};

# An individual store in an account
public type ECommerceStore record {
    # Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # The store address
    Address address?;
    # The unique identifier for the list associated with the store. The `list_id` for a specific store cannot change
    @jsondata:Name {value: "list_id"}
    string listId;
    # The timezone for the store
    string timezone?;
    # The primary locale for the store. For example: `en`, `de`, etc
    @jsondata:Name {value: "primary_locale"}
    string primaryLocale?;
    # The e-commerce platform of the store
    string platform?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode;
    # The currency format for the store. For example: `$`, `£`, etc
    @jsondata:Name {value: "money_format"}
    string moneyFormat?;
    # The email address for the store
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The store phone number
    string phone?;
    # The store domain. This parameter is required for Connected Sites and Google Ads
    string domain?;
    # The name of the store
    string name;
    # The unique identifier for the store
    string id;
};

# An individual folder listed in the File Manager
public type GalleryFolder record {
    # The name of the folder
    string name;
};

# A collection of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program
public type AbuseComplaints record {
    # The list id for the abuse report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing an abuse report resource
    @jsondata:Name {value: "abuse_reports"}
    AbuseComplaint2[] abuseReports?;
};

# Represents the Queries record for the operation: getListsIdInterestCategories
public type GetListsIdInterestCategoriesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results a type of interest group
    string 'type?;
};

# For email question types, how many are new, known, or unknown contacts
public type ContactCounts record {
    # The number of new contacts that responded to this survey
    int 'new?;
    # The number of known contacts that responded to this survey
    int known?;
    # The number of unknown contacts that responded to this survey
    int unknown?;
};

# Represents the Queries record for the operation: getListsIdActivity
public type GetListsIdActivityQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getListsIdGrowthHistoryId
public type GetListsIdGrowthHistoryIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getReportsIdAdvice
public type GetReportsIdAdviceQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Report summary of facebook ad
public type InlineResponse20013ReportSummary record {
    @jsondata:Name {value: "total_products_sold"}
    int totalProductsSold?;
    int comments?;
    int reach?;
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    @jsondata:Name {value: "cost_per_click"}
    InlineResponse20013ReportSummaryAverageOrderAmount costPerClick?;
    @jsondata:Name {value: "extended_at"}
    InlineResponse20013ReportSummaryExtendedAt extendedAt?;
    @jsondata:Name {value: "return_on_investment"}
    decimal returnOnInvestment?;
    decimal impressions?;
    @jsondata:Name {value: "total_orders"}
    int totalOrders?;
    @jsondata:Name {value: "first_time_buyers"}
    int firstTimeBuyers?;
    int shares?;
    @jsondata:Name {value: "average_order_amount"}
    InlineResponse20013ReportSummaryAverageOrderAmount averageOrderAmount?;
    @jsondata:Name {value: "average_daily_budget"}
    InlineResponse20013ReportSummaryAverageOrderAmount averageDailyBudget?;
    @jsondata:Name {value: "unique_clicks"}
    int uniqueClicks?;
    @jsondata:Name {value: "has_extended_ad_duration"}
    boolean hasExtendedAdDuration?;
    InlineResponse20013ReportSummaryEcommerce ecommerce?;
    int clicks?;
    int likes?;
};

# Represents the Queries record for the operation: getListsIdMembersIdNotes
public type GetListsIdMembersIdNotesQueries record {
    # Returns notes sorted by the specified field
    @http:Query {name: "sort_field"}
    "created_at"|"updated_at"|"note_id" sortField?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdOrdersId
public type GetEcommerceStoresIdOrdersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account
public type InlineResponse200 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of Chimp Chatter messages. There's a maximum of 200 messages present for an account
    @jsondata:Name {value: "chimp_chatter"}
    ChimpChatter[] chimpChatter?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Ecommerce stats for the list member if the list is attached to a store
public type EcommerceStats record {
    # The total revenue the list member has brought in
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    # The total number of orders placed by the list member
    @jsondata:Name {value: "number_of_orders"}
    decimal numberOfOrders?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# An account export
public type InlineResponse2001Exports record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The size of the uncompressed export in bytes
    @jsondata:Name {value: "size_in_bytes"}
    int sizeInBytes?;
    # If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes
    @jsondata:Name {value: "download_url"}
    string downloadUrl?;
    # Start time for the export
    string started?;
    # If finished, the finish time for the export
    string finished?;
    # The ID for the export
    @jsondata:Name {value: "export_id"}
    int exportId?;
};

# Represents the Queries record for the operation: getListsIdGrowthHistory
public type GetListsIdGrowthHistoryQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "month" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# [Default values for campaigns](https://mailchimp.com/help/edit-your-emails-subject-preview-text-from-name-or-from-email-address/) created for this list
public type CampaignDefaults1 record {
    # The default from email for campaigns sent to this list
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # The default subject line for campaigns sent to this list
    string subject?;
    # The default language for this lists's forms
    string language?;
    # The default from name for campaigns sent to this list
    @jsondata:Name {value: "from_name"}
    string fromName?;
};

public type InlineResponse20011InlineResponse20011AllOf12 record {
    @jsondata:Name {value: "email_source_name"}
    string emailSourceName?;
    # The date and time the ad was paused in ISO 8601 format
    @jsondata:Name {value: "paused_at"}
    string pausedAt?;
    # The date and time the ad was ended in ISO 8601 format
    @jsondata:Name {value: "end_time"}
    string endTime?;
    # If the ad has a problem and needs attention
    @jsondata:Name {value: "needs_attention"}
    boolean needsAttention?;
    @jsondata:Name {value: "was_canceled_by_facebook"}
    boolean wasCanceledByFacebook?;
};

# A summary of an individual campaign's settings and content
public type Campaign1 record {
    # Determines if the campaign qualifies to be resent to non-openers
    boolean resendable?;
    @jsondata:Name {value: "ab_split_opts"}
    ABTestingOptions abSplitOpts?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    @jsondata:Name {value: "resend_shortcut_usage"}
    ResendShortcutUsage resendShortcutUsage?;
    # There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type?;
    # The tracking options for a campaign
    CampaignTrackingOptions tracking?;
    # If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children
    @jsondata:Name {value: "parent_campaign_id"}
    string parentCampaignId?;
    # How the campaign's content is put together
    @jsondata:Name {value: "content_type"}
    "template"|"html"|"url"|"multichannel" contentType?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # A string that uniquely identifies this campaign
    string id?;
    # The original link to the campaign's archive version
    @jsondata:Name {value: "long_archive_url"}
    string longArchiveUrl?;
    # The link to the campaign's archive version in ISO 8601 format
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # The settings for your campaign, including subject, from name, reply-to address, and more
    CampaignSettings5 settings?;
    @jsondata:Name {value: "variate_settings"}
    ABTestOptions2 variateSettings?;
    # The date and time the campaign was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false
    @jsondata:Name {value: "needs_block_refresh"}
    boolean needsBlockRefresh?;
    # The date and time a campaign was sent
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    @jsondata:Name {value: "rss_opts"}
    RSSOptions3 rssOpts?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List8 recipients?;
    @jsondata:Name {value: "delivery_status"}
    CampaignDeliveryStatus deliveryStatus?;
    # The current status of the campaign
    "save"|"paused"|"schedule"|"sending"|"sent"|"canceled"|"canceling"|"archived" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary2 reportSummary?;
    @jsondata:Name {value: "resend_shortcut_eligibility"}
    ResendShortcutEligibility resendShortcutEligibility?;
};

# The customer's address
public type Address2 record {
    # The customer's country
    string country?;
    # The two-letter code for the customer's country
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The customer's state name or normalized province
    string province?;
    # An additional field for the customer's mailing address
    string address2?;
    # The city the customer is located in
    string city?;
    # The mailing address of the customer
    string address1?;
    # The two-letter code for the customer's province or state
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The customer's postal or zip code
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
};

# A single survey response
public type SurveyResponse record {
    # The date and time when the survey response was submitted in ISO 8601 format
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # The ID for the survey response
    @jsondata:Name {value: "response_id"}
    string responseId?;
    # Information about the contact
    Contact contact?;
    # If this contact was added to the Mailchimp audience via this survey
    @jsondata:Name {value: "is_new_contact"}
    boolean isNewContact?;
    # The survey questions and the answers to those questions
    Response[] results?;
};

public type InlineResponse20013AudienceActivity record {
    InlineResponse20013AudienceActivityRevenue[] revenue?;
    InlineResponse20013AudienceActivityClicks[] clicks?;
    InlineResponse20013AudienceActivityImpressions[] impressions?;
};

# A summary of an individual campaign's settings and content
public type Campaign3 record {
    # The link to the campaign's archive version
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # Determines if the campaign qualifies to be resent to non-openers
    boolean resendable?;
    # The settings for your campaign, including subject, from name, reply-to address, and more
    CampaignSettings4 settings?;
    @jsondata:Name {value: "variate_settings"}
    ABTestOptions1 variateSettings?;
    @jsondata:Name {value: "ab_split_opts"}
    ABTestingOptions abSplitOpts?;
    # The date and time the campaign was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type;
    # The tracking options for a campaign
    CampaignTrackingOptions tracking?;
    # Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false
    @jsondata:Name {value: "needs_block_refresh"}
    boolean needsBlockRefresh?;
    # The date and time a campaign was sent in ISO 8601 format
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    @jsondata:Name {value: "rss_opts"}
    RSSOptions2 rssOpts?;
    # If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children
    @jsondata:Name {value: "parent_campaign_id"}
    string parentCampaignId?;
    # How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url')
    @jsondata:Name {value: "content_type"}
    string contentType?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List7 recipients?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # A string that uniquely identifies this campaign
    string id?;
    @jsondata:Name {value: "delivery_status"}
    CampaignDeliveryStatus deliveryStatus?;
    # The original link to the campaign's archive version
    @jsondata:Name {value: "long_archive_url"}
    string longArchiveUrl?;
    # The current status of the campaign
    "save"|"paused"|"schedule"|"sending"|"sent"|"canceled"|"canceling"|"archived" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary1 reportSummary?;
};

# A summary of an individual campaign's settings and content
public type Campaign2 record {
    # The settings for your campaign, including subject, from name, reply-to address, and more
    CampaignSettings2 settings;
    @jsondata:Name {value: "variate_settings"}
    ABTestOptions variateSettings?;
    @jsondata:Name {value: "rss_opts"}
    RSSOptions1 rssOpts?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List2 recipients?;
    # The tracking options for a campaign
    CampaignTrackingOptions tracking?;
};

# The customer's address
public type Address1 record {
    # The customer's country
    string country?;
    # The two-letter code for the customer's country
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The customer's state name or normalized province
    string province?;
    # An additional field for the customer's mailing address
    string address2?;
    # The city the customer is located in
    string city?;
    # The mailing address of the customer
    string address1?;
    # The two-letter code for the customer's province or state
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The customer's postal or zip code
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
};

# A summary of an individual campaign's settings and content
public type Campaign4 record {
    # Determines if the campaign qualifies to be resent to non-openers
    boolean resendable?;
    @jsondata:Name {value: "ab_split_opts"}
    ABTestingOptions abSplitOpts?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    @jsondata:Name {value: "resend_shortcut_usage"}
    ResendShortcutUsage resendShortcutUsage?;
    # There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type?;
    # The tracking options for a campaign
    CampaignTrackingOptions tracking?;
    # If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children
    @jsondata:Name {value: "parent_campaign_id"}
    string parentCampaignId?;
    # How the campaign's content is put together
    @jsondata:Name {value: "content_type"}
    "template"|"html"|"url"|"multichannel" contentType?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # A string that uniquely identifies this campaign
    string id?;
    # The original link to the campaign's archive version
    @jsondata:Name {value: "long_archive_url"}
    string longArchiveUrl?;
    # The link to the campaign's archive version in ISO 8601 format
    @jsondata:Name {value: "archive_url"}
    string archiveUrl?;
    # The settings for your campaign, including subject, from name, reply-to address, and more
    CampaignSettings5 settings?;
    @jsondata:Name {value: "variate_settings"}
    ABTestOptions2 variateSettings?;
    # The date and time the campaign was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false
    @jsondata:Name {value: "needs_block_refresh"}
    boolean needsBlockRefresh?;
    # The date and time a campaign was sent
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    @jsondata:Name {value: "rss_opts"}
    RSSOptions3 rssOpts?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List8 recipients?;
    @jsondata:Name {value: "delivery_status"}
    CampaignDeliveryStatus deliveryStatus?;
    # The current status of the campaign
    "save"|"paused"|"schedule"|"sending"|"sent"|"canceled"|"canceling"|"archived" status?;
    @jsondata:Name {value: "report_summary"}
    CampaignReportSummary2 reportSummary?;
    @jsondata:Name {value: "resend_shortcut_eligibility"}
    ResendShortcutEligibility resendShortcutEligibility?;
};

# Batch update list members
public type BatchUpdateListMembers record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a new member that was added to the list
    @jsondata:Name {value: "new_members"}
    ListMembers5[] newMembers?;
    # An array of objects, each representing an existing list member whose subscription status was updated
    @jsondata:Name {value: "updated_members"}
    ListMembers5[] updatedMembers?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "total_created"}
    int totalCreated?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "error_count"}
    int errorCount?;
    # An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details
    BatchUpdateListMembersErrors[] errors?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "total_updated"}
    int totalUpdated?;
};

# Add or remove tags on a member by declaring a tag either active or inactive on a member
public type MemberTag record {
    # The name of the tag
    string name;
    # The status for the tag on the member, pass in active to add a tag or inactive to remove it
    "inactive"|"active" status;
};

# Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program
public type AbuseComplaint2 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Date for the abuse report
    string date?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id for the abuse report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The id for the abuse report
    int id?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id for the abuse report
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Choose whether the campaign should use [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). Cannot be set to `true` for campaigns using [Timewarp](https://mailchimp.com/help/use-timewarp/)
public type BatchDelivery record {
    # The delay, in minutes, between batches
    @jsondata:Name {value: "batch_delay"}
    int batchDelay;
    # The number of batches for the campaign send
    @jsondata:Name {value: "batch_count"}
    int batchCount;
};

# Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program
public type AbuseComplaint1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Date for the abuse report
    string date?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id of the list for the abuse report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The id for the abuse report
    int id?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id for the abuse report
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program
public type AbuseComplaint3 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Date for the abuse report
    string date?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id of the list for the abuse report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The id for the abuse report
    int id?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id for the abuse report
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# The shipping address for the order
public type ShippingAddress record {
    # The country in the shipping address
    string country?;
    # An additional field for the shipping address
    string address2?;
    # The city in the order's shipping address
    string city?;
    # The shipping address for the order
    string address1?;
    # The latitude for the shipping address location
    decimal latitude?;
    # The two-letter code for the province or state in the shipping address
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the shipping address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the order's shipping address
    string province?;
    # The phone number for the order's shipping address
    string phone?;
    # The name associated with an order's shipping address
    string name?;
    # The company associated with the shipping address
    string company?;
    # The postal or zip code in the shipping address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the shipping address location
    decimal longitude?;
};

# A summary of a specific list's growth activity for a specific month and year
public type GrowthHistory2 record {
    # (deprecated)
    int imports?;
    # The list id for the growth activity report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Pending members on the list for a specific month
    int pending?;
    # Newly reconfirmed members on the list for a specific month
    int reconfirm?;
    # (deprecated)
    int existing?;
    # (deprecated)
    int optins?;
    # Total subscribed members on the list at the end of the month
    int subscribed?;
    # Newly unsubscribed members on the list for a specific month
    int unsubscribed?;
    # Newly deleted members on the list for a specific month
    int deleted?;
    # The month that the growth history is describing
    string month?;
    # Newly cleaned (hard-bounced) members on the list for a specific month
    int cleaned?;
    # Subscribers that have been sent transactional emails via Mandrill
    int 'transactional?;
};

# Stats for Campaign A
public type CampaignA record {
    # Forwards for Campaign A
    int forwards?;
    # Unsubscribes for Campaign A
    int unsubs?;
    # Opens for Campaign A
    int opens?;
    # Bounces for Campaign A
    int bounces?;
    # Recipient Clicks for Campaign A
    @jsondata:Name {value: "recipient_clicks"}
    int recipientClicks?;
    # Opens from forwards for Campaign A
    @jsondata:Name {value: "forwards_opens"}
    int forwardsOpens?;
    # The last open for Campaign A
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # Abuse reports for Campaign A
    @jsondata:Name {value: "abuse_reports"}
    int abuseReports?;
    # Unique opens for Campaign A
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
};

# A summary of a specific list's growth activity for a specific month and year
public type GrowthHistory1 record {
    # (deprecated)
    int imports?;
    # The list id for the growth activity report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Pending members on the list for a specific month
    int pending?;
    # Newly reconfirmed members on the list for a specific month
    int reconfirm?;
    # (deprecated)
    int existing?;
    # (deprecated)
    int optins?;
    # Total subscribed members on the list at the end of the month
    int subscribed?;
    # Newly unsubscribed members on the list for a specific month
    int unsubscribed?;
    # Newly deleted members on the list for a specific month
    int deleted?;
    # The month that the growth history is describing
    string month?;
    # Newly cleaned (hard-bounced) members on the list for a specific month
    int cleaned?;
    # Subscribers that have been sent transactional emails via Mandrill
    int 'transactional?;
};

# Represents the Queries record for the operation: getListsIdInterestCategoriesIdInterests
public type GetListsIdInterestCategoriesIdInterestsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Stats for Campaign B
public type CampaignB record {
    # Forwards for Campaign B
    int forwards?;
    # Unsubscribes for Campaign B
    int unsubs?;
    # Opens for Campaign B
    int opens?;
    # Bounces for Campaign B
    int bounces?;
    # Recipients clicks for Campaign B
    @jsondata:Name {value: "recipient_clicks"}
    int recipientClicks?;
    # Opens for forwards from Campaign B
    @jsondata:Name {value: "forwards_opens"}
    int forwardsOpens?;
    # The last open for Campaign B
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # Abuse reports for Campaign B
    @jsondata:Name {value: "abuse_reports"}
    int abuseReports?;
    # Unique opens for Campaign B
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
};

# abandonedBrowse automation details. abandonedBrowse is also known as Product Retargeting Email or Retarget Site Visitors on the web
public type AbandonedBrowseAutomation record {
    # Whether this store supports the abandonedBrowse automation
    @jsondata:Name {value: "is_supported"}
    boolean isSupported?;
    # Unique ID of automation parent campaign
    string id?;
    # Status of the abandonedBrowse automation
    "save"|"sending"|"paused" status?;
};

# Represents the Queries record for the operation: getTemplates
public type GetTemplatesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_date_created"}
    string beforeDateCreated?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Limit results based on template type
    string 'type?;
    # The Mailchimp account user who created the template
    @http:Query {name: "created_by"}
    string createdBy?;
    # Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_date_created"}
    string sinceDateCreated?;
    # Returns user templates sorted by the specified field
    @http:Query {name: "sort_field"}
    "date_created"|"date_edited"|"name" sortField?;
    # Limit results based on how the template's content is put together. Only templates of type `user` can be filtered by `content_type`. If you want to retrieve saved templates created with the legacy email editor, then filter `content_type` to `template`. If you'd rather pull your saved templates for the new editor, filter to `multichannel`. For code your own templates, filter to `html`
    @http:Query {name: "content_type"}
    "html"|"template"|"multichannel" contentType?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # Limit results based on category
    string category?;
    # The unique folder id
    @http:Query {name: "folder_id"}
    string folderId?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# A summary of batch requests that have been made
public type BatchOperations record {
    # An array of objects representing batch calls
    Batch1[] batches?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type SurveyQuestionReportOptions record {
    # The count of responses that selected this survey question option
    int count?;
    # The label for this survey question option
    string label?;
    # The ID for this survey question option
    string id?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProductsIdVariantsId
public type GetEcommerceStoresIdProductsIdVariantsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Collection of Element style for List Signup Forms
public type CollectionOfElementStyleForListSignupForms record {
    # A collection of options for a selector
    AnOptionForSignupFormStyles[] options?;
    # A string that identifies the element selector
    "page_background"|"page_header"|"page_outer_wrapper"|"body_background"|"body_link_style"|"forms_buttons"|"forms_buttons_hovered"|"forms_field_label"|"forms_field_text"|"forms_required"|"forms_required_legend"|"forms_help_text"|"forms_errors"|"monkey_rewards_badge" selector?;
};

# Information about a specific order line
public type ECommerceOrderLineItem record {
    # Information about a specific product
    ECommerceProduct product?;
    # The quantity of an order line item
    int quantity;
    # The price of an order line item
    decimal price;
    # A unique identifier for the product associated with the order line item
    @jsondata:Name {value: "product_id"}
    string productId;
    # The total discount amount applied to this line item
    decimal discount?;
    # A unique identifier for the order line item
    string id;
    # A unique identifier for the product variant associated with the order line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId;
};

# Represents the Queries record for the operation: getListsIdMembersIdNotesId
public type GetListsIdMembersIdNotesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getFacebookAdsId
public type GetFacebookAdsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Top open locations for a specific campaign
public type OpenLocations record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a top location for opens
    OpenLocationsLocations[] locations?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Represents the Queries record for the operation: getReportingSurveysIdQuestionsIdAnswers
public type GetReportingSurveysIdQuestionsIdAnswersQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Filter survey responses by familiarity of the respondents
    @http:Query {name: "respondent_familiarity_is"}
    "new"|"known"|"unknown" respondentFamiliarityIs?;
};

# A workflow's runtime settings for an Automation
public type AutomationWorkflowRuntimeSettings record {
    # The hours an Automation workflow can send
    Hours hours?;
    # The days an Automation workflow can send
    ("sunday"|"monday"|"tuesday"|"wednesday"|"thursday"|"friday"|"saturday")[] days?;
};

# Information about a specific order
public type ECommerceOrder record {
    # The total amount of the discounts to be applied to the price of the order
    @jsondata:Name {value: "discount_total"}
    decimal discountTotal?;
    # The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "fulfillment_status"}
    string fulfillmentStatus?;
    # The tax total for the order
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The shipping total for the order
    @jsondata:Name {value: "shipping_total"}
    decimal shippingTotal?;
    # The outreach associated with this order. For example, an email campaign or Facebook ad
    Outreach outreach?;
    # The date and time the order was processed in ISO 8601 format
    @jsondata:Name {value: "processed_at_foreign"}
    string processedAtForeign?;
    @jsondata:Name {value: "billing_address"}
    BillingAddress billingAddress?;
    # The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs
    @jsondata:Name {value: "tracking_code"}
    "prec" trackingCode?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode;
    # The URL for the page where the buyer landed when entering the shop
    @jsondata:Name {value: "landing_site"}
    string landingSite?;
    # The URL for the order
    @jsondata:Name {value: "order_url"}
    string orderUrl?;
    # The tracking carrier associated with the order
    @jsondata:Name {value: "tracking_carrier"}
    string trackingCarrier?;
    # The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "financial_status"}
    string financialStatus?;
    # The tracking number associated with the order
    @jsondata:Name {value: "tracking_number"}
    string trackingNumber?;
    # The total for the order
    @jsondata:Name {value: "order_total"}
    decimal orderTotal;
    # A unique identifier for the order
    string id;
    @jsondata:Name {value: "shipping_address"}
    ShippingAddress shippingAddress?;
    # The date and time the order was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # An array of the order's line items
    ECommerceOrderLineItem[] lines;
    # The promo codes applied on the order
    EcommercestoresstoreIdordersPromos[] promos?;
    # The tracking URL associated with the order
    @jsondata:Name {value: "tracking_url"}
    string trackingUrl?;
    # A string that uniquely identifies the campaign for an order
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body
    ECommerceCustomer customer;
    # The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created
    @jsondata:Name {value: "cancelled_at_foreign"}
    string cancelledAtForeign?;
};

# Represents the Queries record for the operation: getReportingSurveysId
public type GetReportingSurveysIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:CredentialsConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# A folder used to organize templates
public type TemplateFolder1 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The number of templates in the folder
    int count?;
    # A string that uniquely identifies this template folder
    string id?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type AddListMembers1 record {
    # The marketing permissions for the subscriber
    @jsondata:Name {value: "marketing_permissions"}
    MarketingPermission[] marketingPermissions?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # The tags that are associated with a member
    string[] tags?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location location?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status;
};

# Information about a specific customer
public type ECommerceCustomer6 record {
    # The total amount the customer has spent
    @jsondata:Name {value: "total_spent"}
    decimal totalSpent?;
    # The customer's address
    Address1 address?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The date and time the customer was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The customer's total order count
    @jsondata:Name {value: "orders_count"}
    int ordersCount?;
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # The date and time the customer was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus?;
    # The customer's company
    string company?;
    # A unique identifier for the customer
    string id?;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# A folder used to organize templates
public type TemplateFolder2 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The number of templates in the folder
    int count?;
    # A string that uniquely identifies this template folder
    string id?;
};

public type InlineResponse20011Content record {
    InlineResponse20011ContentAttachments[] attachments?;
    @jsondata:Name {value: "call_to_action"}
    string callToAction?;
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    @jsondata:Name {value: "link_url"}
    string linkUrl?;
    string description?;
    string title?;
    string message?;
};

public type InlineResponse20011AudienceTargetingSpecsInterests record {
    string name?;
};

# Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body
public type ECommerceCustomer1 record {
    # The customer's address
    Address1 address?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus?;
    # The customer's company
    string company?;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Represents the Queries record for the operation: getReportsIdEcommerceProductActivity
public type GetReportsIdEcommerceProductActivityQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "title"|"total_revenue"|"total_purchased" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific customer
public type ECommerceCustomer3 record {
    # The total amount the customer has spent
    @jsondata:Name {value: "total_spent"}
    decimal totalSpent?;
    # The customer's address
    Address1 address?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The date and time the customer was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The customer's total order count
    @jsondata:Name {value: "orders_count"}
    int ordersCount?;
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # The date and time the customer was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus?;
    # The customer's company
    string company?;
    # A unique identifier for the customer
    string id?;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Represents the Queries record for the operation: getReportsIdClickDetails
public type GetReportsIdClickDetailsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns click reports sorted by the specified field
    @http:Query {name: "sort_field"}
    "total_clicks"|"unique_clicks" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# A list of a member's opens activity in a specific campaign
public type OpenActivity1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The total number of times the this campaign was opened by the list member
    @jsondata:Name {value: "opens_count"}
    int opensCount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # An array of timestamps for each time a list member opened the campaign. If a list member opens an email multiple times, this will return a separate timestamp for each open event
    MemberActivity2[] opens?;
    # The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation
    @jsondata:Name {value: "contact_status"}
    string contactStatus?;
    # The total number of times the this campaign was opened by the list member excluding opens from email clients that use proxies 
    @jsondata:Name {value: "proxy_excluded_opens_count"}
    int proxyExcludedOpensCount?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Information about a specific customer
public type ECommerceCustomer2 record {
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The customer's address
    Address1 address?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus;
    # The customer's company
    string company?;
    # A unique identifier for the customer. Limited to 50 characters
    @constraint:String {maxLength: 50}
    string id;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdOrdersIdLinesId
public type GetEcommerceStoresIdOrdersIdLinesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A folder used to organize campaigns
public type CampaignFolder record {
    # Name to associate with the folder
    string name;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type AddListMembers2 record {
    # The marketing permissions for the subscriber
    @jsondata:Name {value: "marketing_permissions"}
    MarketingPermission[] marketingPermissions?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Email address for a subscriber. This value is required only if the email address is not already present on the list
    @jsondata:Name {value: "email_address"}
    string emailAddress;
    # Subscriber's status. This value is required only if the email address is not already present on the list
    @jsondata:Name {value: "status_if_new"}
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" statusIfNew;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location location?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status?;
};

# Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body
public type ECommerceCustomer5 record {
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The customer's address
    Address2 address?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus?;
    # The customer's company
    string company?;
    # A unique identifier for the customer. Limited to 50 characters
    @constraint:String {maxLength: 50}
    string id;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type AddListMembers3 record {
    # The marketing permissions for the subscriber
    @jsondata:Name {value: "marketing_permissions"}
    MarketingPermission[] marketingPermissions?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location location?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending" status?;
};

# Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body
public type ECommerceCustomer4 record {
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The customer's address
    Address1 address?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus;
    # The customer's company
    string company?;
    # A unique identifier for the customer. Limited to 50 characters
    @constraint:String {maxLength: 50}
    string id;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Information about a specific product image
public type ECommerceProductImage1 record {
    # The list of product variants using the image
    @jsondata:Name {value: "variant_ids"}
    string[] variantIds?;
    # A unique identifier for the product image
    string id?;
    # The URL for a product image
    string url?;
};

# Information about a specific product image
public type ECommerceProductImage3 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The list of product variants using the image
    @jsondata:Name {value: "variant_ids"}
    string[] variantIds?;
    # A unique identifier for the product image
    string id?;
    # The URL for a product image
    string url?;
};

# Information about a specific product image
public type ECommerceProductImage2 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The list of product variants using the image
    @jsondata:Name {value: "variant_ids"}
    string[] variantIds?;
    # A unique identifier for the product image
    string id?;
    # The URL for a product image
    string url?;
};

# Represents the Queries record for the operation: getReportsIdAbuseReportsId
public type GetReportsIdAbuseReportsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getReportsId
public type GetReportsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A collection of orders in an account
public type Orders record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing an order resource
    ECommerceOrder4[] orders?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# List signup form
public type SignupForm record {
    # The signup form body content
    CollectionOfContentForListSignupForms[] contents?;
    # Options for customizing your signup form header
    SignupFormHeaderOptions header?;
    # An array of objects, each representing an element style for the signup form
    CollectionOfElementStyleForListSignupForms[] styles?;
};

# Represents the Queries record for the operation: getReportingSurveysIdQuestions
public type GetReportingSurveysIdQuestionsQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of all folders in the File Manager
public type FileManagerFolders record {
    # A list of all folders in the File Manager
    GalleryFolder2[] folders?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getAutomationsId
public type GetAutomationsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Extra options for some merge field types
public type MergeFieldOptions record {
    # In a text field, the default length of the text field
    int size?;
    # In a date or birthday field, the format of the date
    @jsondata:Name {value: "date_format"}
    string dateFormat?;
    # In a radio or dropdown non-group field, the available options for contacts to pick from
    string[] choices?;
    # In an address field, the default country code if none supplied
    @jsondata:Name {value: "default_country"}
    int defaultCountry?;
    # In a phone field, the phone number type: US or International
    @jsondata:Name {value: "phone_format"}
    string phoneFormat?;
};

# A facebook ad
public type FacebookAdsFacebookAdsFacebookAdsAllOf123 record {
    # Check if this ad is connected to a facebook page
    @jsondata:Name {value: "is_connected"}
    boolean isConnected?;
    # Check if this ad is connected to a facebook page
    InlineResponse20011Feedback feedback?;
    # Connected Site
    InlineResponse20011Site site?;
    # Audience settings
    InlineResponse20011Audience audience?;
    # Check if this ad has audience setup
    @jsondata:Name {value: "has_audience"}
    boolean hasAudience?;
    # Check if this ad has content
    @jsondata:Name {value: "has_content"}
    boolean hasContent?;
    # Channel settings
    InlineResponse20011Channel channel?;
    InlineResponse20011Content content?;
    InlineResponse20011Budget budget?;
};

public type DailyClicksAndVisitsDataUniqueVisits record {
    string date?;
    int val?;
};

# Represents the Queries record for the operation: getReportsIdAbuseReportsIdId
public type GetReportsIdAbuseReportsIdIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getBatchesId
public type GetBatchesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The settings specific to A/B test campaigns
public type ABTestOptions record {
    # The possible send times to test. The times provided should be in the format YYYY-MM-DD HH:MM:SS. If send_times are provided to test, the test_size will be set to 100% and winner_criteria will be ignored
    @jsondata:Name {value: "send_times"}
    string[] sendTimes?;
    # The number of minutes to wait before choosing the winning campaign. The value of wait_time must be greater than 0 and in whole hours, specified in minutes
    @jsondata:Name {value: "wait_time"}
    int waitTime?;
    # The possible subject lines to test. If no subject lines are provided, settings.subject_line will be used
    @jsondata:Name {value: "subject_lines"}
    string[] subjectLines?;
    # The percentage of recipients to send the test combinations to, must be a value between 10 and 100
    @jsondata:Name {value: "test_size"}
    int testSize?;
    # The possible reply-to addresses. The number of reply_to_addresses provided must match the number of from_names. If no reply_to_addresses are provided, settings.reply_to will be used
    @jsondata:Name {value: "reply_to_addresses"}
    string[] replyToAddresses?;
    # The combination that performs the best. This may be determined automatically by click rate, open rate, or total revenue -- or you may choose manually based on the reporting data you find the most valuable. For Multivariate Campaigns testing send_time, winner_criteria is ignored. For Multivariate Campaigns with 'manual' as the winner_criteria, the winner must be chosen in the Mailchimp web application
    @jsondata:Name {value: "winner_criteria"}
    "opens"|"clicks"|"manual"|"total_revenue" winnerCriteria;
    # The possible from names. The number of from_names provided must match the number of reply_to_addresses. If no from_names are provided, settings.from_name will be used
    @jsondata:Name {value: "from_names"}
    string[] fromNames?;
};

# The outreach associated with this order. For example, an email campaign or Facebook ad
public type Outreach1 record {
    # The date and time the Outreach was published in ISO 8601 format
    @jsondata:Name {value: "published_time"}
    string publishedTime?;
    # The name for the outreach
    string name?;
    # A unique identifier for the outreach. Can be an email campaign ID
    string id?;
    # The type of the outreach
    string 'type?;
};

public type SegmentIdMembersBody record {
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress;
};

# Up to the previous 180 days of daily detailed aggregated activity stats for a specific list. Does not include AutoResponder or Automation activity
public type ListActivity record {
    # Recent list activity
    DailyListActivity[] activity?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getReportsIdUnsubscribed
public type GetReportsIdUnsubscribedQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Stats for Group A
public type GroupA record {
    # The percentage of total clicks for Group A
    @jsondata:Name {value: "click_percentage_a"}
    decimal clickPercentageA?;
    # The number of unique clicks for Group A
    @jsondata:Name {value: "unique_clicks_a"}
    int uniqueClicksA?;
    # The total number of clicks for Group A
    @jsondata:Name {value: "total_clicks_a"}
    int totalClicksA?;
    # The percentage of unique clicks for Group A
    @jsondata:Name {value: "unique_click_percentage_a"}
    decimal uniqueClickPercentageA?;
};

# Stats for Group B
public type GroupB record {
    # The percentage of total clicks for Group B
    @jsondata:Name {value: "click_percentage_b"}
    decimal clickPercentageB?;
    # The number of unique clicks for Group B
    @jsondata:Name {value: "unique_clicks_b"}
    int uniqueClicksB?;
    # The total number of clicks for Group B
    @jsondata:Name {value: "total_clicks_b"}
    int totalClicksB?;
    # The percentage of unique clicks for Group B
    @jsondata:Name {value: "unique_click_percentage_b"}
    decimal uniqueClickPercentageB?;
};

# [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
public type ListContact2 record {
    # The postal or zip code for the list contact
    string zip?;
    # A two-character ISO3166 country code. Defaults to US if invalid
    string country?;
    # The street address for the list contact
    string address2?;
    # The city for the list contact
    string city?;
    # The phone number for the list contact
    string phone?;
    # The street address for the list contact
    string address1?;
    # The company name for the list
    string company?;
    # The state for the list contact
    string state?;
};

# A list of template folders
public type TemplateFolders record {
    # An array of objects representing template folders
    TemplateFolder2[] folders?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: previewASegment
public type PreviewASegmentQueries record {
    # Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_created_at"}
    string beforeCreatedAt?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Include unsubscribed members in response
    @http:Query {name: "include_unsubscribed"}
    boolean includeUnsubscribed?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_updated_at"}
    string sinceUpdatedAt?;
    # Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_created_at"}
    string sinceCreatedAt?;
    # Include transactional members in response
    @http:Query {name: "include_transactional"}
    boolean includeTransactional?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Limit results based on segment type
    string 'type?;
    # Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_updated_at"}
    string beforeUpdatedAt?;
    # Include cleaned members in response
    @http:Query {name: "include_cleaned"}
    boolean includeCleaned?;
};

# The average campaign statistics for your industry
public type IndustryStats record {
    # The industry unopened rate
    @jsondata:Name {value: "unopen_rate"}
    decimal unopenRate?;
    # The industry click rate
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The industry bounce rate
    @jsondata:Name {value: "bounce_rate"}
    decimal bounceRate?;
    # The industry unsubscribe rate
    @jsondata:Name {value: "unsub_rate"}
    decimal unsubRate?;
    # The type of business industry associated with your account. For example: retail, education, etc
    string 'type?;
    # The industry abuse rate
    @jsondata:Name {value: "abuse_rate"}
    decimal abuseRate?;
    # The industry open rate
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# An object representing all segmentation options
public type SegmentOptions2 record {
    # Segment match type
    "any"|"all" 'match?;
    # The id for an existing saved segment
    @jsondata:Name {value: "saved_segment_id"}
    int savedSegmentId?;
    # Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)
    record {}[] conditions?;
};

# Information about a specific cart line item
public type ECommerceCartLineItem2 record {
    # The name of the product variant for the cart line item
    @jsondata:Name {value: "product_variant_title"}
    string productVariantTitle?;
    # The quantity of a cart line item
    int quantity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The price of a cart line item
    decimal price?;
    # A unique identifier for the product associated with the cart line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # A unique identifier for the cart line item
    string id?;
    # A unique identifier for the product variant associated with the cart line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
    # The name of the product for the cart line item
    @jsondata:Name {value: "product_title"}
    string productTitle?;
};

# An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options
public type SegmentOptions1 record {
    # The prebuilt segment id, if a prebuilt segment has been designated for this campaign
    @jsondata:Name {value: "prebuilt_segment_id"}
    string prebuiltSegmentId?;
    # Segment match type
    "any"|"all" 'match?;
    # The id for an existing saved segment
    @jsondata:Name {value: "saved_segment_id"}
    int savedSegmentId?;
    # Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)
    record {}[] conditions?;
};

# Information about a specific cart line item
public type ECommerceCartLineItem1 record {
    # The quantity of a cart line item
    int quantity?;
    # The price of a cart line item
    decimal price?;
    # A unique identifier for the product associated with the cart line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # A unique identifier for the product variant associated with the cart line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
};

# Information about a specific cart line item
public type ECommerceCartLineItem3 record {
    # The name of the product variant for the cart line item
    @jsondata:Name {value: "product_variant_title"}
    string productVariantTitle?;
    # The quantity of a cart line item
    int quantity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The price of a cart line item
    decimal price?;
    # A unique identifier for the product associated with the cart line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # A unique identifier for the cart line item
    string id?;
    # A unique identifier for the product variant associated with the cart line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
    # The name of the product for the cart line item
    @jsondata:Name {value: "product_title"}
    string productTitle?;
};

# Represents the Queries record for the operation: getCampaignFoldersId
public type GetCampaignFoldersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Webhook configured for the given list
public type ListWebhooks2 record {
    # The possible sources of any events that can trigger the webhook and whether they are enabled
    Sources1 sources?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An string that uniquely identifies this webhook
    string id?;
    # A valid URL for the Webhook
    string url?;
    # The events that can trigger the webhook and whether they are enabled
    Events2 events?;
};

# A specific event for a contact
public type Event record {
    # The date and time the event occurred in ISO 8601 format
    @jsondata:Name {value: "occurred_at"}
    string occurredAt?;
    # The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length
    string name?;
    # An optional list of properties
    record {|string...;|} properties?;
};

# The status of a batch request
public type Batch1 record {
    # The number of completed operations. This includes operations that returned an error
    @jsondata:Name {value: "finished_operations"}
    int finishedOperations?;
    # The date and time when all operations in the batch request completed in ISO 8601 format
    @jsondata:Name {value: "completed_at"}
    string completedAt?;
    # The date and time when the server received the batch request in ISO 8601 format
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation
    @jsondata:Name {value: "total_operations"}
    int totalOperations?;
    # The number of completed operations that returned an error
    @jsondata:Name {value: "errored_operations"}
    int erroredOperations?;
    # A string that uniquely identifies this batch request
    string id?;
    # The URL of the gzipped archive of the results of all the operations
    @jsondata:Name {value: "response_body_url"}
    string responseBodyUrl?;
    # The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status
    "pending"|"preprocessing"|"started"|"finalizing"|"finished" status?;
};

# A report of links clicked in a specific campaign
public type ClickDetailReport2 record {
    # The percentage of unique clicks a link generated for a campaign
    @jsondata:Name {value: "unique_click_percentage"}
    decimal uniqueClickPercentage?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Number of unique clicks for a link
    @jsondata:Name {value: "unique_clicks"}
    int uniqueClicks?;
    @jsondata:Name {value: "ab_split"}
    ABSplit abSplit?;
    # The percentage of total clicks a link generated for a campaign
    @jsondata:Name {value: "click_percentage"}
    decimal clickPercentage?;
    # The number of total clicks for a link
    @jsondata:Name {value: "total_clicks"}
    int totalClicks?;
    # The date and time for the last recorded click for a link in ISO 8601 format
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # The unique id for the link
    string id?;
    # The URL for the link in the campaign
    string url?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Represents the Queries record for the operation: getSearchCampaigns
public type GetSearchCampaignsQueries record {
    # The search query used to filter results
    string query;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
public type ListContact1 record {
    # The postal or zip code for the list contact
    string zip;
    # A two-character ISO3166 country code. Defaults to US if invalid
    string country;
    # The street address for the list contact
    string address2?;
    # The city for the list contact
    string city;
    # The phone number for the list contact
    string phone?;
    # The street address for the list contact
    string address1;
    # The company name for the list
    string company;
    # The state for the list contact
    string state;
};

# A report of links clicked in a specific campaign
public type ClickDetailReport1 record {
    # The percentage of unique clicks a link generated for a campaign
    @jsondata:Name {value: "unique_click_percentage"}
    decimal uniqueClickPercentage?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Number of unique clicks for a link
    @jsondata:Name {value: "unique_clicks"}
    int uniqueClicks?;
    @jsondata:Name {value: "ab_split"}
    ABSplit abSplit?;
    # The percentage of total clicks a link generated for a campaign
    @jsondata:Name {value: "click_percentage"}
    decimal clickPercentage?;
    # The number of total clicks for a link
    @jsondata:Name {value: "total_clicks"}
    int totalClicks?;
    # The date and time for the last recorded click for a link in ISO 8601 format
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # The unique id for the link
    string id?;
    # The URL for the link in the campaign
    string url?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Webhook configured for the given list
public type ListWebhooks1 record {
    # The possible sources of any events that can trigger the webhook and whether they are enabled
    Sources1 sources?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An string that uniquely identifies this webhook
    string id?;
    # A valid URL for the Webhook
    string url?;
    # The events that can trigger the webhook and whether they are enabled
    Events2 events?;
};

# API health status
public type APIHealthStatus record {
    # This will return a constant string value if the request is successful. Ex. "Everything's Chimpy!"
    @jsondata:Name {value: "health_status"}
    string healthStatus?;
};

public type InlineResponse20013ReportSummaryEcommerce record {
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# Represents the Queries record for the operation: getReportingLandingPagesId
public type GetReportingLandingPagesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The details of a survey question's report
public type SurveyQuestionReport record {
    # Label for the low end of the range
    @jsondata:Name {value: "range_low_label"}
    string rangeLowLabel?;
    # The query of the survey question
    string query?;
    # The average rating for this range question
    @jsondata:Name {value: "average_rating"}
    float averageRating?;
    # Label used for the subscribe checkbox for this email question
    @jsondata:Name {value: "subscribe_checkbox_label"}
    string subscribeCheckboxLabel?;
    # The response type of the survey question
    "pickOne"|"pickMany"|"range"|"text"|"email" 'type?;
    # Label for the high end of the range
    @jsondata:Name {value: "range_high_label"}
    string rangeHighLabel?;
    # Whether the subscribe checkbox is shown for this email question
    @jsondata:Name {value: "subscribe_checkbox_enabled"}
    boolean subscribeCheckboxEnabled?;
    # The unique ID of the survey
    @jsondata:Name {value: "survey_id"}
    string surveyId?;
    # Whether this survey question has an 'other' option
    @jsondata:Name {value: "has_other"}
    boolean hasOther?;
    # Placeholder text for this survey question's answer box
    @jsondata:Name {value: "placeholder_label"}
    string placeholderLabel?;
    # Label used for the 'other' option of this survey question
    @jsondata:Name {value: "other_label"}
    string otherLabel?;
    @jsondata:Name {value: "contact_counts"}
    ContactCounts contactCounts?;
    # Whether this survey question is required to answer
    @jsondata:Name {value: "is_required"}
    boolean isRequired?;
    # The answer choices for this question
    SurveyQuestionReportOptions[] options?;
    # The total number of responses to this question
    @jsondata:Name {value: "total_responses"}
    int totalResponses?;
    # The ID of the survey question
    string id?;
    @jsondata:Name {value: "merge_field"}
    MergeField4 mergeField?;
};

public type SendChecklistItems record {
    # The heading for the specific item
    string heading?;
    # Details about the specific feedback item
    string details?;
    # The ID for the specific item
    int id?;
    # The item type
    "success"|"warning"|"error" 'type?;
};

# Partial matches of the provided search query
public type PartialMatches record {
    # An array of objects, each representing a specific list member
    ListMembers4[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type CampaignSubReportsTimewarp record {
    # The number of unique clicks
    @jsondata:Name {value: "unique_clicks"}
    int uniqueClicks?;
    # The number of opens
    int opens?;
    # The number of clicks
    int clicks?;
    # The date and time of the last click in ISO 8601 format
    @jsondata:Name {value: "last_click"}
    string lastClick?;
    # For campaigns sent with timewarp, the time zone group the member is apart of
    @jsondata:Name {value: "gmt_offset"}
    int gmtOffset?;
    # The number of bounces
    int bounces?;
    # The date and time of the last open in ISO 8601 format
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
};

# A list an account's available templates
public type Templates record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # All of an account's saved or custom templates
    TemplateInstance2[] templates?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A collection of orders in a store
public type Orders1 record {
    # The unique identifier for the store
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing an order in a store
    ECommerceOrder4[] orders?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The details of a survey question's answer
public type SurveyQuestionAnswer record {
    # The date and time when the survey response was submitted in ISO 8601 format
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # The ID of the survey response
    @jsondata:Name {value: "response_id"}
    string responseId?;
    # Information about the contact
    Contact contact?;
    # If this contact was added to the Mailchimp audience via this survey
    @jsondata:Name {value: "is_new_contact"}
    boolean isNewContact?;
    # The ID of the answer
    string id?;
    # The raw text answer
    string value?;
};

# A member who unsubscribed from a specific campaign
public type Unsubscribes1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # If available, the reason listed by the member for unsubscribing
    string reason?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The date and time the member opted-out in ISO 8601 format
    string timestamp?;
};

public type FacebookAdsAllOf1 record {
    # If this outreach targets a segment of your audience
    @jsondata:Name {value: "has_segment"}
    boolean hasSegment?;
    # The URL of the thumbnail for this outreach
    string thumbnail?;
    # The date and time the outreach was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The date and time the outreach was canceled in ISO 8601 format
    @jsondata:Name {value: "canceled_at"}
    string canceledAt?;
    # The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The type of outreach this object is
    "regular"|"email-touchpoint"|"plaintext"|"rss"|"reconfirm"|"variate"|"absplit"|"automation"|"facebook"|"google"|"autoresponder"|"transactional"|"page"|"website"|"social_post"|"survey"|"customer_journey"|"sms" 'type?;
    # Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context
    @jsondata:Name {value: "show_report"}
    boolean showReport?;
    # The date and time the outreach was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The date and time the outreach was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # High level audience information for who the outreach targets
    Recipients recipients?;
    # The date and time the outreach was (or will be) published in ISO 8601 format
    @jsondata:Name {value: "published_time"}
    string publishedTime?;
    # Title or name of an Outreach
    string name?;
    # Unique ID of an Outreach
    string id?;
    # The status of this outreach
    "save"|"paused"|"schedule"|"scheduled"|"sending"|"sent"|"canceled"|"canceling"|"active"|"disconnected"|"somepaused"|"draft"|"completed"|"partialRejected"|"pending"|"rejected"|"published"|"unpublished" status?;
    @jsondata:Name {value: "report_summary"}
    ReportSummary reportSummary?;
};

# The last 10 notes for a specific list member, based on date created
public type CollectionOfNotes record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # An array of objects, each representing a note resource
    MemberNotes2[] notes?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application
public type Interest record {
    # The name of the interest. This can be shown publicly on a subscription form
    string name;
    # The display order for interests
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
};

# A member who unsubscribed from a specific campaign
public type Unsubscribes2 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # If available, the reason listed by the member for unsubscribing
    string reason?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The date and time the member opted-out in ISO 8601 format
    string timestamp?;
};

# Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program
public type AbuseComplaint record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Date for the abuse report
    string date?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id for the abuse report
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The id for the abuse report
    int id?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id for the abuse report
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCartsIdLines
public type GetEcommerceStoresIdCartsIdLinesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about the account contact
public type AccountContact record {
    # The zip code for the account contact
    string zip?;
    # The country for the account contact
    string country?;
    # The street address for the account contact
    string addr2?;
    # The street address for the account contact
    string addr1?;
    # The city for the account contact
    string city?;
    # The company name for the account
    string company?;
    # The state for the account contact
    string state?;
};

# The days of the week to send a daily RSS Campaign
public type DailySendingDays record {
    # Sends the daily RSS Campaign on Sundays
    boolean sunday?;
    # Sends the daily RSS Campaign on Saturdays
    boolean saturday?;
    # Sends the daily RSS Campaign on Tuesdays
    boolean tuesday?;
    # Sends the daily RSS Campaign on Wednesdays
    boolean wednesday?;
    # Sends the daily RSS Campaign on Thursdays
    boolean thursday?;
    # Sends the daily RSS Campaign on Fridays
    boolean friday?;
    # Sends the daily RSS Campaign on Mondays
    boolean monday?;
};

# A summary of List's locations
public type ListLocations record {
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a list's top subscriber locations
    ListLocation[] locations?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The original campaign that was resent
public type OriginalCampaign record {
    # ID for the resent campaign
    string id?;
    # The ID for the resent campaign used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Which campaign resend shortcut was used
    @jsondata:Name {value: "shortcut_type"}
    "non_openers"|"new_subscribers"|"non_clickers"|"non_purchasers" shortcutType?;
    # The title of the original campaign
    string title?;
};

# Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body
public type ECommerceCustomer record {
    # The customer's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The customer's address
    Address1 address?;
    # The customer's last name
    @jsondata:Name {value: "last_name"}
    string lastName?;
    # The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers)
    @jsondata:Name {value: "opt_in_status"}
    boolean optInStatus?;
    # The customer's company
    string company?;
    # A unique identifier for the customer. Limited to 50 characters
    @constraint:String {maxLength: 50}
    string id;
    # The customer's first name
    @jsondata:Name {value: "first_name"}
    string firstName?;
};

# Members to add/remove to/from a static segment
public type MembersToAddremoveTofromAStaticSegment record {
    # An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent
    @jsondata:Name {value: "members_to_add"}
    string[] membersToAdd?;
    # An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent
    @jsondata:Name {value: "members_to_remove"}
    string[] membersToRemove?;
};

# Information about a specific order
public type ECommerceOrder1 record {
    # The total amount of the discounts to be applied to the price of the order
    @jsondata:Name {value: "discount_total"}
    decimal discountTotal?;
    # The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "fulfillment_status"}
    string fulfillmentStatus?;
    # The tax total associated with an order
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the order was processed in ISO 8601 format
    @jsondata:Name {value: "processed_at_foreign"}
    string processedAtForeign?;
    @jsondata:Name {value: "billing_address"}
    BillingAddress2 billingAddress?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for the page where the buyer landed when entering the shop
    @jsondata:Name {value: "landing_site"}
    string landingSite?;
    # The URL for the order
    @jsondata:Name {value: "order_url"}
    string orderUrl?;
    # The tracking number associated with the order
    @jsondata:Name {value: "tracking_number"}
    string trackingNumber?;
    # A unique identifier for the order
    string id?;
    @jsondata:Name {value: "shipping_address"}
    ShippingAddress2 shippingAddress?;
    # The date and time the order was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # An array of the order's line items
    ECommerceOrderLineItem4[] lines?;
    # The promo codes applied on the order
    Orders1Promos[] promos?;
    # The tracking URL associated with the order
    @jsondata:Name {value: "tracking_url"}
    string trackingUrl?;
    # A string that uniquely identifies the campaign associated with an order
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The date and time the order was cancelled in ISO 8601 format
    @jsondata:Name {value: "cancelled_at_foreign"}
    string cancelledAtForeign?;
    # The unique identifier for the store
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The shipping total for the order
    @jsondata:Name {value: "shipping_total"}
    decimal shippingTotal?;
    # The outreach associated with this order. For example, an email campaign or Facebook ad
    Outreach1 outreach?;
    # The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs
    @jsondata:Name {value: "tracking_code"}
    "prec" trackingCode?;
    # The tracking carrier associated with the order
    @jsondata:Name {value: "tracking_carrier"}
    string trackingCarrier?;
    # The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "financial_status"}
    string financialStatus?;
    # The order total associated with an order
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # Information about a specific customer
    ECommerceCustomer6 customer?;
};

# Represents the Queries record for the operation: getEcommerceOrders
public type GetEcommerceOrdersQueries record {
    # Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad
    @http:Query {name: "has_outreach"}
    boolean hasOutreach?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict results to orders with a specific `outreach_id` value
    @http:Query {name: "outreach_id"}
    string outreachId?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to orders made by a specific customer
    @http:Query {name: "customer_id"}
    string customerId?;
    # Restrict results to orders with a specific `campaign_id` value
    @http:Query {name: "campaign_id"}
    string campaignId?;
};

# Information about a specific order
public type ECommerceOrder4 record {
    # The total amount of the discounts to be applied to the price of the order
    @jsondata:Name {value: "discount_total"}
    decimal discountTotal?;
    # The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "fulfillment_status"}
    string fulfillmentStatus?;
    # The tax total associated with an order
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the order was processed in ISO 8601 format
    @jsondata:Name {value: "processed_at_foreign"}
    string processedAtForeign?;
    @jsondata:Name {value: "billing_address"}
    BillingAddress2 billingAddress?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for the page where the buyer landed when entering the shop
    @jsondata:Name {value: "landing_site"}
    string landingSite?;
    # The URL for the order
    @jsondata:Name {value: "order_url"}
    string orderUrl?;
    # The tracking number associated with the order
    @jsondata:Name {value: "tracking_number"}
    string trackingNumber?;
    # A unique identifier for the order
    string id?;
    @jsondata:Name {value: "shipping_address"}
    ShippingAddress2 shippingAddress?;
    # The date and time the order was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # An array of the order's line items
    ECommerceOrderLineItem4[] lines?;
    # The promo codes applied on the order
    Orders1Promos[] promos?;
    # The tracking URL associated with the order
    @jsondata:Name {value: "tracking_url"}
    string trackingUrl?;
    # A string that uniquely identifies the campaign associated with an order
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The date and time the order was cancelled in ISO 8601 format
    @jsondata:Name {value: "cancelled_at_foreign"}
    string cancelledAtForeign?;
    # The unique identifier for the store
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The shipping total for the order
    @jsondata:Name {value: "shipping_total"}
    decimal shippingTotal?;
    # The outreach associated with this order. For example, an email campaign or Facebook ad
    Outreach1 outreach?;
    # The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs
    @jsondata:Name {value: "tracking_code"}
    "prec" trackingCode?;
    # The tracking carrier associated with the order
    @jsondata:Name {value: "tracking_carrier"}
    string trackingCarrier?;
    # The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "financial_status"}
    string financialStatus?;
    # The order total associated with an order
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # Information about a specific customer
    ECommerceCustomer6 customer?;
};

# Represents the Queries record for the operation: getCampaignsIdSendChecklist
public type GetCampaignsIdSendChecklistQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific order
public type ECommerceOrder3 record {
    # The total amount of the discounts to be applied to the price of the order
    @jsondata:Name {value: "discount_total"}
    decimal discountTotal?;
    # The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "fulfillment_status"}
    string fulfillmentStatus?;
    # The tax total associated with an order
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The shipping total for the order
    @jsondata:Name {value: "shipping_total"}
    decimal shippingTotal?;
    # The outreach associated with this order. For example, an email campaign or Facebook ad
    Outreach outreach?;
    # The date and time the order was processed in ISO 8601 format
    @jsondata:Name {value: "processed_at_foreign"}
    string processedAtForeign?;
    @jsondata:Name {value: "billing_address"}
    BillingAddress2 billingAddress?;
    # The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs
    @jsondata:Name {value: "tracking_code"}
    "prec" trackingCode?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for the page where the buyer landed when entering the shop
    @jsondata:Name {value: "landing_site"}
    string landingSite?;
    # The URL for the order
    @jsondata:Name {value: "order_url"}
    string orderUrl?;
    # The tracking carrier associated with the order
    @jsondata:Name {value: "tracking_carrier"}
    string trackingCarrier?;
    # The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "financial_status"}
    string financialStatus?;
    # The tracking number associated with the order
    @jsondata:Name {value: "tracking_number"}
    string trackingNumber?;
    # The order total associated with an order
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    @jsondata:Name {value: "shipping_address"}
    ShippingAddress2 shippingAddress?;
    # The date and time the order was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # An array of the order's line items
    ECommerceOrderLineItem2[] lines?;
    # The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided
    EcommercestoresstoreIdordersPromos[] promos?;
    # The tracking URL associated with the order
    @jsondata:Name {value: "tracking_url"}
    string trackingUrl?;
    # A string that uniquely identifies the campaign associated with an order
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body
    ECommerceCustomer1 customer?;
    # The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited
    @jsondata:Name {value: "cancelled_at_foreign"}
    string cancelledAtForeign?;
};

# A collection of an order's line items
public type OrderLines record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing an order's line item
    ECommerceOrderLineItem4[] lines?;
    # The order id
    @jsondata:Name {value: "order_id"}
    string orderId?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Information about a specific order
public type ECommerceOrder2 record {
    # The total amount of the discounts to be applied to the price of the order
    @jsondata:Name {value: "discount_total"}
    decimal discountTotal?;
    # The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "fulfillment_status"}
    string fulfillmentStatus?;
    # The tax total for the order
    @jsondata:Name {value: "tax_total"}
    decimal taxTotal?;
    # The shipping total for the order
    @jsondata:Name {value: "shipping_total"}
    decimal shippingTotal?;
    # The outreach associated with this order. For example, an email campaign or Facebook ad
    Outreach outreach?;
    # The date and time the order was processed in ISO 8601 format
    @jsondata:Name {value: "processed_at_foreign"}
    string processedAtForeign?;
    @jsondata:Name {value: "billing_address"}
    BillingAddress1 billingAddress?;
    # The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs
    @jsondata:Name {value: "tracking_code"}
    "prec" trackingCode?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for the page where the buyer landed when entering the shop
    @jsondata:Name {value: "landing_site"}
    string landingSite?;
    # The URL for the order
    @jsondata:Name {value: "order_url"}
    string orderUrl?;
    # The tracking carrier associated with the order
    @jsondata:Name {value: "tracking_carrier"}
    string trackingCarrier?;
    # The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications)
    @jsondata:Name {value: "financial_status"}
    string financialStatus?;
    # The tracking number associated with the order
    @jsondata:Name {value: "tracking_number"}
    string trackingNumber?;
    # The total for the order
    @jsondata:Name {value: "order_total"}
    decimal orderTotal?;
    # A unique identifier for the order
    string id;
    @jsondata:Name {value: "shipping_address"}
    ShippingAddress1 shippingAddress?;
    # The date and time the order was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # An array of the order's line items
    ECommerceOrderLineItem1[] lines?;
    # The promo codes applied on the order
    EcommercestoresstoreIdordersPromos[] promos?;
    # The tracking URL associated with the order
    @jsondata:Name {value: "tracking_url"}
    string trackingUrl?;
    # A string that uniquely identifies the campaign for an order
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # Information about a specific customer. For existing customers include only the `id` parameter in the `customer` object body
    ECommerceCustomer5 customer?;
    # The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being created
    @jsondata:Name {value: "cancelled_at_foreign"}
    string cancelledAtForeign?;
};

public type CampaignContentVariateContents record {
    # Label used to identify the content option
    @jsondata:Name {value: "content_label"}
    string contentLabel?;
    # The plain-text portion of the campaign. If left unspecified, we'll generate this automatically
    @jsondata:Name {value: "plain_text"}
    string plainText?;
    # The raw HTML for the campaign
    string html?;
};

# The script used to connect your site with Mailchimp
public type Script1 record {
    # A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp
    string fragment?;
    # The URL used for any integrations that offer built-in support for connected sites
    string url?;
};

# Represents the Queries record for the operation: getReportingLandingPages
public type GetReportingLandingPagesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Report details about a sent campaign
public type CampaignReport1 record {
    # An object describing the forwards and forward activity for the campaign
    Forwards forwards?;
    @jsondata:Name {value: "share_report"}
    ShareReport shareReport?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # For RSS campaigns, the date and time of the last send in ISO 8601 format
    @jsondata:Name {value: "rss_last_send"}
    string rssLastSend?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto)
    string 'type?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    @jsondata:Name {value: "industry_stats"}
    IndustryStats industryStats?;
    @jsondata:Name {value: "list_stats"}
    ListStats listStats?;
    # The title of the campaign
    @jsondata:Name {value: "campaign_title"}
    string campaignTitle?;
    @jsondata:Name {value: "facebook_likes"}
    FacebookLikes facebookLikes?;
    # An hourly breakdown of the performance of the campaign over the first 24 hours
    CampaignSubReportsTimeseries[] timeseries?;
    # The total number of emails sent for this campaign
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # E-Commerce stats for a campaign
    ECommerceReport ecommerce?;
    # A string that uniquely identifies this campaign
    string id?;
    # An object describing the bounce summary for the campaign
    Bounces bounces?;
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    @jsondata:Name {value: "ab_split"}
    ABSplitStats abSplit?;
    # An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp
    CampaignSubReportsTimewarp[] timewarp?;
    # The total number of unsubscribed members for this campaign
    int unsubscribed?;
    # The date and time a campaign was sent in ISO 8601 format
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    # An object describing the open activity for the campaign
    Opens opens?;
    # An object describing the click activity for the campaign
    Clicks clicks?;
    # The number of abuse reports generated for this campaign
    @jsondata:Name {value: "abuse_reports"}
    int abuseReports?;
    @jsondata:Name {value: "delivery_status"}
    CampaignDeliveryStatus deliveryStatus?;
};

# A summary of the emails in an Automation workflow
public type AutomationEmails record {
    # An array of objects, each representing an email in an Automation workflow
    AutomationWorkflowEmail1[] emails?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdPromocodesId
public type GetEcommerceStoresIdPromocodesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A summary of an individual campaign's settings and content
public type Campaign record {
    # The settings for your campaign, including subject, from name, reply-to address, and more
    CampaignSettings1 settings?;
    @jsondata:Name {value: "variate_settings"}
    ABTestOptions variateSettings?;
    @jsondata:Name {value: "rss_opts"}
    RSSOptions rssOpts?;
    # How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template
    @jsondata:Name {value: "content_type"}
    "template"|"multichannel" contentType?;
    @jsondata:Name {value: "social_card"}
    CampaignSocialCard socialCard?;
    # List settings for the campaign
    List1 recipients?;
    # There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead
    "regular"|"plaintext"|"absplit"|"rss"|"variate" 'type;
    # The tracking options for a campaign
    CampaignTrackingOptions tracking?;
};

# Represents the Queries record for the operation: getListsIdSegmentsIdMembers
public type GetListsIdSegmentsIdMembersQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Include unsubscribed members in response
    @http:Query {name: "include_unsubscribed"}
    boolean includeUnsubscribed?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Include transactional members in response
    @http:Query {name: "include_transactional"}
    boolean includeTransactional?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Include cleaned members in response
    @http:Query {name: "include_cleaned"}
    boolean includeCleaned?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type ListMembers5 record {
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    @jsondata:Name {value: "last_note"}
    Notes lastNote?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An individual merge var and value for a member
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Star rating for this member, between 1 and 5
    @jsondata:Name {value: "member_rating"}
    int memberRating?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # A unique ID for the contact record
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # The tags applied to this member
    ExactMatchesTags[] tags?;
    # An identifier for the address across all of Mailchimp
    @jsondata:Name {value: "unique_email_id"}
    string uniqueEmailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list member's email client
    @jsondata:Name {value: "email_client"}
    string emailClient?;
    # Open and click rates for this subscriber
    SubscriberStats stats?;
    # The number of tags applied to this member
    @jsondata:Name {value: "tags_count"}
    int tagsCount?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location1 location?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status?;
    # The date and time the member's info was last changed in ISO 8601 format
    @jsondata:Name {value: "last_changed"}
    string lastChanged?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type ListMembers4 record {
    # The marketing permissions for the subscriber
    @jsondata:Name {value: "marketing_permissions"}
    MarketingPermission1[] marketingPermissions?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    @jsondata:Name {value: "last_note"}
    Notes lastNote?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Star rating for this member, between 1 and 5
    @jsondata:Name {value: "member_rating"}
    int memberRating?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # The source from which the subscriber was added to this list
    string 'source?;
    # As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # A subscriber's reason for unsubscribing
    @jsondata:Name {value: "unsubscribe_reason"}
    string unsubscribeReason?;
    # The list member's email client
    @jsondata:Name {value: "email_client"}
    string emailClient?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # Open and click rates for this subscriber
    SubscriberStats1 stats?;
    # The number of tags applied to this member
    @jsondata:Name {value: "tags_count"}
    int tagsCount?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The datetime when the SMS subscription was last updated
    @jsondata:Name {value: "sms_subscription_last_updated"}
    string smsSubscriptionLastUpdated?;
    # The status of an SMS subscription
    @jsondata:Name {value: "sms_subscription_status"}
    "subscribed"|"unsubscribed"|"nonsubscribed"|"pending" smsSubscriptionStatus?;
    # Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/)
    ExactMatchesTags[] tags?;
    # An identifier for the address across all of Mailchimp
    @jsondata:Name {value: "unique_email_id"}
    string uniqueEmailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The contact's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # Subscriber location information
    Location3 location?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional"|"archived" status?;
    # Indicates whether a contact consents to 1:1 messaging
    @jsondata:Name {value: "consents_to_one_to_one_messaging"}
    boolean consentsToOneToOneMessaging?;
    # The date and time the member's info was last changed in ISO 8601 format
    @jsondata:Name {value: "last_changed"}
    string lastChanged?;
};

# Represents the Queries record for the operation: getReportsIdUnsubscribedId
public type GetReportsIdUnsubscribedIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type ListMembers3 record {
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    @jsondata:Name {value: "last_note"}
    Notes lastNote?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Star rating for this member, between 1 and 5
    @jsondata:Name {value: "member_rating"}
    int memberRating?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # An identifier for the address across all of Mailchimp
    @jsondata:Name {value: "unique_email_id"}
    string uniqueEmailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The contact's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # The list member's email client
    @jsondata:Name {value: "email_client"}
    string emailClient?;
    # Open and click rates for this subscriber
    SubscriberStats stats?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # Subscriber location information
    Location1 location?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status?;
    # The date and time the member's info was last changed in ISO 8601 format
    @jsondata:Name {value: "last_changed"}
    string lastChanged?;
};

# Represents the Queries record for the operation: getLandingPageId
public type GetLandingPageIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type ListMembers2 record {
    # The marketing permissions for the subscriber
    @jsondata:Name {value: "marketing_permissions"}
    MarketingPermission1[] marketingPermissions?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    @jsondata:Name {value: "last_note"}
    Notes lastNote?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # Star rating for this member, between 1 and 5
    @jsondata:Name {value: "member_rating"}
    int memberRating?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # The source from which the subscriber was added to this list
    string 'source?;
    # As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `id` is the MD5 hash of their email address, this `contact_id` is agnostic of contact’s inclusion of an email address
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # A subscriber's reason for unsubscribing
    @jsondata:Name {value: "unsubscribe_reason"}
    string unsubscribeReason?;
    # The list member's email client
    @jsondata:Name {value: "email_client"}
    string emailClient?;
    # A US phone number for SMS contact
    @jsondata:Name {value: "sms_phone_number"}
    string smsPhoneNumber?;
    # Open and click rates for this subscriber
    SubscriberStats1 stats?;
    # The number of tags applied to this member
    @jsondata:Name {value: "tags_count"}
    int tagsCount?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # The ID used in the Mailchimp web application. View this member in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/view?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The datetime when the SMS subscription was last updated
    @jsondata:Name {value: "sms_subscription_last_updated"}
    string smsSubscriptionLastUpdated?;
    # The status of an SMS subscription
    @jsondata:Name {value: "sms_subscription_status"}
    "subscribed"|"unsubscribed"|"nonsubscribed"|"pending" smsSubscriptionStatus?;
    # Returns up to 50 tags applied to this member. To retrieve all tags see [Member Tags](https://mailchimp.com/developer/marketing/api/list-member-tags/)
    ExactMatchesTags[] tags?;
    # An identifier for the address across all of Mailchimp
    @jsondata:Name {value: "unique_email_id"}
    string uniqueEmailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The contact's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # Subscriber location information
    Location3 location?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional"|"archived" status?;
    # Indicates whether a contact consents to 1:1 messaging
    @jsondata:Name {value: "consents_to_one_to_one_messaging"}
    boolean consentsToOneToOneMessaging?;
    # The date and time the member's info was last changed in ISO 8601 format
    @jsondata:Name {value: "last_changed"}
    string lastChanged?;
};

# Manage members of a specific Mailchimp list, including currently subscribed, unsubscribed, and bounced members
public type ListMembers1 record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a specific list member
    ListMembers4[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A collection of a product's variants
public type EcommerceProductVariants record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The product id
    @jsondata:Name {value: "product_id"}
    string productId?;
    # An array of objects, each representing a product's variants
    ECommerceProductVariant3[] variants?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type FacebookAdsAllOf11 record {
    # If this outreach targets a segment of your audience
    @jsondata:Name {value: "has_segment"}
    boolean hasSegment?;
    # The URL of the thumbnail for this outreach
    string thumbnail?;
    # The date and time the outreach was created in ISO 8601 format
    @jsondata:Name {value: "create_time"}
    string createTime?;
    # The date and time the outreach was canceled in ISO 8601 format
    @jsondata:Name {value: "canceled_at"}
    string canceledAt?;
    # The ID used in the Mailchimp web application. For example, for a `regular` outreach, you can view this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The type of outreach this object is
    "regular"|"email-touchpoint"|"plaintext"|"rss"|"reconfirm"|"variate"|"absplit"|"automation"|"facebook"|"google"|"autoresponder"|"transactional"|"page"|"website"|"social_post"|"survey"|"customer_journey"|"sms" 'type?;
    # Outreach report availability. Note: This property is hotly debated in what it _should_ convey. See [MCP-1371](https://jira.mailchimp.com/browse/MCP-1371) for more context
    @jsondata:Name {value: "show_report"}
    boolean showReport?;
    # The date and time the outreach was started in ISO 8601 format
    @jsondata:Name {value: "start_time"}
    string startTime?;
    # The date and time the outreach was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # High level audience information for who the outreach targets
    Recipients recipients?;
    # The date and time the outreach was (or will be) published in ISO 8601 format
    @jsondata:Name {value: "published_time"}
    string publishedTime?;
    # Title or name of an Outreach
    string name?;
    # Unique ID of an Outreach
    string id?;
    # The status of this outreach
    "save"|"paused"|"schedule"|"scheduled"|"sending"|"sent"|"canceled"|"canceling"|"active"|"disconnected"|"somepaused"|"draft"|"completed"|"partialRejected"|"pending"|"rejected"|"published"|"unpublished" status?;
    @jsondata:Name {value: "report_summary"}
    ReportSummary reportSummary?;
};

public type CampaignSubReportsTimeseries record {
    # The number of emails sent in the timeseries
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # The number of clicks in the timeseries
    @jsondata:Name {value: "recipients_clicks"}
    int recipientsClicks?;
    # The number of unique opens in the timeseries, excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_unique_opens"}
    int proxyExcludedUniqueOpens?;
    # The number of unique opens in the timeseries
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The date and time for the series in ISO 8601 format
    string timestamp?;
};

# The hours an Automation workflow can send
public type Hours record {
    # When to send the Automation email
    "send_asap"|"send_between"|"send_at" 'type;
};

# An object describing the forwards and forward activity for the campaign
public type Forwards record {
    # How many times the campaign has been forwarded
    @jsondata:Name {value: "forwards_count"}
    int forwardsCount?;
    # How many times the forwarded campaign has been opened
    @jsondata:Name {value: "forwards_opens"}
    int forwardsOpens?;
};

# Represents the Queries record for the operation: getRoot
public type GetRootQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getConversationsIdMessages
public type GetConversationsIdMessagesQueries record {
    # Whether a conversation message has been marked as read
    @http:Query {name: "is_read"}
    "true"|"false" isRead?;
    # Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_timestamp"}
    string beforeTimestamp?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_timestamp"}
    string sinceTimestamp?;
};

# A single email domain's performance
public type EmailDomain record {
    # The percentage of total opens from this domain
    @jsondata:Name {value: "opens_pct"}
    decimal opensPct?;
    # The percentage of total emails that went to this domain
    @jsondata:Name {value: "emails_pct"}
    decimal emailsPct?;
    # The name of the domain (gmail.com, hotmail.com, yahoo.com)
    string domain?;
    # The number of emails sent to that specific domain
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # The total number of unsubscribes for a domain
    int unsubs?;
    # The number of opens for a domain
    int opens?;
    # The number of clicks for a domain
    int clicks?;
    # The number of successful deliveries for a domain
    int delivered?;
    # The percentage of total unsubscribes from this domain
    @jsondata:Name {value: "unsubs_pct"}
    decimal unsubsPct?;
    # The number of bounces at a domain
    int bounces?;
    # The percentage of total clicks from this domain
    @jsondata:Name {value: "clicks_pct"}
    decimal clicksPct?;
    # The percentage of total bounces from this domain
    @jsondata:Name {value: "bounces_pct"}
    decimal bouncesPct?;
};

public type BatchUpdateListMembersErrors record {
    # The email address that could not be added or updated
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # If the error is field-related, information about which field is at issue
    string 'field?;
    # A unique code that identifies this specifc error
    @jsondata:Name {value: "error_code"}
    "ERROR_CONTACT_EXISTS"|"ERROR_GENERIC" errorCode?;
    # The error message indicating why the email address could not be added or updated
    string 'error?;
    # Message indicating how to resolve a field-related error
    @jsondata:Name {value: "field_message"}
    string fieldMessage?;
};

# The [average campaign statistics](https://mailchimp.com/resources/research/email-marketing-benchmarks/?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs) for all campaigns in the account's specified industry
public type IndustryStats1 record {
    # The average unique click rate for all campaigns in the account's specified industry
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The average bounce rate for all campaigns in the account's specified industry
    @jsondata:Name {value: "bounce_rate"}
    decimal bounceRate?;
    # The average unique open rate for all campaigns in the account's specified industry
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# The HTML and plain-text content for a campaign
public type CampaignContent record {
    # The Archive HTML for the campaign
    @jsondata:Name {value: "archive_html"}
    string archiveHtml?;
    # The plain-text portion of the campaign. If left unspecified, we'll generate this automatically
    @jsondata:Name {value: "plain_text"}
    string plainText?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Content options for multivariate campaigns
    @jsondata:Name {value: "variate_contents"}
    CampaignContentVariateContents[] variateContents?;
    # The raw HTML for the campaign
    string html?;
};

# A list of abuse complaints for a specific list
public type AbuseComplaints1 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing an abuse report resource
    @jsondata:Name {value: "abuse_reports"}
    AbuseComplaint3[] abuseReports?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# The tracking settings applied to this landing page
public type TrackingSettings record {
    # Use cookies to track unique visitors and calculate overall conversion rate. Learn more [here](https://mailchimp.com/help/use-track-mailchimp/)
    @jsondata:Name {value: "track_with_mailchimp"}
    boolean trackWithMailchimp?;
    # Google offers restricted data processing in connection with the California Consumer Privacy Act (CCPA) to restrict how Google uses certain identifiers and other data processed in the provision of its services. You can learn more about Google's restricted data processing within Google Ads [here](https://privacy.google.com/businesses/rdp/)
    @jsondata:Name {value: "enable_restricted_data_processing"}
    boolean enableRestrictedDataProcessing?;
};

# Represents the Queries record for the operation: getLists
public type GetListsQueries record {
    # Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_campaign_last_sent"}
    string beforeCampaignLastSent?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict results to lists that contain an active, connected, undeleted ecommerce store
    @http:Query {name: "has_ecommerce_store"}
    boolean hasEcommerceStore?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_date_created"}
    string beforeDateCreated?;
    # Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state
    @http:Query {name: "include_total_contacts"}
    boolean includeTotalContacts?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_date_created"}
    string sinceDateCreated?;
    # Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_campaign_last_sent"}
    string sinceCampaignLastSent?;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "date_created" sortField?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # Restrict results to lists that include a specific subscriber's email address
    string email?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# A subscriber who clicked a specific URL in a specific campaign
public type ClickDetailMember1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The total number of times the subscriber clicked on the link
    int clicks?;
    # The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation
    @jsondata:Name {value: "contact_status"}
    string contactStatus?;
    # The id for the tracked URL in the campaign
    @jsondata:Name {value: "url_id"}
    string urlId?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# The API root resource links to all other resources available in the API
public type APIRoot record {
    # The date and time that the account was created in ISO 8601 format
    @jsondata:Name {value: "member_since"}
    string memberSince?;
    # The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account
    @jsondata:Name {value: "login_id"}
    string loginId?;
    # Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/)
    @jsondata:Name {value: "pro_enabled"}
    boolean proEnabled?;
    # The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account
    string role?;
    # Date of first payment for monthly plans
    @jsondata:Name {value: "first_payment"}
    string firstPayment?;
    # The type of pricing plan the account is on
    @jsondata:Name {value: "pricing_plan_type"}
    "monthly"|"pay_as_you_go"|"forever_free" pricingPlanType?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time of the last login for this account in ISO 8601 format
    @jsondata:Name {value: "last_login"}
    string lastLogin?;
    # The last name tied to the account
    @jsondata:Name {value: "last_name"}
    string lastName?;
    @jsondata:Name {value: "industry_stats"}
    IndustryStats1 industryStats?;
    # The Mailchimp account ID
    @jsondata:Name {value: "account_id"}
    string accountId?;
    # URL of the avatar for the user
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl?;
    # The name of the account
    @jsondata:Name {value: "account_name"}
    string accountName?;
    # Information about the account contact
    AccountContact contact?;
    # The user-specified industry associated with the account
    @jsondata:Name {value: "account_industry"}
    string accountIndustry?;
    # The first name tied to the account
    @jsondata:Name {value: "first_name"}
    string firstName?;
    # The account email address
    string email?;
    # The timezone currently set for the account
    @jsondata:Name {value: "account_timezone"}
    string accountTimezone?;
    # The total number of subscribers across all lists in the account
    @jsondata:Name {value: "total_subscribers"}
    int totalSubscribers?;
    # The username tied to the account
    string username?;
};

# Deprecated
public type CapsuleCRMTracking2 record {
    # Update contact notes for a campaign based on a subscriber's email addresses
    boolean notes?;
};

# Deprecated
public type CapsuleCRMTracking1 record {
    # Update contact notes for a campaign based on a subscriber's email address
    boolean notes?;
};

public type CampaignsResults record {
    string snippet?;
    # A summary of an individual campaign's settings and content
    Campaign4 campaign?;
};

# The most recent Note added about this member
public type Notes record {
    # The note id
    @jsondata:Name {value: "note_id"}
    int noteId?;
    # The content of the note
    string note?;
    # The date and time the note was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The author of the note
    @jsondata:Name {value: "created_by"}
    string createdBy?;
};

public type ResendShortcutUsageShortcutCampaigns record {
    # The date and time a resent campaign was sent
    @jsondata:Name {value: "send_time"}
    string sendTime?;
    # Unique ID for the resent campaign
    string id?;
    # The ID for the resent campaign used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`
    @jsondata:Name {value: "web_id"}
    int webId?;
    # Which campaign resend shortcut was used
    @jsondata:Name {value: "shortcut_type"}
    "non_openers"|"new_subscribers"|"non_clickers"|"non_purchasers" shortcutType?;
    # The current status of the campaign
    "save"|"paused"|"schedule"|"sending"|"sent"|"canceled"|"canceling"|"archived" status?;
};

# Represents the Queries record for the operation: getReportsIdSentToId
public type GetReportsIdSentToIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

public type ActionsCreateResendBody record {
    # Which campaign resend shortcut to use. Default is `to_non_openers`
    @jsondata:Name {value: "shortcut_type"}
    "to_non_openers"|"to_new_subscribers"|"to_non_clickers"|"to_non_purchasers" shortcutType?;
};

# A list of available segments
public type CollectionOfSegments record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing a list segment
    List9[] segments?;
};

# Determines if the campaign qualifies to be resent to non-clickers
public type ToNonClickers record {
    # The reason the campaign is not eligible to be resent to this segment
    string reason?;
    # Determines if the campaign qualifies to be resent to this segment
    @jsondata:Name {value: "is_eligible"}
    boolean isEligible?;
};

# The billing address for the order
public type BillingAddress1 record {
    # The country in the billing address
    string country?;
    # An additional field for the billing address
    string address2?;
    # The city in the billing address
    string city?;
    # The billing address for the order
    string address1?;
    # The latitude for the billing address location
    decimal latitude?;
    # The two-letter code for the province in the billing address
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the billing address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the billing address
    string province?;
    # The phone number for the billing address
    string phone?;
    # The name associated with the billing address
    string name?;
    # The company associated with the billing address
    string company?;
    # The postal or zip code in the billing address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the billing address location
    decimal longitude?;
};

# The billing address for the order
public type BillingAddress2 record {
    # The country in the billing address
    string country?;
    # An additional field for the billing address
    string address2?;
    # The city in the billing address
    string city?;
    # The billing address for the order
    string address1?;
    # The latitude for the billing address location
    decimal latitude?;
    # The two-letter code for the province or state in the billing address
    @jsondata:Name {value: "province_code"}
    string provinceCode?;
    # The two-letter code for the country in the billing address
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The state or normalized province in the billing address
    string province?;
    # The phone number for the billing address
    string phone?;
    # The name associated with an order's billing address
    string name?;
    # The company associated with the billing address
    string company?;
    # The postal or zip code in the billing address
    @jsondata:Name {value: "postal_code"}
    string postalCode?;
    # The longitude for the billing address location
    decimal longitude?;
};

# Subscriber location information
public type Location3 record {
    # The unique code for the location country
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The offset for timezones where daylight saving time is observed
    int dstoff?;
    # The timezone for the location
    string timezone?;
    # The location latitude
    decimal latitude?;
    # The time difference in hours from GMT
    int gmtoff?;
    # The region for the location
    string region?;
    # The location longitude
    decimal longitude?;
};

# The clicks and visits data from the last seven days
public type DailyClicksAndVisitsData record {
    @jsondata:Name {value: "unique_visits"}
    DailyClicksAndVisitsDataUniqueVisits[] uniqueVisits?;
    DailyClicksAndVisitsDataVisits[] visits?;
    DailyClicksAndVisitsDataClicks[] clicks?;
};

# Subscriber location information
public type Location1 record {
    # The unique code for the location country
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The offset for timezones where daylight saving time is observed
    int dstoff?;
    # The timezone for the location
    string timezone?;
    # The location latitude
    decimal latitude?;
    # The time difference in hours from GMT
    int gmtoff?;
    # The location longitude
    decimal longitude?;
};

# Represents the Queries record for the operation: getReportsIdEmailActivity
public type GetReportsIdEmailActivityQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    string since?;
};

# An individual click location
public type Location2 record {
    # The two-digit country code for a recorded click
    string country?;
    # If available, a specific region where the click was recorded
    string region?;
};

# Exact matches of the provided search query
public type ExactMatches record {
    # An array of objects, each representing a specific list member
    ListMembers4[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getListsIdMembersIdGoals
public type GetListsIdMembersIdGoalsQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getBatchWebhook
public type GetBatchWebhookQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdProductsId
public type GetEcommerceStoresIdProductsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about subscribers in an Automation email queue
public type SubscriberInAutomationQueue2 record {
    # A string that uniquely identifies an email in an Automation workflow
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress;
    # A string that uniquely identifies a list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time of the next send for the workflow email in ISO 8601 format
    @jsondata:Name {value: "next_send"}
    string nextSend?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
};

# A collection of a store's carts
public type Carts record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # An array of objects, each representing a cart
    ECommerceCart3[] carts?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Information about an Ecommerce Store's specific Promo Code
public type ECommercePromoCode record {
    # Number of times promo code has been used
    @jsondata:Name {value: "usage_count"}
    int usageCount?;
    # The discount code. Restricted to UTF-8 characters with max length 50
    string code;
    # A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50
    string id;
    # The date and time the promotion was created in ISO 8601 format
    @jsondata:Name {value: "created_at_foreign"}
    string createdAtForeign?;
    # The date and time the promotion was updated in ISO 8601 format
    @jsondata:Name {value: "updated_at_foreign"}
    string updatedAtForeign?;
    # The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000
    @jsondata:Name {value: "redemption_url"}
    string redemptionUrl;
    # Whether the promo code is currently enabled
    boolean enabled?;
};

# Information about subscribers in an Automation email queue
public type SubscriberInAutomationQueue1 record {
    # A string that uniquely identifies an email in an Automation workflow
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # A string that uniquely identifies a list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time of the next send for the workflow email in ISO 8601 format
    @jsondata:Name {value: "next_send"}
    string nextSend?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
};

# A summary of the comment feedback for a specific campaign
public type CampaignReports record {
    # A collection of feedback items for a campaign
    CampaignFeedback3[] feedback?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf1234 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

# The settings for the Automation workflow
public type AutomationCampaignSettings record {
    # The reply-to email address for the Automation
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # The 'from' name for the Automation (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
};

# Represents the Queries record for the operation: getListsIdSegmentsId
public type GetListsIdSegmentsIdQueries record {
    # Include unsubscribed members in response
    @http:Query {name: "include_unsubscribed"}
    boolean includeUnsubscribed?;
    # Include transactional members in response
    @http:Query {name: "include_transactional"}
    boolean includeTransactional?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Include cleaned members in response
    @http:Query {name: "include_cleaned"}
    boolean includeCleaned?;
};

# Represents the Queries record for the operation: postAllLandingPages
public type PostAllLandingPagesQueries record {
    # Will create the Landing Page using the account's Default List instead of requiring a list_id
    @http:Query {name: "use_default_list"}
    boolean useDefaultList?;
};

public type ExactMatchesTags record {
    # The name of the tag
    string name?;
    # The tag id
    int id?;
};

# Subscriber location information
public type Location record {
    # The location latitude
    decimal latitude?;
    # The location longitude
    decimal longitude?;
};

# Information about a specific order line
public type ECommerceOrderLineItem2 record {
    # The quantity of an order line item
    int quantity?;
    # The price of an order line item
    decimal price?;
    # A unique identifier for the product associated with the order line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The total discount amount applied to this line item
    decimal discount?;
    # A unique identifier for the product variant associated with the order line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
};

# Represents the Queries record for the operation: getListsIdInterestCategoriesId
public type GetListsIdInterestCategoriesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific order line
public type ECommerceOrderLineItem1 record {
    # Information about a specific product
    ECommerceProduct1 product?;
    # The quantity of an order line item
    int quantity?;
    # The price of an order line item
    decimal price?;
    # A unique identifier for the product associated with the order line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The total discount amount applied to this line item
    decimal discount?;
    # A unique identifier for the order line item
    string id;
    # A unique identifier for the product variant associated with the order line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
};

# Represents the Queries record for the operation: getAccountExports
public type GetAccountExportsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific order line
public type ECommerceOrderLineItem4 record {
    # The name of the product variant for an order line item
    @jsondata:Name {value: "product_variant_title"}
    string productVariantTitle?;
    # The order line item quantity
    int quantity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The order line item price
    decimal price?;
    # A unique identifier for the product associated with an order line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The total discount amount applied to a line item
    decimal discount?;
    # A unique identifier for an order line item
    string id?;
    # A unique identifier for the product variant associated with an order line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
    # The name of the product for an order line item
    @jsondata:Name {value: "product_title"}
    string productTitle?;
};

# Information about a specific order line
public type ECommerceOrderLineItem3 record {
    # The name of the product variant for an order line item
    @jsondata:Name {value: "product_variant_title"}
    string productVariantTitle?;
    # The order line item quantity
    int quantity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The order line item price
    decimal price?;
    # A unique identifier for the product associated with an order line item
    @jsondata:Name {value: "product_id"}
    string productId?;
    # The total discount amount applied to a line item
    decimal discount?;
    # A unique identifier for an order line item
    string id?;
    # A unique identifier for the product variant associated with an order line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId?;
    # The name of the product for an order line item
    @jsondata:Name {value: "product_title"}
    string productTitle?;
};

# The HTML and plain-text content for a campaign
public type CampaignContent1 record {
    # Use this template to generate the HTML content of the campaign
    TemplateContent template?;
    # The plain-text portion of the campaign. If left unspecified, we'll generate this automatically
    @jsondata:Name {value: "plain_text"}
    string plainText?;
    # Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided
    @jsondata:Name {value: "variate_contents"}
    CampaignscampaignIdcontentVariateContents[] variateContents?;
    # The raw HTML for the campaign
    string html?;
    # Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/)
    UploadArchive archive?;
    # When importing a campaign, the URL where the HTML lives
    string url?;
};

# An individual folder listed in the File Manager
public type GalleryFolder1 record {
    # The number of files in the folder
    @jsondata:Name {value: "file_count"}
    int fileCount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The date and time a file was added to the File Manager in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id for the folder
    int id?;
    # The username of the profile that created the folder
    @jsondata:Name {value: "created_by"}
    string createdBy?;
};

# The tracking options for a campaign
public type CampaignTrackingOptions record {
    # Deprecated
    SalesforceCRMTracking salesforce?;
    # Deprecated
    @jsondata:Name {value: "goal_tracking"}
    boolean goalTracking?;
    # Deprecated
    CapsuleCRMTracking capsule?;
    # The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes)
    string clicktale?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns
    @jsondata:Name {value: "text_clicks"}
    boolean textClicks?;
    # Whether to enable e-commerce tracking
    boolean ecomm360?;
    # Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns
    boolean opens?;
    # The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes)
    @jsondata:Name {value: "google_analytics"}
    string googleAnalytics?;
    # Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns
    @jsondata:Name {value: "html_clicks"}
    boolean htmlClicks?;
};

# An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account
public type ConversationMessage record {
    # A label representing the email of the sender of this message
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # Whether this message has been marked as read
    boolean read?;
    # The list's web ID
    @jsondata:Name {value: "list_id"}
    int listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A string that identifies this message's conversation
    @jsondata:Name {value: "conversation_id"}
    string conversationId?;
    # The subject of this message
    string subject?;
    # A string that uniquely identifies this message
    string id?;
    # The plain-text content of the message
    string message?;
    # A label representing the sender of this message
    @jsondata:Name {value: "from_label"}
    string fromLabel?;
    # The date and time the message was either sent or received in ISO 8601 format
    string timestamp?;
};

# An individual folder listed in the File Manager
public type GalleryFolder2 record {
    # The number of files in the folder
    @jsondata:Name {value: "file_count"}
    int fileCount?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the folder
    string name?;
    # The date and time a file was added to the File Manager in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id for the folder
    int id?;
    # The username of the profile that created the folder
    @jsondata:Name {value: "created_by"}
    string createdBy?;
};

# Represents the Queries record for the operation: putListsIdMembersId
public type PutListsIdMembersIdQueries record {
    # If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false
    @http:Query {name: "skip_merge_validation"}
    boolean skipMergeValidation?;
};

# Represents the Queries record for the operation: getAutomations
public type GetAutomationsQueries record {
    # Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_start_time"}
    string sinceStartTime?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_create_time"}
    string beforeCreateTime?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_start_time"}
    string beforeStartTime?;
    # Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_create_time"}
    string sinceCreateTime?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Restrict the results to automations with the specified status
    "save"|"paused"|"sending" status?;
};

# A list of this category's interests
public type Interests record {
    # The unique list id that the interests belong to
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The id for the interest category
    @jsondata:Name {value: "category_id"}
    string categoryId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of this category's interests
    Interest2[] interests?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Creates an account export with the given parameters
public type CreateAnAccountExport record {
    # An ISO 8601 date that will limit the export to only records created after a given time. For instance, the reports stage will contain any campaign sent after the given timestamp. Audiences, however, are excluded from this limit
    @jsondata:Name {value: "since_timestamp"}
    string sinceTimestamp?;
    # The stages of an account export to include
    @jsondata:Name {value: "include_stages"}
    ("audiences"|"campaigns"|"events"|"gallery_files"|"reports"|"templates")[] includeStages;
};

# A list of tags assigned to a list member
public type MemberTags record {
    # When is_syncing is true, automations based on the tags in the request will not fire
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # A list of tags assigned to the list member
    MemberTag[] tags;
};

# A single instance of a goal activity
public type Goal record {
    # The id for a Goal event
    @jsondata:Name {value: "goal_id"}
    int goalId?;
    # Any extra data passed with the Goal event
    string data?;
    # The date and time the user last triggered the Goal event in ISO 8601 format
    @jsondata:Name {value: "last_visited_at"}
    string lastVisitedAt?;
    # The name/type of Goal event triggered
    string event?;
};

# A collection of the store's promo codes
public type PromoCodes record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # An array of objects, each representing promo codes defined for a store
    @jsondata:Name {value: "promo_codes"}
    ECommercePromoCode3[] promoCodes?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# The outreach associated with this order. For example, an email campaign or Facebook ad
public type Outreach record {
    # A unique identifier for the outreach. Can be an email campaign ID
    string id?;
};

# A subscriber who clicked a specific URL in a specific campaign
public type ClickDetailMember record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The total number of times the subscriber clicked on the link
    int clicks?;
    # The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation
    @jsondata:Name {value: "contact_status"}
    string contactStatus?;
    # The id for the tracked URL in the campaign
    @jsondata:Name {value: "url_id"}
    string urlId?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Represents the Queries record for the operation: getReportsIdLocations
public type GetReportsIdLocationsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

public type Operations record {
    # The relative path to use for the operation
    string path;
    # The HTTP method to use for the operation
    "GET"|"POST"|"PUT"|"PATCH"|"DELETE" method;
    # An optional client-supplied id returned with the operation results
    @jsondata:Name {value: "operation_id"}
    string operationId?;
    # Any request query parameters. Example parameters: {"count":10, "offset":0}
    record {} params?;
    # A string containing the JSON body to use with the request
    string body?;
};

# An individual tweet
public type TwitterStatus record {
    # A timestamp for the tweet
    string datetime?;
    # The individual id for the tweet
    @jsondata:Name {value: "status_id"}
    string statusId?;
    # The Twitter handle for the author of the tweet
    @jsondata:Name {value: "screen_name"}
    string screenName?;
    # A 'true' or 'false' status of whether the tweet is a retweet
    @jsondata:Name {value: "is_retweet"}
    boolean isRetweet?;
    # The body of the tweet
    string status?;
};

# Represents the Queries record for the operation: getCampaignsId
public type GetCampaignsIdQueries record {
    # Return the `resend_shortcut_eligibility` field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered
    @http:Query {name: "include_resend_shortcut_eligibility"}
    boolean includeResendShortcutEligibility?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Return the `resend_shortcut_usage` field in the response.  This includes information about campaigns related by a shortcut
    @http:Query {name: "include_resend_shortcut_usage"}
    boolean includeResendShortcutUsage?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdCustomers
public type GetEcommerceStoresIdCustomersQueries record {
    # Restrict the response to customers with the email address
    @http:Query {name: "email_address"}
    string emailAddress?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Submit a response to the verification challenge and verify a domain for sending
public type VerifyADomainForSending record {
    # The code that was sent to the email address provided when adding a new domain to verify
    string code;
};

# The last 50 Goal events for a member on a specific list
public type CollectionOfMemberActivityEvents record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The last 50 Goal events triggered by a member
    Goal[] goals?;
};

public type TagSearchResultsTags record {
    # The name of the tag
    string name?;
    # The unique id for the tag
    int id?;
};

# Information about a specific product
public type ECommerceProduct3 record {
    # An array of the product's images
    ECommerceProductImage1[] images?;
    # The vendor for a product
    string vendor?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The description of a product
    string description?;
    # The handle of a product
    string 'handle?;
    # The date and time the product was published in ISO 8601 format
    @jsondata:Name {value: "published_at_foreign"}
    string publishedAtForeign?;
    # An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product
    ECommerceProductVariant1[] variants?;
    # The title of a product
    string title?;
    # The type of product
    string 'type?;
    # The URL for a product
    string url?;
};

# Information about a specific product
public type ECommerceProduct4 record {
    # An array of the product's images
    ECommerceProductImage3[] images?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The description of a product
    string description?;
    # The handle of a product
    string 'handle?;
    # Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/)
    ECommerceProductVariant3[] variants?;
    # The title of a product
    string title?;
    # The type of product
    string 'type?;
    # The currency code
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for a product
    string url?;
    # The vendor for a product
    string vendor?;
    # The date and time the product was published in ISO 8601 format
    @jsondata:Name {value: "published_at_foreign"}
    string publishedAtForeign?;
    # A unique identifier for the product
    string id?;
};

public type DailyClicksAndVisitsDataClicks record {
    string date?;
    int val?;
};

# Information about a specific product
public type ECommerceProduct1 record {
    # An array of the product's images
    ECommerceProductImage[] images?;
    # The vendor for a product
    string vendor?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The description of a product
    string description?;
    # The handle of a product
    string 'handle?;
    # The date and time the product was published
    @jsondata:Name {value: "published_at_foreign"}
    string publishedAtForeign?;
    # A unique identifier for the product
    string id;
    # An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product
    ECommerceProductVariant[] variants?;
    # The title of a product
    string title?;
    # The type of product
    string 'type?;
    # The URL for a product
    string url?;
};

# Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed
public type AddListMembers record {
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # Type of email this member asked to get ('html' or 'text')
    @jsondata:Name {value: "email_type"}
    string emailType?;
    # The date and time the subscriber confirmed their opt-in status in ISO 8601 format
    @jsondata:Name {value: "timestamp_opt"}
    string timestampOpt?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The date and time the subscriber signed up for the list in ISO 8601 format
    @jsondata:Name {value: "timestamp_signup"}
    string timestampSignup?;
    # The IP address the subscriber used to confirm their opt-in status
    @jsondata:Name {value: "ip_opt"}
    string ipOpt?;
    # If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/)
    string language?;
    # Subscriber location information
    Location location?;
    # IP address the subscriber signed up from
    @jsondata:Name {value: "ip_signup"}
    string ipSignup?;
    # The key of this object's properties is the ID of the interest in question
    record {|boolean...;|} interests?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # Subscriber's current status
    "subscribed"|"unsubscribed"|"cleaned"|"pending"|"transactional" status?;
};

# Information about a specific product
public type ECommerceProduct2 record {
    # An array of the product's images
    ECommerceProductImage3[] images?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The image URL for a product
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The description of a product
    string description?;
    # The handle of a product
    string 'handle?;
    # Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/)
    ECommerceProductVariant3[] variants?;
    # The title of a product
    string title?;
    # The type of product
    string 'type?;
    # The currency code
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The URL for a product
    string url?;
    # The vendor for a product
    string vendor?;
    # The date and time the product was published in ISO 8601 format
    @jsondata:Name {value: "published_at_foreign"}
    string publishedAtForeign?;
    # A unique identifier for the product
    string id?;
};

# Survey respondent details
public type SurveyRespondents record {
    # The date and time when the survey response was submitted in ISO 8601 format
    @jsondata:Name {value: "submitted_at"}
    string submittedAt?;
    # The ID for the survey response
    @jsondata:Name {value: "response_id"}
    string responseId?;
    # Information about the contact
    Contact contact?;
    # If this contact was added to the Mailchimp audience via this survey
    @jsondata:Name {value: "is_new_contact"}
    boolean isNewContact?;
};

# Configure a webhook for the given list
public type AddWebhook record {
    # The possible sources of any events that can trigger the webhook and whether they are enabled
    Sources sources?;
    # A valid URL for the Webhook
    string url?;
    # The events that can trigger the webhook and whether they are enabled
    Events1 events?;
};

# List Signup Forms
public type ListSignupForms record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # List signup form
    @jsondata:Name {value: "signup_forms"}
    SignupForm2[] signupForms?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getConversationsId
public type GetConversationsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Trigger settings for the Automation
public type AutomationTrigger record {
    # The type of Automation workflow. Currently only supports 'abandonedCart'
    @jsondata:Name {value: "workflow_type"}
    string workflowType;
};

# The events that can trigger the webhook and whether they are enabled
public type Events1 record {
    # Whether the webhook is triggered when a list subscriber is added
    boolean subscribe?;
    # Whether the webhook is triggered when a list member unsubscribes
    boolean unsubscribe?;
    # Whether the webhook is triggered when a subscriber's profile is updated
    boolean profile?;
    # Whether the webhook is triggered when a subscriber's email address is cleaned from the list
    boolean cleaned?;
    # Whether the webhook is triggered when a campaign is sent or cancelled
    boolean campaign?;
    # Whether the webhook is triggered when a subscriber's email address is changed
    boolean upemail?;
};

public type InlineResponse20013AudienceActivityClicks record {
    string date?;
    int clicks?;
};

# The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions
public type Conditions1 record {
    # Match type
    "any"|"all" 'match?;
    # An array of segment conditions
    record {}[][] conditions?;
};

# The events that can trigger the webhook and whether they are enabled
public type Events2 record {
    # Whether the webhook is triggered when a list subscriber is added
    boolean subscribe?;
    # Whether the webhook is triggered when a list member unsubscribes
    boolean unsubscribe?;
    # Whether the webhook is triggered when a subscriber's profile is updated
    boolean profile?;
    # Whether the webhook is triggered when a subscriber's email address is cleaned from the list
    boolean cleaned?;
    # Whether the webhook is triggered when a campaign is sent or cancelled
    boolean campaign?;
    # Whether the webhook is triggered when a subscriber's email address is changed
    boolean upemail?;
};

# The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions
public type Conditions2 record {
    # Match type
    "any"|"all" 'match?;
    # Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)
    record {}[] conditions?;
};

# A list of subscribers who were sent a specific campaign
public type SentTo record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a campaign recipient
    @jsondata:Name {value: "sent_to"}
    SentTo2[] sentTo?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
public type ListContact record {
    # The postal or zip code for the list contact
    string zip?;
    # A two-character ISO3166 country code. Defaults to US if invalid
    string country;
    # The street address for the list contact
    string address2?;
    # The city for the list contact
    string city;
    # The phone number for the list contact
    string phone?;
    # The street address for the list contact
    string address1;
    # The company name for the list
    string company;
    # The state for the list contact
    string state?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdPromorulesId
public type GetEcommerceStoresIdPromorulesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of URLs and unique IDs included in HTML and plain-text versions of a campaign
public type ClickDetailReport record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a specific URL contained in the campaign
    @jsondata:Name {value: "urls_clicked"}
    ClickDetailReport2[] urlsClicked?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Members found for given search term
public type Members record {
    @jsondata:Name {value: "full_search"}
    PartialMatches fullSearch?;
    @jsondata:Name {value: "exact_matches"}
    ExactMatches exactMatches?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

# Represents the Queries record for the operation: getAccountExportId
public type GetAccountExportIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application
public type Interest1 record {
    # The id for the interest category
    @jsondata:Name {value: "category_id"}
    string categoryId?;
    # The ID for the list that this interest belongs to
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The number of subscribers associated with this interest
    @jsondata:Name {value: "subscriber_count"}
    string subscriberCount?;
    # The name of the interest. This can be shown publicly on a subscription form
    string name?;
    # The display order for interests
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # The ID for the interest
    string id?;
};

# Options for customizing your signup form header
public type SignupFormHeaderOptions record {
    # Image height, in pixels
    @jsondata:Name {value: "image_height"}
    string imageHeight?;
    # The URL that the header image will link to
    @jsondata:Name {value: "image_link"}
    string imageLink?;
    # Image alignment
    @jsondata:Name {value: "image_align"}
    "none"|"left"|"center"|"right" imageAlign?;
    # Image border color
    @jsondata:Name {value: "image_border_color"}
    string imageBorderColor?;
    # Header image URL
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # Image border style
    @jsondata:Name {value: "image_border_style"}
    "none"|"solid"|"dotted"|"dashed"|"double"|"groove"|"outset"|"inset"|"ridge" imageBorderStyle?;
    # Alt text for the image
    @jsondata:Name {value: "image_alt"}
    string imageAlt?;
    # Header text
    string text?;
    # Image width, in pixels
    @jsondata:Name {value: "image_width"}
    string imageWidth?;
    # Image link target
    @jsondata:Name {value: "image_target"}
    "_blank"|"null" imageTarget?;
    # Image border width
    @jsondata:Name {value: "image_border_width"}
    string imageBorderWidth?;
};

# Represents the Queries record for the operation: getReportsIdClickDetailsIdMembersId
public type GetReportsIdClickDetailsIdMembersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The top email clients based on user-agent strings
public type EmailClients record {
    # An array of top email clients
    EmailClient[] clients?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: getReportsIdEepurl
public type GetReportsIdEepurlQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# An individual store in an account
public type ECommerceStore1 record {
    # Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # Details for the automations attached to this store
    Automations automations?;
    # The store address
    Address address?;
    # The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The timezone for the store
    string timezone?;
    # The primary locale for the store. For example: `en`, `de`, etc
    @jsondata:Name {value: "primary_locale"}
    string primaryLocale?;
    # The date and time the store was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The status of the list connected to the store, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The e-commerce platform of the store
    string platform?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The currency format for the store. For example: `$`, `£`, etc
    @jsondata:Name {value: "money_format"}
    string moneyFormat?;
    @jsondata:Name {value: "connected_site"}
    ConnectedSite3 connectedSite?;
    # The email address for the store
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The date and time the store was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The store phone number
    string phone?;
    # The store domain.  The store domain must be unique within a user account
    string domain?;
    # The name of the store
    string name?;
    # The unique identifier for the store
    string id?;
};

# An individual store in an account
public type ECommerceStore2 record {
    # Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # The email address for the store
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The store address
    Address address?;
    # The store phone number
    string phone?;
    # The timezone for the store
    string timezone?;
    # The store domain
    string domain?;
    # The name of the store
    string name?;
    # The primary locale for the store. For example: `en`, `de`, etc
    @jsondata:Name {value: "primary_locale"}
    string primaryLocale?;
    # The e-commerce platform of the store
    string platform?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The currency format for the store. For example: `$`, `£`, etc
    @jsondata:Name {value: "money_format"}
    string moneyFormat?;
};

# Represents the Queries record for the operation: getTemplatesId
public type GetTemplatesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# An individual store in an account
public type ECommerceStore3 record {
    # Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations)
    @jsondata:Name {value: "is_syncing"}
    boolean isSyncing?;
    # Details for the automations attached to this store
    Automations automations?;
    # The store address
    Address address?;
    # The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The timezone for the store
    string timezone?;
    # The primary locale for the store. For example: `en`, `de`, etc
    @jsondata:Name {value: "primary_locale"}
    string primaryLocale?;
    # The date and time the store was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The status of the list connected to the store, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The e-commerce platform of the store
    string platform?;
    # The three-letter ISO 4217 code for the currency that the store accepts
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
    # The currency format for the store. For example: `$`, `£`, etc
    @jsondata:Name {value: "money_format"}
    string moneyFormat?;
    @jsondata:Name {value: "connected_site"}
    ConnectedSite3 connectedSite?;
    # The email address for the store
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The date and time the store was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The store phone number
    string phone?;
    # The store domain.  The store domain must be unique within a user account
    string domain?;
    # The name of the store
    string name?;
    # The unique identifier for the store
    string id?;
};

# Represents the Queries record for the operation: getEcommerceStoresIdOrdersIdLines
public type GetEcommerceStoresIdOrdersIdLinesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A summary of the subscribers who were removed from an Automation workflow
public type RemovedSubscribers record {
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a subscriber who was removed from an Automation workflow
    SubscriberRemovedFromAutomationWorkflow1[] subscribers?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application
public type Interest2 record {
    # The id for the interest category
    @jsondata:Name {value: "category_id"}
    string categoryId?;
    # The ID for the list that this interest belongs to
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The number of subscribers associated with this interest
    @jsondata:Name {value: "subscriber_count"}
    string subscriberCount?;
    # The name of the interest. This can be shown publicly on a subscription form
    string name?;
    # The display order for interests
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # The ID for the interest
    string id?;
};

# Represents the Queries record for the operation: getListsIdClients
public type GetListsIdClientsQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Information about a specific product variant
public type ECommerceProductVariant3 record {
    # The inventory quantity of a product variant
    @jsondata:Name {value: "inventory_quantity"}
    int inventoryQuantity?;
    # The visibility of a product variant
    string visibility?;
    # The date and time the product was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The backorders of a product variant
    string backorders?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The price of a product variant
    decimal price?;
    # The image URL for a product variant
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The date and time the product was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # A unique identifier for the product variant
    string id?;
    # The title of a product variant
    string title?;
    # The stock keeping unit (SKU) of a product variant
    string sku?;
    # The URL for a product variant
    string url?;
};

public type WeeklyClicksAndVisitsDataClicks record {
    string date?;
    int val?;
};

# List settings for the campaign
public type List1 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId;
};

# The average campaign statistics for your list. This won't be present if we haven't calculated it yet for this list
public type ListStats record {
    # The average number of subscriptions per month for the list
    @jsondata:Name {value: "sub_rate"}
    decimal subRate?;
    # The average unique open rate (a percentage represented as a number between 0 and 100) per campaign for the list, excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_open_rate"}
    decimal proxyExcludedOpenRate?;
    # The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The average number of unsubscriptions per month for the list
    @jsondata:Name {value: "unsub_rate"}
    decimal unsubRate?;
    # The average unique open rate (a percentage represented as a number between 0 and 100) per campaign for the list
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# Information about a specific product variant
public type ECommerceProductVariant2 record {
    # The inventory quantity of a product variant
    @jsondata:Name {value: "inventory_quantity"}
    int inventoryQuantity?;
    # The visibility of a product variant
    string visibility?;
    # The date and time the product was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The backorders of a product variant
    string backorders?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The price of a product variant
    decimal price?;
    # The image URL for a product variant
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The date and time the product was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # A unique identifier for the product variant
    string id?;
    # The title of a product variant
    string title?;
    # The stock keeping unit (SKU) of a product variant
    string sku?;
    # The URL for a product variant
    string url?;
};

# List settings for the campaign
public type List2 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions1 segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId;
};

# Information about a specific product variant
public type ECommerceProductVariant1 record {
    # The inventory quantity of a product variant
    @jsondata:Name {value: "inventory_quantity"}
    int inventoryQuantity?;
    # The visibility of a product variant
    string visibility?;
    # The backorders of a product variant
    string backorders?;
    # The price of a product variant
    decimal price?;
    # The image URL for a product variant
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The title of a product variant
    string title?;
    # The stock keeping unit (SKU) of a product variant
    string sku?;
    # The URL for a product variant
    string url?;
};

# Information about a specific list segment
public type List3 record {
    # The name of the segment
    string name;
    # The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions
    Conditions options?;
    # An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field
    @jsondata:Name {value: "static_segment"}
    string[] staticSegment?;
};

# An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account
public type ConversationMessage1 record {
    # A label representing the email of the sender of this message
    @jsondata:Name {value: "from_email"}
    string fromEmail?;
    # Whether this message has been marked as read
    boolean read?;
    # The list's web ID
    @jsondata:Name {value: "list_id"}
    int listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A string that identifies this message's conversation
    @jsondata:Name {value: "conversation_id"}
    string conversationId?;
    # The subject of this message
    string subject?;
    # A string that uniquely identifies this message
    string id?;
    # The plain-text content of the message
    string message?;
    # A label representing the sender of this message
    @jsondata:Name {value: "from_label"}
    string fromLabel?;
    # The date and time the message was either sent or received in ISO 8601 format
    string timestamp?;
};

# Information about a specific segment
public type List4 record {
    # The date and time the segment was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the segment
    string name?;
    # The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions
    Conditions2 options?;
    # The date and time the segment was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id for the segment
    int id?;
    # The number of active subscribers currently included in the segment
    @jsondata:Name {value: "member_count"}
    int memberCount?;
    # The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs)
    "saved"|"static"|"fuzzy" 'type?;
};

# Information about a specific list segment
public type List5 record {
    # The name of the segment
    string name;
    # The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions
    Conditions1 options?;
    # An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array for an existing static segment will reset that segment and remove all members. This field cannot be provided with the `options` field
    @jsondata:Name {value: "static_segment"}
    string[] staticSegment?;
};

# List settings for the campaign
public type List6 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions1 segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML
    @jsondata:Name {value: "segment_text"}
    string segmentText?;
    # Count of the recipients on the associated list. Formatted as an integer
    @jsondata:Name {value: "recipient_count"}
    int recipientCount?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
};

# Represents the Queries record for the operation: getListsId
public type GetListsIdQueries record {
    # Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state
    @http:Query {name: "include_total_contacts"}
    boolean includeTotalContacts?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# List settings for the campaign
public type List7 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions1 segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId;
    # A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML
    @jsondata:Name {value: "segment_text"}
    string segmentText?;
    # Count of the recipients on the associated list. Formatted as an integer
    @jsondata:Name {value: "recipient_count"}
    int recipientCount?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
};

# List settings for the campaign
public type List8 record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions1 segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A description of the [segment](https://mailchimp.com/help/create-and-send-to-a-segment/) used for the campaign. Formatted as a string marked up with HTML
    @jsondata:Name {value: "segment_text"}
    string segmentText?;
    # Count of the recipients on the associated list. Formatted as an integer
    @jsondata:Name {value: "recipient_count"}
    int recipientCount?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
};

# Information about a specific segment
public type List9 record {
    # The date and time the segment was last updated in ISO 8601 format
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the segment
    string name?;
    # The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions
    Conditions2 options?;
    # The date and time the segment was created in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id for the segment
    int id?;
    # The number of active subscribers currently included in the segment
    @jsondata:Name {value: "member_count"}
    int memberCount?;
    # The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs)
    "saved"|"static"|"fuzzy" 'type?;
};

# An object describing campaign engagement on Facebook
public type FacebookLikes record {
    # The number of Facebook likes for the campaign
    @jsondata:Name {value: "facebook_likes"}
    int facebookLikes?;
    # The number of unique likes
    @jsondata:Name {value: "unique_likes"}
    int uniqueLikes?;
    # The number of recipients who liked the campaign on Facebook
    @jsondata:Name {value: "recipient_likes"}
    int recipientLikes?;
};

# Represents the Queries record for the operation: getCampaignsIdFeedback
public type GetCampaignsIdFeedbackQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Extra options for some merge field types
public type MergeFieldOptions1 record {
    # In a date or birthday field, the format of the date
    @jsondata:Name {value: "date_format"}
    string dateFormat?;
    # In a radio or dropdown non-group field, the available options for members to pick from
    string[] choices?;
    # In an address field, the default country code if none supplied
    @jsondata:Name {value: "default_country"}
    int defaultCountry?;
    # In a phone field, the phone number type: US or International
    @jsondata:Name {value: "phone_format"}
    string phoneFormat?;
};

# Extra options for some merge field types
public type MergeFieldOptions2 record {
    # In a text field, the default length of the text field
    int size?;
    # In a date or birthday field, the format of the date
    @jsondata:Name {value: "date_format"}
    string dateFormat?;
    # In a radio or dropdown non-group field, the available options for contacts to pick from
    string[] choices?;
    # In an address field, the default country code if none supplied
    @jsondata:Name {value: "default_country"}
    int defaultCountry?;
    # In a phone field, the phone number type: US or International
    @jsondata:Name {value: "phone_format"}
    string phoneFormat?;
};

# List signup form
public type SignupForm1 record {
    # The signup form's list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The signup form body content
    CollectionOfContentForListSignupForms[] contents?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Options for customizing your signup form header
    SignupFormHeaderOptions header?;
    # Signup form URL
    @jsondata:Name {value: "signup_form_url"}
    string signupFormUrl?;
    # An array of objects, each representing an element style for the signup form
    CollectionOfElementStyleForListSignupForms[] styles?;
};

# Represents the Queries record for the operation: getReportsIdOpenDetails
public type GetReportsIdOpenDetailsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns open reports sorted by the specified field
    @http:Query {name: "sort_field"}
    "opens_count" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
    # Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    string since?;
};

# List signup form
public type SignupForm2 record {
    # The signup form's list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The signup form body content
    CollectionOfContentForListSignupForms[] contents?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # Options for customizing your signup form header
    SignupFormHeaderOptions header?;
    # Signup form URL
    @jsondata:Name {value: "signup_form_url"}
    string signupFormUrl?;
    # An array of objects, each representing an element style for the signup form
    CollectionOfElementStyleForListSignupForms[] styles?;
};

public type InlineResponse20011InlineResponse20011InlineResponse20011InlineResponse20011AllOf1234 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

# Manage webhooks for batch requests
public type BatchWebhooks record {
    # An array of objects, each representing a Batch Webhook
    BatchWebhook3[] webhooks?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A collection of members who clicked on a specific link within a campaign
public type ClickDetailMembers record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a member who clicked a specific link within a campaign
    ClickDetailMember1[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

public type BatchAddremoveListMembersTofromStaticSegmentErrors record {
    # Email addresses added to the static segment or removed
    @jsondata:Name {value: "email_addresses"}
    string[] emailAddresses?;
    # The error message indicating why the email addresses could not be added or updated
    string 'error?;
};

public type ABTestOptions1Combinations record {
    # The index of `variate_settings.subject_lines` used
    @jsondata:Name {value: "subject_line"}
    int subjectLine?;
    # The index of `variate_settings.send_times` used
    @jsondata:Name {value: "send_time"}
    int sendTime?;
    # The index of `variate_settings.reply_to_addresses` used
    @jsondata:Name {value: "reply_to"}
    int replyTo?;
    # The number of recipients for this combination
    int recipients?;
    # Unique ID for the combination
    string id?;
    # The index of `variate_settings.from_names` used
    @jsondata:Name {value: "from_name"}
    int fromName?;
    # The index of `variate_settings.contents` used
    @jsondata:Name {value: "content_description"}
    int contentDescription?;
};

# Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/)
public type UploadArchive record {
    # The base64-encoded representation of the archive file
    @jsondata:Name {value: "archive_content"}
    string archiveContent;
    # The type of encoded file. Defaults to zip
    @jsondata:Name {value: "archive_type"}
    "zip"|"tar.gz"|"tar.bz2"|"tar"|"tgz"|"tbz" archiveType?;
};

public type InlineResponse20011AudienceEmailSource record {
    # Email source name
    string name?;
    # Segment type if this source is tied to a segment
    @jsondata:Name {value: "segment_type"}
    string segmentType?;
    # Associated list name to the source
    @jsondata:Name {value: "list_name"}
    string listName?;
    # Type of the email source
    string 'type?;
    # Is the source reference a segment
    @jsondata:Name {value: "is_segment"}
    boolean isSegment?;
};

# The verified domains currently on the account
public type VerifiedDomains record {
    # Whether domain authentication is enabled for this domain
    boolean authenticated?;
    # Returns whether the domain used is a public / free email provider. See [Limitations of Free Email Addresses](https://mailchimp.com/help/limitations-of-free-email-addresses/) for more details
    @jsondata:Name {value: "is_free_email_provider"}
    boolean isFreeEmailProvider?;
    # The name of this domain
    string domain?;
    # Whether the domain has been verified for sending
    boolean verified?;
    # The e-mail address receiving the two-factor challenge for this domain
    @jsondata:Name {value: "verification_email"}
    string verificationEmail?;
    # The date/time that the two-factor challenge was sent to the verification email
    @jsondata:Name {value: "verification_sent"}
    string verificationSent?;
    # The Domain's current status
    "VERIFICATION_IN_PROGRESS"|"VERIFIED"|"EXPIRED"|"ERROR"|"AUTHENTICATION_IN_PROGRESS"|"AUTHENTICATION_ERROR"|"AUTHENTICATED" status?;
};

public type Tag record {
    # The name of the tag
    @jsondata:Name {value: "tag_name"}
    string tagName?;
    # The unique id for the tag
    @jsondata:Name {value: "tag_id"}
    int tagId?;
};

# A subscriber's status for a specific campaign
public type SentTo1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The number of times a campaign was opened by this member
    @jsondata:Name {value: "open_count"}
    int openCount?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The date and time of the last open for this member in ISO 8601 format
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # For A/B Split Campaigns, the group the member was apart of
    @jsondata:Name {value: "absplit_group"}
    "a"|"b"|"winner" absplitGroup?;
    # For campaigns sent with timewarp, the time zone group the member is apart of
    @jsondata:Name {value: "gmt_offset"}
    int gmtOffset?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/)
    "sent"|"hard"|"soft" status?;
};

# A subscriber's status for a specific campaign
public type SentTo2 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure
    @jsondata:Name {value: "merge_fields"}
    record {|record {}...;|} mergeFields?;
    # The number of times a campaign was opened by this member
    @jsondata:Name {value: "open_count"}
    int openCount?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The date and time of the last open for this member in ISO 8601 format
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # For A/B Split Campaigns, the group the member was apart of
    @jsondata:Name {value: "absplit_group"}
    "a"|"b"|"winner" absplitGroup?;
    # For campaigns sent with timewarp, the time zone group the member is apart of
    @jsondata:Name {value: "gmt_offset"}
    int gmtOffset?;
    # [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber
    boolean vip?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The status of the email delivered to this subscriber. `hard` and `soft` refer to different [bounce types](https://mailchimp.com/help/soft-vs-hard-bounces/)
    "sent"|"hard"|"soft" status?;
};

# A summary of an individual landing page's settings and content
public type LandingPage3 record {
    # The ID of the store associated with this landing page
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # Created by mobile or web
    @jsondata:Name {value: "created_by_source"}
    string createdBySource?;
    # The list's ID associated with this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The description of this landing page
    string description?;
    # The time this landing page was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The ID used in the Mailchimp web application
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The title of this landing page seen in the browser's title bar
    string title?;
    # The tracking settings applied to this landing page
    TrackingSettings tracking?;
    # The url of the published landing page
    string url?;
    # The time this landing page was updated at
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The name of this landing page
    string name?;
    # The template_id of this landing page
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # A string that uniquely identifies this landing page
    string id?;
    # The time this landing page was published
    @jsondata:Name {value: "published_at"}
    string publishedAt?;
    # The status of this landing page
    "published"|"unpublished"|"draft" status?;
    # The time this landing page was unpublished
    @jsondata:Name {value: "unpublished_at"}
    string unpublishedAt?;
};

public type InlineResponse2009Products record {
    @jsondata:Name {value: "total_purchased"}
    decimal totalPurchased?;
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    @jsondata:Name {value: "recommendation_purchased"}
    int recommendationPurchased?;
    @jsondata:Name {value: "recommendation_total"}
    int recommendationTotal?;
    string title?;
    string sku?;
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# A summary of an individual page's properties
public type LandingPage2 record {
    # The ID of the store associated with this landing page
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # The list's ID associated with this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # The name of this landing page
    string name?;
    # The description of this landing page
    string description?;
    # The title of this landing page seen in the browser's title bar
    string title?;
    # The tracking settings applied to this landing page
    TrackingSettings tracking?;
};

public type FacebookAdsFacebookAdsFacebookAdsAllOf1123 record {
    # Audience settings
    InlineResponse20011Audience audience?;
    # Channel settings
    InlineResponse20011Channel channel?;
    @jsondata:Name {value: "audience_activity"}
    InlineResponse20013AudienceActivity audienceActivity?;
    InlineResponse20011Budget budget?;
    @jsondata:Name {value: "report_summary"}
    InlineResponse20013ReportSummary reportSummary?;
};

# A summary of an individual landing page's settings and content
public type LandingPage1 record {
    # The ID of the store associated with this landing page
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # Created by mobile or web
    @jsondata:Name {value: "created_by_source"}
    string createdBySource?;
    # The list's ID associated with this landing page
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The description of this landing page
    string description?;
    # The time this landing page was created
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The ID used in the Mailchimp web application
    @jsondata:Name {value: "web_id"}
    int webId?;
    # The title of this landing page seen in the browser's title bar
    string title?;
    # The tracking settings applied to this landing page
    TrackingSettings tracking?;
    # The url of the published landing page
    string url?;
    # The time this landing page was updated at
    @jsondata:Name {value: "updated_at"}
    string updatedAt?;
    # The name of this landing page
    string name?;
    # The template_id of this landing page
    @jsondata:Name {value: "template_id"}
    int templateId?;
    # A string that uniquely identifies this landing page
    string id?;
    # The time this landing page was published
    @jsondata:Name {value: "published_at"}
    string publishedAt?;
    # The status of this landing page
    "published"|"unpublished"|"draft" status?;
    # The time this landing page was unpublished
    @jsondata:Name {value: "unpublished_at"}
    string unpublishedAt?;
};

# E-Commerce stats for a campaign
public type ECommerceReport record {
    # The total spent for a campaign. Calculated as the sum of all order totals with no deductions
    @jsondata:Name {value: "total_spent"}
    decimal totalSpent?;
    # The total revenue for a campaign. Calculated as the sum of all order totals minus shipping and tax totals
    @jsondata:Name {value: "total_revenue"}
    decimal totalRevenue?;
    # The total orders for a campaign
    @jsondata:Name {value: "total_orders"}
    int totalOrders?;
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# High level audience information for who the outreach targets
public type Recipients record {
    @jsondata:Name {value: "segment_opts"}
    SegmentOptions1 segmentOpts?;
    # The unique list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A description of the [segment](https://mailchimp.com/help/save-and-manage-segments/) used for the campaign. Formatted as a string marked up with HTML
    @jsondata:Name {value: "segment_text"}
    string segmentText?;
    # Count of the recipients on the associated list. Formatted as an integer
    @jsondata:Name {value: "recipient_count"}
    int recipientCount?;
    # The name of the list
    @jsondata:Name {value: "list_name"}
    string listName?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
};

public type WeeklyClicksAndVisitsDataVisits record {
    string date?;
    int val?;
};

# Represents the Queries record for the operation: getTemplateFolders
public type GetTemplateFoldersQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Updates on campaigns in the process of sending
public type CampaignDeliveryStatus record {
    # The total number of emails confirmed sent for this campaign so far
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # Whether a campaign send can be canceled
    @jsondata:Name {value: "can_cancel"}
    boolean canCancel?;
    # The total number of emails canceled for this campaign
    @jsondata:Name {value: "emails_canceled"}
    int emailsCanceled?;
    # Whether Campaign Delivery Status is enabled for this account and campaign
    boolean enabled?;
    # The current state of a campaign delivery
    "delivering"|"delivered"|"canceling"|"canceled" status?;
};

# An individual file listed in the File Manager
public type GalleryFile1 record {
    # The url of the full-size file
    @jsondata:Name {value: "full_size_url"}
    string fullSizeUrl?;
    # The size of the file in bytes
    int size?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the file
    string name?;
    # The width of the image
    int width?;
    # The date and time a file was added to the File Manager in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id of the file
    int id?;
    # The id of the folder
    @jsondata:Name {value: "folder_id"}
    int folderId?;
    # The type of file in the File Manager
    "image"|"file" 'type?;
    # The url of the thumbnail preview
    @jsondata:Name {value: "thumbnail_url"}
    string thumbnailUrl?;
    # The username of the profile that uploaded the file
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # The height of an image
    int height?;
};

# Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application
public type InterestCategory1 record {
    # The unique list id for the category
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The order that the categories are displayed in the list. Lower numbers display first
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # The id for the interest category
    string id?;
    # The text description of this category. This field appears on signup forms and is often phrased as a question
    string title?;
    # Determines how this category’s interests appear on signup forms
    "checkboxes"|"dropdown"|"radio"|"hidden" 'type?;
};

# Represents the Queries record for the operation: getCampaignFolders
public type GetCampaignFoldersQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# An individual file listed in the File Manager
public type GalleryFile2 record {
    # The name of the file
    string name?;
    # The id of the folder. Setting `folder_id` to `0` will remove a file from its current folder
    @jsondata:Name {value: "folder_id"}
    int folderId?;
};

# Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application
public type InterestCategory2 record {
    # The unique list id for the category
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The order that the categories are displayed in the list. Lower numbers display first
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # The id for the interest category
    string id?;
    # The text description of this category. This field appears on signup forms and is often phrased as a question
    string title?;
    # Determines how this category’s interests appear on signup forms
    "checkboxes"|"dropdown"|"radio"|"hidden" 'type?;
};

# [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign
public type ABTestingOptions record {
    # How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'
    @jsondata:Name {value: "pick_winner"}
    "opens"|"clicks"|"manual" pickWinner?;
    # The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent
    @jsondata:Name {value: "wait_time"}
    int waitTime?;
    # How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent
    @jsondata:Name {value: "wait_units"}
    "hours"|"days" waitUnits?;
    # For campaigns split on 'Subject Line', the subject line for Group B
    @jsondata:Name {value: "subject_b"}
    string subjectB?;
    # For campaigns split on 'Subject Line', the subject line for Group A
    @jsondata:Name {value: "subject_a"}
    string subjectA?;
    # The type of AB split to run
    @jsondata:Name {value: "split_test"}
    "subject"|"from_name"|"schedule" splitTest?;
    # For campaigns split on 'From Name', the name for Group A
    @jsondata:Name {value: "from_name_a"}
    string fromNameA?;
    # For campaigns split on 'From Name', the name for Group B
    @jsondata:Name {value: "from_name_b"}
    string fromNameB?;
    # The send time for the winning version
    @jsondata:Name {value: "send_time_winner"}
    string sendTimeWinner?;
    # For campaigns split on 'From Name', the reply-to address for Group B
    @jsondata:Name {value: "reply_email_b"}
    string replyEmailB?;
    # For campaigns split on 'From Name', the reply-to address for Group A
    @jsondata:Name {value: "reply_email_a"}
    string replyEmailA?;
    # The send time for Group A
    @jsondata:Name {value: "send_time_a"}
    string sendTimeA?;
    # The send time for Group B
    @jsondata:Name {value: "send_time_b"}
    string sendTimeB?;
    # The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50
    @jsondata:Name {value: "split_size"}
    int splitSize?;
};

# An individual file listed in the File Manager
public type GalleryFile3 record {
    # The url of the full-size file
    @jsondata:Name {value: "full_size_url"}
    string fullSizeUrl?;
    # The size of the file in bytes
    int size?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the file
    string name?;
    # The width of the image
    int width?;
    # The date and time a file was added to the File Manager in ISO 8601 format
    @jsondata:Name {value: "created_at"}
    string createdAt?;
    # The unique id of the file
    int id?;
    # The id of the folder
    @jsondata:Name {value: "folder_id"}
    int folderId?;
    # The type of file in the File Manager
    "image"|"file" 'type?;
    # The url of the thumbnail preview
    @jsondata:Name {value: "thumbnail_url"}
    string thumbnailUrl?;
    # The username of the profile that uploaded the file
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # The height of an image
    int height?;
};

# Represents the Queries record for the operation: getFileManagerFoldersFiles
public type GetFileManagerFoldersFilesQueries record {
    # Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_created_at"}
    string beforeCreatedAt?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # Returns files sorted by the specified field
    @http:Query {name: "sort_field"}
    "added_date"|"name"|"size" sortField?;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_created_at"}
    string sinceCreatedAt?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The file type for the File Manager file
    string 'type?;
    # The Mailchimp account user who created the File Manager file
    @http:Query {name: "created_by"}
    string createdBy?;
    # Determines the order direction for sorted results
    @http:Query {name: "sort_dir"}
    "ASC"|"DESC" sortDir?;
};

# This object represents a link from the resource where it is found to another resource or action that may be performed
public type ResourceLink record {
    # For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to
    string schema?;
    # For GETs, this is a URL representing the schema that the response should conform to
    string targetSchema?;
    # The HTTP method that should be used when accessing the URL defined in 'href'
    "GET"|"POST"|"PUT"|"PATCH"|"DELETE"|"OPTIONS"|"HEAD" method?;
    # As with an HTML 'rel' attribute, this describes the type of link
    string rel?;
    # This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action
    string href?;
};

# An object representing all segmentation options. This object should contain a `saved_segment_id` to use an existing segment, or you can create a new segment by including both `match` and `conditions` options
public type SegmentOptions record {
    # Segment match type
    "any"|"all" 'match?;
    # The id for an existing saved segment
    @jsondata:Name {value: "saved_segment_id"}
    int savedSegmentId?;
    # Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas)
    record {}[] conditions?;
};

# Collection of Content for List Signup Forms
public type CollectionOfContentForListSignupForms record {
    # The content section name
    "signup_message"|"unsub_message"|"signup_thank_you_title" section?;
    # The content section text
    string value?;
};

public type FacebookAdsFacebookAdsFacebookAdsFacebookAdsAllOf11234 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

public type InlineResponse20013ReportSummaryExtendedAt record {
    string datetime?;
    string timezone?;
};

public type ActionsScheduleBody record {
    # The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45)
    @jsondata:Name {value: "schedule_time"}
    string scheduleTime;
    @jsondata:Name {value: "batch_delivery"}
    BatchDelivery batchDelivery?;
    # Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/)
    boolean timewarp?;
};

# Represents the Queries record for the operation: getListsIdMembersId
public type GetListsIdMembersIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

public type InlineResponse20013InlineResponse20013InlineResponse20013InlineResponse20013AllOf1234 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
};

# Represents the Queries record for the operation: getReportsIdSubReportsId
public type GetReportsIdSubReportsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# The script used to connect your site with Mailchimp
public type Script record {
    # A pre-built script that you can copy-and-paste into your site to integrate it with Mailchimp
    string fragment?;
    # The URL used for any integrations that offer built-in support for connected sites
    string url?;
};

# A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience
public type MergeField record {
    # Whether the merge field is displayed on the signup form
    boolean 'public?;
    # The name of the merge field (audience field)
    string name;
    # The order that the merge field displays on the list signup form
    @jsondata:Name {value: "display_order"}
    int displayOrder?;
    # Extra options for some merge field types
    MergeFieldOptions options?;
    # The default value for the merge field if `null`
    @jsondata:Name {value: "default_value"}
    string defaultValue?;
    # The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts)
    string tag?;
    # The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field
    "text"|"number"|"address"|"phone"|"date"|"url"|"imageurl"|"radio"|"dropdown"|"birthday"|"zip" 'type;
    # Whether the merge field is required to import a contact
    boolean required?;
    # Extra text to help the subscriber fill out the form
    @jsondata:Name {value: "help_text"}
    string helpText?;
};

# Determines if the campaign qualifies for the Campaign Resend Shortcuts. Only included when query parameter `include_resend_shortcuts` is `true`
public type ResendShortcutEligibility record {
    @jsondata:Name {value: "to_non_openers"}
    ToNonOpeners toNonOpeners?;
    @jsondata:Name {value: "to_new_subscribers"}
    ToNewSubscribers toNewSubscribers?;
    @jsondata:Name {value: "to_non_purchasers"}
    ToNonPurchasers toNonPurchasers?;
    @jsondata:Name {value: "to_non_clickers"}
    ToNonClickers toNonClickers?;
};

# Represents the Queries record for the operation: getReportsIdClickDetailsId
public type GetReportsIdClickDetailsIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# A list of a member's subscriber activity in a specific campaign, including opens, clicks, and bounces
public type EmailActivity1 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign
    MemberActivity[] activity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# A list of a member's subscriber activity in a specific campaign, including opens, clicks, and bounces
public type EmailActivity2 record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # Email address for a subscriber
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # The unique id for the list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # An array of objects, each showing an interaction with the email. Member activity limited to 1,000 open activities and 1,000 click activities per member per campaign
    MemberActivity[] activity?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The status of the list used, namely if it's deleted or disabled
    @jsondata:Name {value: "list_is_active"}
    boolean listIsActive?;
    # The unique id for the campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# Represents the Queries record for the operation: getBatches
public type GetBatchesQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

public type FacebookAdsFacebookAdsAllOf112 record {
    @jsondata:Name {value: "email_source_name"}
    string emailSourceName?;
    # The date and time the ad was paused in ISO 8601 format
    @jsondata:Name {value: "paused_at"}
    string pausedAt?;
    # The date and time the ad was ended in ISO 8601 format
    @jsondata:Name {value: "end_time"}
    string endTime?;
    # If the ad has a problem and needs attention
    @jsondata:Name {value: "needs_attention"}
    boolean needsAttention?;
    @jsondata:Name {value: "was_canceled_by_facebook"}
    boolean wasCanceledByFacebook?;
};

# Represents the Queries record for the operation: getAuthorizedApps
public type GetAuthorizedAppsQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Manage webhooks for a specific list
public type ListWebhooks record {
    # The list id
    @jsondata:Name {value: "list_id"}
    string listId?;
    # An array of objects, each representing a specific list member
    ListWebhooks2[] webhooks?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# A collection of the store's customers
public type Customers record {
    # The store id
    @jsondata:Name {value: "store_id"}
    string storeId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a customer of a store
    ECommerceCustomer6[] customers?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20013InlineResponse20013AllOf12 record {
    @jsondata:Name {value: "email_source_name"}
    string emailSourceName?;
    # The date and time the ad was paused in ISO 8601 format
    @jsondata:Name {value: "paused_at"}
    string pausedAt?;
    # The date and time the ad was ended in ISO 8601 format
    @jsondata:Name {value: "end_time"}
    string endTime?;
    # If the ad has a problem and needs attention
    @jsondata:Name {value: "needs_attention"}
    boolean needsAttention?;
    @jsondata:Name {value: "was_canceled_by_facebook"}
    boolean wasCanceledByFacebook?;
};

# The delay settings for an Automation email
public type AutomationDelay1 record {
    # The delay amount for an Automation email
    int amount?;
    # The user-friendly description of the delay and trigger action settings for an Automation email
    @jsondata:Name {value: "full_description"}
    string fullDescription?;
    # The user-friendly description of the action that triggers an Automation email
    @jsondata:Name {value: "action_description"}
    string actionDescription?;
    # The action that triggers the delay of an Automation email
    "previous_campaign_sent"|"previous_campaign_opened"|"previous_campaign_not_opened"|"previous_campaign_clicked_any"|"previous_campaign_not_clicked_any"|"previous_campaign_specific_clicked"|"ecomm_bought_any"|"ecomm_bought_product"|"ecomm_bought_category"|"ecomm_not_bought_any"|"ecomm_abandoned_cart"|"campaign_sent"|"opened_email"|"not_opened_email"|"clicked_email"|"not_clicked_email"|"campaign_specific_clicked"|"manual"|"signup"|"merge_changed"|"group_add"|"group_remove"|"mandrill_sent"|"mandrill_opened"|"mandrill_clicked"|"mandrill_any"|"api"|"goal"|"annual"|"birthday"|"date"|"date_added"|"tag_add" action?;
    # The type of delay for an Automation email
    "now"|"day"|"hour"|"week" 'type?;
    # Whether the delay settings describe before or after the delay action of an Automation email
    "before"|"after" direction?;
};

public type Orders1Promos record {
    # The Promo Code
    string code?;
    # The amount of discount applied on the total price. For example if the total cost was $100 and the customer paid $95.5, amount_discounted will be 4.5 For free shipping set amount_discounted to 0
    @jsondata:Name {value: "amount_discounted"}
    decimal amountDiscounted?;
    # Type of discount. For free shipping set type to fixed
    "fixed"|"percentage" 'type?;
};

public type CampaignscampaignIdcontentVariateContents record {
    # The label used to identify the content option
    @jsondata:Name {value: "content_label"}
    string contentLabel;
    # Use this template to generate the HTML content for the campaign
    TemplateContent1 template?;
    # The plain-text portion of the campaign. If left unspecified, we'll generate this automatically
    @jsondata:Name {value: "plain_text"}
    string plainText?;
    # The raw HTML for the campaign
    string html?;
    # Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/)
    UploadArchive archive?;
    # When importing a campaign, the URL for the HTML
    string url?;
};

# [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign
public type RSSOptions1 record {
    # The schedule for sending the RSS Campaign
    SendingSchedule schedule?;
    # Whether to add CSS to images in the RSS feed to constrain their width in campaigns
    @jsondata:Name {value: "constrain_rss_img"}
    boolean constrainRssImg?;
    # The URL for the RSS feed
    @jsondata:Name {value: "feed_url"}
    string feedUrl;
    # The frequency of the RSS Campaign
    "daily"|"weekly"|"monthly" frequency;
};

# Represents the Queries record for the operation: getFileManagerFolders
public type GetFileManagerFoldersQueries record {
    # Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "before_created_at"}
    string beforeCreatedAt?;
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00
    @http:Query {name: "since_created_at"}
    string sinceCreatedAt?;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
    # The Mailchimp account user who created the File Manager file
    @http:Query {name: "created_by"}
    string createdBy?;
};

public type InlineResponse20011Budget record {
    # Duration of the ad in seconds
    int duration?;
    # Total budget of the ad
    @jsondata:Name {value: "total_amount"}
    decimal totalAmount?;
    # Currency code
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# Represents the Queries record for the operation: getListsIdAbuseReportsId
public type GetListsIdAbuseReportsIdQueries record {
    # Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0
    int offset = 0;
    # The number of records to return. Default value is 10. Maximum value is 1000
    @constraint:Int {maxValue: 1000}
    int count = 10;
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# Batch add/remove List members to/from static segment
public type BatchAddremoveListMembersTofromStaticSegment record {
    # An array of objects, each representing an existing list member that got deleted from the static segment
    @jsondata:Name {value: "members_removed"}
    ListMembers5[] membersRemoved?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "total_added"}
    int totalAdded?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a new member that was added to the static segment
    @jsondata:Name {value: "members_added"}
    ListMembers5[] membersAdded?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "total_removed"}
    int totalRemoved?;
    # The total number of items matching the query, irrespective of pagination
    @jsondata:Name {value: "error_count"}
    int errorCount?;
    # An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details
    BatchAddremoveListMembersTofromStaticSegmentErrors[] errors?;
};

# [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign
public type RSSOptions3 record {
    # The schedule for sending the RSS Campaign
    SendingSchedule schedule?;
    # The date the campaign was last sent
    @jsondata:Name {value: "last_sent"}
    string lastSent?;
    # Whether to add CSS to images in the RSS feed to constrain their width in campaigns
    @jsondata:Name {value: "constrain_rss_img"}
    boolean constrainRssImg?;
    # The URL for the RSS feed
    @jsondata:Name {value: "feed_url"}
    string feedUrl?;
    # The frequency of the RSS Campaign
    "daily"|"weekly"|"monthly" frequency?;
};

# [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options for a campaign
public type RSSOptions2 record {
    # The schedule for sending the RSS Campaign
    SendingSchedule1 schedule?;
    # The date the campaign was last sent
    @jsondata:Name {value: "last_sent"}
    string lastSent?;
    # Whether to add CSS to images in the RSS feed to constrain their width in campaigns
    @jsondata:Name {value: "constrain_rss_img"}
    boolean constrainRssImg?;
    # The URL for the RSS feed
    @jsondata:Name {value: "feed_url"}
    string feedUrl;
    # The frequency of the RSS Campaign
    "daily"|"weekly"|"monthly" frequency;
};

# Represents the Queries record for the operation: getFileManagerFilesId
public type GetFileManagerFilesIdQueries record {
    # A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation
    string[] fields?;
    # A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation
    @http:Query {name: "exclude_fields"}
    string[] excludeFields?;
};

# An object describing the open activity for the campaign
public type Opens record {
    # The total number of opens for a campaign, excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_opens"}
    int proxyExcludedOpens?;
    # The total number of opens for a campaign
    @jsondata:Name {value: "opens_total"}
    int opensTotal?;
    # The average unique open rate for a campaign, excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_open_rate"}
    decimal proxyExcludedOpenRate?;
    # The total number of unique opens for a campaign, excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_unique_opens"}
    int proxyExcludedUniqueOpens?;
    # The date and time of the last recorded open in ISO 8601 format
    @jsondata:Name {value: "last_open"}
    string lastOpen?;
    # The total number of unique opens for a campaign
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of unique opens for a campaign divided by the total number of successful deliveries
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# A list of tags assigned to a list member
public type CollectionOfTags record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # A list of tags assigned to the list member
    CollectionOfTagsTags[] tags?;
};

# Information about subscribers in a Customer Journey's audience
public type SubscriberInCustomerJourneysAudience record {
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress;
};

public type InlineResponse20013ReportSummaryAverageOrderAmount record {
    decimal amount?;
    @jsondata:Name {value: "currency_code"}
    string currencyCode?;
};

# A Chimp Chatter message
public type ChimpChatter record {
    # The date and time this activity was updated
    @jsondata:Name {value: "update_time"}
    string updateTime?;
    # If it exists, list ID for the associated list
    @jsondata:Name {value: "list_id"}
    string listId?;
    string title?;
    string message?;
    # The type of activity
    "lists:new-subscriber"|"lists:unsubscribes"|"lists:profile-updates"|"campaigns:facebook-likes"|"campaigns:forward-to-friend"|"lists:imports" 'type?;
    # URL to a report that includes this activity
    string url?;
    # If it exists, campaign ID for the associated campaign
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
};

# An authorized app
public type InlineResponse2003Apps record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The name of the application
    string name?;
    # A short description of the application
    string description?;
    # The ID for the application
    int id?;
    # An array of usernames for users who have linked the app
    string[] users?;
};

# A summary of the interaction with the campaign
public type MemberActivity record {
    # The IP address recorded for the action
    string ip?;
    # One of the following actions: 'open', 'click', or 'bounce'
    string action?;
    # If the action is a 'bounce', the type of bounce received: 'hard', 'soft'
    string 'type?;
    # If the action is a 'click', the URL on which the member clicked
    string url?;
    # The date and time recorded for the action in ISO 8601 format
    string timestamp?;
};

# Open and click rates for this subscriber
public type SubscriberStats1 record {
    @jsondata:Name {value: "ecommerce_data"}
    EcommerceStats ecommerceData?;
    # A subscriber's average clickthrough rate
    @jsondata:Name {value: "avg_click_rate"}
    decimal avgClickRate?;
    # A subscriber's average open rate
    @jsondata:Name {value: "avg_open_rate"}
    decimal avgOpenRate?;
};

# Information about a specific template
public type TemplateInstance1 record {
    # If available, the URL for a thumbnail of the template
    string thumbnail?;
    # The date and time the template was edited in ISO 8601 format
    @jsondata:Name {value: "date_edited"}
    string dateEdited?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the template was created in ISO 8601 format
    @jsondata:Name {value: "date_created"}
    string dateCreated?;
    # User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active
    boolean active?;
    # The type of template (user, base, or gallery)
    string 'type?;
    # The login name for template's creator
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # Whether the template uses the drag and drop editor
    @jsondata:Name {value: "drag_and_drop"}
    boolean dragAndDrop?;
    # How the template's content is put together
    @jsondata:Name {value: "content_type"}
    "template"|"multichannel"|"html" contentType?;
    # The URL used for [template sharing](https://mailchimp.com/help/share-a-template/)
    @jsondata:Name {value: "share_url"}
    string shareUrl?;
    # Whether the template contains media queries to make it responsive
    boolean responsive?;
    # The name of the template
    string name?;
    # The individual id for the template
    int id?;
    # If available, the category the template is listed in
    string category?;
    # The id of the folder the template is currently in
    @jsondata:Name {value: "folder_id"}
    string folderId?;
    # The login name who last edited the template
    @jsondata:Name {value: "edited_by"}
    string editedBy?;
};

# Information about a specific template
public type TemplateInstance2 record {
    # If available, the URL for a thumbnail of the template
    string thumbnail?;
    # The date and time the template was edited in ISO 8601 format
    @jsondata:Name {value: "date_edited"}
    string dateEdited?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The date and time the template was created in ISO 8601 format
    @jsondata:Name {value: "date_created"}
    string dateCreated?;
    # User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active
    boolean active?;
    # The type of template (user, base, or gallery)
    string 'type?;
    # The login name for template's creator
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # Whether the template uses the drag and drop editor
    @jsondata:Name {value: "drag_and_drop"}
    boolean dragAndDrop?;
    # How the template's content is put together
    @jsondata:Name {value: "content_type"}
    "template"|"multichannel"|"html" contentType?;
    # The URL used for [template sharing](https://mailchimp.com/help/share-a-template/)
    @jsondata:Name {value: "share_url"}
    string shareUrl?;
    # Whether the template contains media queries to make it responsive
    boolean responsive?;
    # The name of the template
    string name?;
    # The individual id for the template
    int id?;
    # If available, the category the template is listed in
    string category?;
    # The id of the folder the template is currently in
    @jsondata:Name {value: "folder_id"}
    string folderId?;
    # The login name who last edited the template
    @jsondata:Name {value: "edited_by"}
    string editedBy?;
};

# A collection of events for a given contact
public type CollectionOfEvents record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # An array of objects, each representing an event
    Event[] events?;
};

# A summary of a subscriber removed from an Automation workflow
public type SubscriberRemovedFromAutomationWorkflow1 record {
    # A string that uniquely identifies an Automation workflow
    @jsondata:Name {value: "workflow_id"}
    string workflowId?;
    # The list member's email address
    @jsondata:Name {value: "email_address"}
    string emailAddress?;
    # A string that uniquely identifies a list
    @jsondata:Name {value: "list_id"}
    string listId?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The MD5 hash of the lowercase version of the list member's email address
    string id?;
};

# A summary of Twitter activity for a campaign
public type TwitterStats record {
    # The day and time of the last recorded tweet with a link to the campaign
    @jsondata:Name {value: "last_tweet"}
    string lastTweet?;
    # A summary of tweets that include a link to the campaign
    TwitterStatus[] statuses?;
    # The day and time of the first recorded tweet with a link to the campaign
    @jsondata:Name {value: "first_tweet"}
    string firstTweet?;
    # The number of tweets including a link to the campaign
    int tweets?;
    # The number of retweets that include a link to the campaign
    int retweets?;
};

# Information about a specific list
public type SubscriberList record {
    # The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_subscribe"}
    string notifyOnSubscribe = "false";
    # Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup
    @jsondata:Name {value: "email_type_option"}
    boolean emailTypeOption;
    # Whether or not the list has marketing permissions (eg. GDPR) enabled
    @jsondata:Name {value: "marketing_permissions"}
    boolean marketingPermissions = false;
    # The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list
    @jsondata:Name {value: "permission_reminder"}
    string permissionReminder;
    # Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default
    @jsondata:Name {value: "use_archive_bar"}
    boolean useArchiveBar = false;
    # The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to
    @jsondata:Name {value: "notify_on_unsubscribe"}
    string notifyOnUnsubscribe = "false";
    # [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws
    ListContact contact;
    # The name of the list
    string name;
    # Whether or not to require the subscriber to confirm subscription via email
    @jsondata:Name {value: "double_optin"}
    boolean doubleOptin = false;
    @jsondata:Name {value: "campaign_defaults"}
    CampaignDefaults campaignDefaults;
};

# Information about a specific cart line item
public type ECommerceCartLineItem record {
    # The quantity of a cart line item
    int quantity;
    # The price of a cart line item
    decimal price;
    # A unique identifier for the product associated with the cart line item
    @jsondata:Name {value: "product_id"}
    string productId;
    # A unique identifier for the cart line item
    string id;
    # A unique identifier for the product variant associated with the cart line item
    @jsondata:Name {value: "product_variant_id"}
    string productVariantId;
};

# Information about the contact
public type Contact record {
    # The MD5 hash of the lowercase version of the list member's email address
    @jsondata:Name {value: "email_id"}
    string emailId?;
    # The contact's full name
    @jsondata:Name {value: "full_name"}
    string fullName?;
    # URL for the contact's avatar or profile image
    @jsondata:Name {value: "avatar_url"}
    string avatarUrl?;
    # The contact's sms phone number
    string phone?;
    # The ID of this contact
    @jsondata:Name {value: "contact_id"}
    string contactId?;
    # The contact's email address
    string email?;
    # The contact's current status
    "Subscribed"|"Unsubscribed"|"Non-Subscribed"|"Cleaned"|"Archived" status?;
    # Indicates whether a contact consents to 1:1 messaging
    @jsondata:Name {value: "consents_to_one_to_one_messaging"}
    boolean consentsToOneToOneMessaging?;
};

# Information about campaigns related through shortcuts
public type ResendShortcutUsage record {
    @jsondata:Name {value: "original_campaign"}
    OriginalCampaign originalCampaign?;
    # Campaigns that were created from Campaign Resend Shortcuts for this campaign
    @jsondata:Name {value: "shortcut_campaigns"}
    ResendShortcutUsageShortcutCampaigns[] shortcutCampaigns?;
};

# A single question and the response to that question
public type Response record {
    # The answer to this survey question
    string answer?;
    # The type of question this is
    @jsondata:Name {value: "question_type"}
    "pickOne"|"pickMany"|"range"|"text"|"email" questionType?;
    # The survey question
    string query?;
    # The unique ID for this question
    @jsondata:Name {value: "question_id"}
    string questionId?;
};

# Open and click rates for this subscriber
public type SubscriberStats record {
    # A subscriber's average clickthrough rate
    @jsondata:Name {value: "avg_click_rate"}
    decimal avgClickRate?;
    # A subscriber's average open rate
    @jsondata:Name {value: "avg_open_rate"}
    decimal avgOpenRate?;
};

# Settings for the campaign including the email subject, from name, and from email address
public type CampaignSettings record {
    # The subject line for the campaign
    @jsondata:Name {value: "subject_line"}
    string subjectLine?;
    # The preview text for the campaign
    @jsondata:Name {value: "preview_text"}
    string previewText?;
    # The reply-to email address for the Automation
    @jsondata:Name {value: "reply_to"}
    string replyTo?;
    # The title of the Automation
    string title?;
    # The 'from' name for the Automation (not an email address)
    @jsondata:Name {value: "from_name"}
    string fromName?;
};

# An option for Signup Form Styles
public type AnOptionForSignupFormStyles record {
    # A string that identifies the property
    string property?;
    # A string that identifies value of the property
    string value?;
};

# A detailed report of any campaign emails that were opened by a list member
public type OpenDetailReport record {
    # The total number of opens matching the query regardless of pagination
    @jsondata:Name {value: "total_opens"}
    int totalOpens?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of objects, each representing a list member who opened a campaign email. Each members object will contain information about the number of total opens by a single member, as well as timestamps for each open event
    OpenActivity1[] members?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
    # The campaign id
    @jsondata:Name {value: "campaign_id"}
    string campaignId?;
    # The total number of opens excluding opens from email clients that use proxies regardless of pagination
    @jsondata:Name {value: "total_proxy_excluded_opens"}
    int totalProxyExcludedOpens?;
};

# One day's worth of list activity. Doesn't include Automation activity
public type DailyListActivity record {
    # The number of soft bounces
    @jsondata:Name {value: "soft_bounce"}
    int softBounce?;
    # The number of hard bounces
    @jsondata:Name {value: "hard_bounce"}
    int hardBounce?;
    # The number of subscribes
    int subs?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of emails sent on the date for the activity summary
    @jsondata:Name {value: "emails_sent"}
    int emailsSent?;
    # The number of unsubscribes
    int unsubs?;
    # The number of clicks
    @jsondata:Name {value: "recipient_clicks"}
    int recipientClicks?;
    # The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity
    @jsondata:Name {value: "other_adds"}
    int otherAdds?;
    # The date for the activity summary
    string day?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers)
    @jsondata:Name {value: "other_removes"}
    int otherRemoves?;
};

public type OpenLocationsLocations record {
    # The number of unique campaign opens for a region excluding opens from email clients that use proxies
    @jsondata:Name {value: "proxy_excluded_opens"}
    int proxyExcludedOpens?;
    # The ISO 3166 2 digit country code
    @jsondata:Name {value: "country_code"}
    string countryCode?;
    # The number of unique campaign opens for a region
    int opens?;
    # The name of the region, if we have one. For blank "region" values, this will be "Rest of Country"
    @jsondata:Name {value: "region_name"}
    string regionName?;
    # An internal code for the region representing the more specific location area such as city or state. When this is blank, it indicates we know the country, but not the region
    string region?;
};

# For sent campaigns, a summary of opens and clicks
public type CampaignReportSummary record {
    # The number of unique clicks
    @jsondata:Name {value: "subscriber_clicks"}
    int subscriberClicks?;
    # The number of unique clicks divided by the total number of successful deliveries
    @jsondata:Name {value: "click_rate"}
    decimal clickRate?;
    # The total number of opens for a campaign
    int opens?;
    # The total number of clicks for an campaign
    int clicks?;
    # The number of unique opens
    @jsondata:Name {value: "unique_opens"}
    int uniqueOpens?;
    # The number of unique opens divided by the total number of successful deliveries
    @jsondata:Name {value: "open_rate"}
    decimal openRate?;
};

# Contains an array of facebook ads
public type InlineResponse20010 record {
    @jsondata:Name {value: "facebook_ads"}
    InlineResponse20010FacebookAds[] facebookAds?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

# Represents the Queries record for the operation: postListsIdMembers
public type PostListsIdMembersQueries record {
    # If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false
    @http:Query {name: "skip_merge_validation"}
    boolean skipMergeValidation?;
};

# A collection of Facebook ads
public type InlineResponse20012 record {
    @jsondata:Name {value: "facebook_ads"}
    InlineResponse20012FacebookAds[] facebookAds?;
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20011 record {
    *InlineResponse20011AllOf1;
    *InlineResponse20011InlineResponse20011AllOf12;
    *InlineResponse20011InlineResponse20011InlineResponse20011AllOf123;
    *InlineResponse20011InlineResponse20011InlineResponse20011InlineResponse20011AllOf1234;
};

# A collection of landing pages
public type InlineResponse20014 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    @jsondata:Name {value: "landing_pages"}
    LandingPageReport1[] landingPages?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20013 record {
    *InlineResponse20013AllOf1;
    *InlineResponse20013InlineResponse20013AllOf12;
    *InlineResponse20013InlineResponse20013InlineResponse20013AllOf123;
    *InlineResponse20013InlineResponse20013InlineResponse20013InlineResponse20013AllOf1234;
    @jsondata:Name {value: "report_summary"}
    record {*InlineResponse20013ReportSummary; *ReportSummary; int reach?; @jsondata:Name {value: "click_rate"}
        decimal clickRate?; decimal impressions?; ReportSummaryEcommerce ecommerce?; int clicks?;} reportSummary?;
};

public type InlineResponse20016 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of reports for each question on the survey
    SurveyQuestionReport1[] questions?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20015 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # The surveys that have reports available
    SurveyReport[] surveys?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20018 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of responses to a survey
    SurveyRespondents[] responses?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};

public type InlineResponse20017 record {
    # A list of link types and descriptions for the API schema documents
    @jsondata:Name {value: "_links"}
    ResourceLink[] links?;
    # An array of answers for a question on the survey
    SurveyQuestionAnswer[] answers?;
    # The total number of items matching the query regardless of pagination
    @jsondata:Name {value: "total_items"}
    int totalItems?;
};
